{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/AppletController.ts"],"names":["AudioClip","AudioSource","BlockInputEvents","Button","Component","Node","Toggle","tween","v3","_decorator","BiDirectionalMap","error","info","MenuController","networkReplicator","OptionButton","SoftEditBox","UIDrag","ccclass","property","requireComponent","CheckStatus","ScreenType","SCREENS","BEGIN","END","AppletController","constructor","_audioSource","_replicationIndex","_screen","_questionToScreenMap","reduce","arr","screenType","screenIndex","HAS_CHECK","qIndex","length","push","_check","UNCHECKED","_correctAnswers","Array","filter","type","registerEvent","onLoad","getComponent","analyticsInjected","on","data","correctAnswers","size","index","questions","answeredCorrectly","current_q","_analyticsCallback","beginButton","node","EventType","CLICK","_beginCallback","checkButton","_checkCallback","nextButton","_nextCallback","homeButton","_homeCallback","menu","MENU_RESET","_menuResetCallback","MENU_HOME","MENU_QUESTION","_menuQuestionCallback","MENU_CLOSE","_playClickSound","MENU_OPEN","start","_updateVisibility","getStateData","syncData","checkStatus","updateStateData","clickAudio","playOneShot","isUpdateBackground","correctPrompt","active","CORRECT","incorrectPrompt","INCORRECT","_isCheckButtonVisible","_isNextButtonVisible","_isMenuAvailable","inputBlocker","screens","forEach","i","_resetCallback","inputBoxes","inputBox","string","enabled","hideKeypad","optionButtons","btn","reset","draggables","drag","isAnalyticsWorking","_screenToQuestion","sendAnalyticsData","_questionToScreen","questionIndex","hasKey","getValue","hasValue","getKey","correctAudio","to","scale","angle","incorrectAudio","DEFAULT"],"mappings":"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","sourcesContent":["import {\n  AudioClip,\n  AudioSource,\n  BlockInputEvents,\n  Button,\n  Component,\n  Node,\n  Toggle,\n  tween,\n  v3,\n  _decorator,\n} from \"cc\";\nimport {\n  AnalyticsData,\n  BiDirectionalMap,\n  error,\n  info,\n  IReplicatedEvent,\n  MenuController,\n  networkReplicator,\n  OptionButton,\n  SoftEditBox,\n  UIDrag,\n} from \"db://as_framework/scripts\";\n\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum CheckStatus {\n  INCORRECT = -1,\n  UNCHECKED = 0,\n  CORRECT = 1,\n}\n\nenum ScreenType {\n  DEFAULT, // No checks only show next button.\n  BEGIN, // Hide next, check and menu.\n  END, // Hide next, check and menu.\n  HAS_CHECK,\n}\n\nconst SCREENS = [\n  ScreenType.BEGIN, // Screen 0\n  // ScreenType.HAS_CHECK, // Screen 1\n  // ScreenType.DEFAULT, // Screen 2\n  // ScreenType.DEFAULT, // Screen 3\n  // ... etc.\n  ScreenType.END, // Screen last\n];\n\ninterface SyncData {\n  screenIndex: number; // Current screen index.\n  checkStatus: CheckStatus; // Status of check.\n}\n\n@ccclass(\"AppletController\")\n@requireComponent(AudioSource)\nexport class AppletController extends Component implements IReplicatedEvent {\n  // List of all screen backgrounds - including start and end.\n  @property(Node) private screens: Node[] = [];\n\n  // Common interface buttons.\n  @property(Button) private beginButton: Button | null = null;\n\n  @property(Button) private checkButton: Button | null = null;\n\n  @property(Button) private nextButton: Button | null = null;\n\n  @property(Button) private homeButton: Button | null = null;\n\n  // Menu interface nodes.\n  @property(MenuController) private menu: MenuController | null = null;\n\n  // Prompts - correct and wrong answer.\n  @property(Node) private correctPrompt: Node | null = null;\n\n  @property(Node) private incorrectPrompt: Node | null = null;\n\n  // Input blocker\n  @property(BlockInputEvents) private inputBlocker: BlockInputEvents | null = null;\n\n  // Activity input nodes and components.\n  // Replace and use these as needed.\n  @property(SoftEditBox) private inputBoxes: SoftEditBox[] = [];\n\n  @property(OptionButton) private optionButtons: OptionButton[] = [];\n\n  @property(Button) private buttons: Button[] = [];\n\n  @property(Toggle) private toggles: Toggle[] = [];\n\n  @property(UIDrag) private draggables: UIDrag[] = [];\n\n  // Audio files for button clicks and correct/incorrect responses\n  @property(AudioClip) private clickAudio: AudioClip | null = null;\n\n  @property(AudioClip) private correctAudio: AudioClip | null = null;\n\n  @property(AudioClip) private incorrectAudio: AudioClip | null = null;\n\n  private _audioSource: AudioSource | null = null;\n\n  private _replicationIndex: string;\n\n  // Current screen / question index.\n  private _screen = 0;\n\n  private _questionToScreenMap = new BiDirectionalMap<number, number>(\n    SCREENS.reduce<[number, number][]>((arr, screenType, screenIndex) => {\n      if (screenType === ScreenType.HAS_CHECK) {\n        const qIndex = arr.length;\n        arr.push([qIndex, screenIndex]);\n      }\n      return arr;\n    }, []),\n  );\n\n  // Check\n  private _check: CheckStatus = CheckStatus.UNCHECKED;\n\n  private _correctAnswers = new Array<boolean>(\n    SCREENS.filter((type) => type === ScreenType.HAS_CHECK).length,\n  );\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  onLoad() {\n    // Get the audio source component.\n    this._audioSource = this.getComponent(AudioSource);\n\n    networkReplicator.analyticsInjected.on((data?: AnalyticsData) => {\n      if (data == null) return;\n      const correctAnswers = new Array<boolean>(this._questionToScreenMap.size);\n      for (let index = 0; index < this._questionToScreenMap.size; index++) {\n        if (data.questions[index].answeredCorrectly) correctAnswers[index] = true;\n      }\n      // The json q starts from 1 but we track from 0.\n      const qIndex = data.current_q - 1;\n      this._analyticsCallback(qIndex, correctAnswers);\n    });\n\n    // Set up common buttons functionality.\n    this.beginButton?.node.on(Button.EventType.CLICK, this._beginCallback, this);\n    this.checkButton?.node.on(Button.EventType.CLICK, this._checkCallback, this);\n    this.nextButton?.node.on(Button.EventType.CLICK, this._nextCallback, this);\n    this.homeButton?.node.on(Button.EventType.CLICK, this._homeCallback, this);\n\n    this.menu?.node.on(MenuController.EventType.MENU_RESET, this._menuResetCallback, this);\n    this.menu?.node.on(MenuController.EventType.MENU_HOME, this._homeCallback, this);\n    this.menu?.node.on(MenuController.EventType.MENU_QUESTION, this._menuQuestionCallback, this);\n    this.menu?.node.on(MenuController.EventType.MENU_CLOSE, () => this._playClickSound(), this);\n    this.menu?.node.on(MenuController.EventType.MENU_OPEN, () => this._playClickSound(), this);\n\n    // --------------------------------------------------\n    // Set up Applet input handlers.\n  }\n\n  start() {\n    // Called just before applet first update.\n    this._screen = 0;\n    this._check = CheckStatus.UNCHECKED;\n    this._updateVisibility(true);\n    this._playClickSound();\n  }\n\n  getStateData() {\n    const syncData: SyncData = {\n      screenIndex: this._screen,\n      checkStatus: this._check,\n    };\n\n    return syncData;\n  }\n\n  updateStateData(syncData: SyncData) {\n    // Update the state variables.\n    this._screen = syncData.screenIndex;\n    this._check = syncData.checkStatus ?? this._check; // If null keep.\n\n    this._updateVisibility(true);\n    // Some updates need to happen after the visibility has been updated\n    // eg. menu, draggables, popups etc.\n  }\n\n  private _playClickSound() {\n    if (this.clickAudio == null || this._audioSource == null) return;\n    // Play the button click audio once\n    this._audioSource.playOneShot(this.clickAudio, 1.0);\n  }\n\n  private _updateVisibility(isUpdateBackground = false) {\n    if (this.correctPrompt) {\n      this.correctPrompt.active = this._check === CheckStatus.CORRECT;\n    }\n    if (this.incorrectPrompt) {\n      this.incorrectPrompt.active = this._check === CheckStatus.INCORRECT;\n    }\n    if (this.checkButton) {\n      this.checkButton.node.active = this._isCheckButtonVisible();\n    }\n    if (this.nextButton) {\n      this.nextButton.node.active = this._isNextButtonVisible();\n    }\n    if (this.menu) {\n      this.menu.node.active = this._isMenuAvailable();\n    }\n    if (this.inputBlocker) {\n      this.inputBlocker.node.active = this._check === CheckStatus.CORRECT;\n    }\n\n    if (isUpdateBackground) {\n      this.screens.forEach((node, i) => (node.active = this._screen === i));\n      info(`Making screen ${this._screen} visible`);\n    }\n  }\n\n  private _resetCallback() {\n    // Reset the soft edit boxes.\n    this.inputBoxes.forEach((inputBox) => {\n      inputBox.string = \"\";\n      inputBox.enabled = true;\n      inputBox.hideKeypad();\n    });\n\n    this.optionButtons.forEach((btn) => {\n      btn.reset();\n    });\n\n    this.draggables.forEach((drag) => drag.reset());\n  }\n\n  private _beginCallback() {\n    this._playClickSound();\n    info(\"Applet started!!\");\n    this._screen = 1;\n    this._updateVisibility(true);\n  }\n\n  private _homeCallback() {\n    this._playClickSound();\n    info(\"Applet Restarted!!\");\n    this._screen = 0;\n    this._resetCallback();\n    this._updateVisibility(true);\n  }\n\n  private _nextCallback() {\n    // Send Analytics data if needed before screen is incremented.\n    if (networkReplicator.isAnalyticsWorking && SCREENS[this._screen] === ScreenType.HAS_CHECK) {\n      const qIndex = this._screenToQuestion(this._screen);\n      if (this._check === CheckStatus.CORRECT) {\n        this._correctAnswers[qIndex] = true;\n      }\n      networkReplicator.sendAnalyticsData(\n        qIndex + 1, // The json q starts from 1 but we track from 0.\n        this._correctAnswers,\n        false,\n      );\n    }\n\n    // Check if last page and send with the flag as true.\n    if (networkReplicator.isAnalyticsWorking && SCREENS[this._screen + 1] === ScreenType.END) {\n      networkReplicator.sendAnalyticsData(-1, this._correctAnswers, true);\n    }\n\n    this._playClickSound();\n    this._screen++;\n    this._check = CheckStatus.UNCHECKED;\n    this._updateVisibility(true);\n  }\n\n  private _menuResetCallback() {\n    this._playClickSound();\n    this._resetCallback();\n  }\n\n  private _analyticsCallback(current_q: number, correctAnswers: boolean[]) {\n    this._screen = this._questionToScreen(current_q);\n    this._correctAnswers = correctAnswers;\n\n    this._resetCallback();\n    this._updateVisibility(true);\n  }\n\n  private _menuQuestionCallback(questionIndex: number) {\n    // The selected question number starts from 1.\n    this._screen = this._questionToScreen(questionIndex - 1);\n\n    this._resetCallback();\n    this._updateVisibility(true);\n  }\n\n  private _questionToScreen(questionIndex: number) {\n    if (!this._questionToScreenMap.hasKey(questionIndex)) {\n      error(\"Invalid question index \", questionIndex);\n      return 0;\n    }\n\n    return this._questionToScreenMap.getValue(questionIndex)!;\n  }\n\n  private _screenToQuestion(screenIndex: number) {\n    if (!this._questionToScreenMap.hasValue(screenIndex)) {\n      error(\"Invalid screen index \", screenIndex);\n      return 0;\n    }\n\n    return this._questionToScreenMap.getKey(screenIndex)!;\n  }\n\n  private _checkCallback() {\n    // Evaluate for required screens.\n    switch (this._screen) {\n      case 1: {\n        // Implement check logic.\n        break;\n      }\n\n      default: {\n        error(`Invalid screen index: ${this._screen}`);\n        break;\n      }\n    }\n\n    // Playing audio.\n    if (this._check === CheckStatus.CORRECT) {\n      if (this._audioSource && this.correctAudio)\n        this._audioSource.playOneShot(this.correctAudio, 0.5);\n      // animate the prompt.\n      tween(this.correctPrompt)\n        .to(0.2, { scale: v3(1.2, 1.2), angle: 10 })\n        .to(0.2, { scale: v3(1, 1), angle: -10 })\n        .to(0.2, { scale: v3(1, 1), angle: 0 })\n        .start();\n    } else if (this._check === CheckStatus.INCORRECT) {\n      if (this._audioSource && this.incorrectAudio)\n        this._audioSource.playOneShot(this.incorrectAudio, 0.2);\n      // animate the prompt.\n      tween(this.incorrectPrompt)\n        .to(0.2, { scale: v3(1.2, 1.2), angle: 10 })\n        .to(0.2, { scale: v3(1, 1), angle: -10 })\n        .to(0.2, { scale: v3(1, 1), angle: 0 })\n        .start();\n    }\n\n    // Update screen\n    this._updateVisibility();\n  }\n\n  private _isCheckButtonVisible() {\n    return this._check !== CheckStatus.CORRECT && SCREENS[this._screen] === ScreenType.HAS_CHECK;\n  }\n\n  private _isNextButtonVisible() {\n    return this._check === CheckStatus.CORRECT || SCREENS[this._screen] === ScreenType.DEFAULT;\n  }\n\n  private _isMenuAvailable() {\n    return (\n      SCREENS[this._screen] === ScreenType.DEFAULT || SCREENS[this._screen] === ScreenType.HAS_CHECK\n    );\n  }\n}\n"]}