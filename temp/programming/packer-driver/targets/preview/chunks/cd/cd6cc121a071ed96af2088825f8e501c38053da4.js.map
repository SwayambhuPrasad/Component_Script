{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/SoftEditBox.ts"],"names":["Button","Component","Enum","EventHandler","KeyCode","Label","Node","size","UITransform","_decorator","AS","error","SoftKeypad","UIPopup","ccclass","property","requireComponent","KeypadType","SoftEditBox","type","tooltip","displayOrder","keypadType","_keypadType","keySize","_keySize","string","textLabel","_textLabel","maxLength","_maxLength","keypadPopup","_keypadPopup","isKeypadVisible","isVisible","isKeypadEmpty","showEmpty","value","_updateTextLabel","Number","hideKeypad","node","active","hide","showKeypad","exclusive","show","showEmptyKeypad","onLoad","_initKeypadLayout","on","EventType","HIDE_COMPLETE","_onKeypadHidden","onEnable","CLICK","_onClick","onDisable","off","getChildByName","layer","getComponent","addComponent","parent","keys","NUMERIC_INT","_addIntegerKeys","NUMERIC_INT_SIGNED","push","char","keyCode","NUM_SUBTRACT","DASH","callback","_addChar","bind","NUMERIC_FLOAT","_addFloatKeys","NUMERIC_FLOAT_SIGNED","ALPHABET","ALPHA_NUMERIC","SpecialKeys","DELETE","BACKSPACE","_onDeleteKeyClicked","DONE","ENTER","NUM_ENTER","_onDoneKeyClicked","keysLayout","outKeys","NUM_DECIMAL","PERIOD","i","toString","NUM_0","DIGIT_0","length","isNaN","emitEvents","textChangedEvents","emit","TEXT_CHANGED","_deleteChar","slice","editingDidBeganEvents","EDITING_DID_BEGAN","editingDidEndedEvents","EDITING_DID_ENDED","Array"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Component,\n  Enum,\n  EventHandler,\n  KeyCode,\n  Label,\n  Node,\n  Size,\n  size,\n  UITransform,\n  _decorator,\n} from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { KeyData, SoftKeypad } from \"./SoftKeypad\";\nimport { UIPopup } from \"./UIPopup\";\n\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum KeypadType {\n  NUMERIC_FLOAT,\n  NUMERIC_INT,\n  NUMERIC_INT_SIGNED,\n  NUMERIC_FLOAT_SIGNED,\n  ALPHABET,\n  ALPHA_NUMERIC,\n}\n\n@ccclass(\"SoftEditBox\")\n@requireComponent(UITransform)\n@requireComponent(Button)\nexport class SoftEditBox extends AS(Component) {\n  static readonly EventType = {\n    EDITING_DID_BEGAN: \"editing-did-began\",\n    EDITING_DID_ENDED: \"editing-did-ended\",\n    TEXT_CHANGED: \"text-changed\",\n  };\n\n  static readonly KeypadType = KeypadType;\n\n  @property({\n    type: [EventHandler],\n    tooltip: \"The event handler to be triggered when editing begins.\",\n    displayOrder: 30,\n  })\n  editingDidBeganEvents = new Array<EventHandler>();\n\n  @property({\n    type: [EventHandler],\n    tooltip: \"The event handler to be triggered when editing ends.\",\n    displayOrder: 31,\n  })\n  editingDidEndedEvents = new Array<EventHandler>();\n\n  @property({\n    type: [EventHandler],\n    tooltip: \"The event handler to be triggered when text changes.\",\n    displayOrder: 32,\n  })\n  textChangedEvents = new Array<EventHandler>();\n\n  @property private _keypadType = 0;\n\n  @property private _keySize = size(50, 50);\n\n  @property private _textLabel: Label | null = null;\n\n  @property private _maxLength = 4;\n\n  @property private _keypadPopup: SoftKeypad | null = null;\n\n  // TODO: Handle interactable.\n  @property({\n    type: Enum(KeypadType),\n    tooltip: \"The type of keypad input to use.\",\n  })\n  get keypadType() {\n    return this._keypadType;\n  }\n\n  @property({\n    tooltip: `The size of each key element.`,\n  })\n  get keySize(): Size {\n    return this._keySize;\n  }\n\n  @property\n  get string() {\n    return this.textLabel?.string ?? \"\";\n  }\n\n  @property({\n    type: Label,\n    tooltip: \"The Label component attached to the node for the SoftEditBox's input text label.\",\n  })\n  get textLabel() {\n    return this._textLabel;\n  }\n\n  @property({\n    tooltip: \"The maximum number of text characters.\",\n  })\n  get maxLength() {\n    return this._maxLength;\n  }\n\n  @property({\n    type: SoftKeypad,\n    tooltip: \"The keypad popup.\",\n  })\n  get keypadPopup(): SoftKeypad | null {\n    return this._keypadPopup;\n  }\n\n  get isKeypadVisible() {\n    return this.keypadPopup?.isVisible ?? false;\n  }\n\n  get isKeypadEmpty() {\n    return this.keypadPopup?.showEmpty ?? true;\n  }\n\n  set keypadType(value) {\n    this._keypadType = value;\n  }\n\n  set keySize(value: Size) {\n    this._keySize = value;\n  }\n\n  set string(value) {\n    if (this.textLabel) this.textLabel.string = value;\n  }\n\n  set textLabel(value) {\n    this._textLabel = value;\n    this._updateTextLabel();\n  }\n\n  set maxLength(value) {\n    this._maxLength = value;\n  }\n\n  set keypadPopup(value: SoftKeypad | null) {\n    this._keypadPopup = value;\n  }\n\n  /**\n   * The edit box string as a `number`.\n   * @returns A `number` if the edit box string is a valid number string.\n   */\n  value() {\n    return Number(this.string);\n  }\n\n  hideKeypad() {\n    if (this.keypadPopup == null) return;\n    if (!this.node.active || !this.keypadPopup.isVisible) return;\n    this.keypadPopup.hide();\n  }\n\n  showKeypad() {\n    if (this.keypadPopup == null) return;\n    this.keypadPopup.exclusive = false;\n    this.keypadPopup.showEmpty = false;\n    this.keypadPopup.show();\n  }\n\n  showEmptyKeypad() {\n    if (this.keypadPopup == null) return;\n    this.keypadPopup.exclusive = true;\n    this.keypadPopup.showEmpty = true;\n    this.keypadPopup.show();\n  }\n\n  onLoad() {\n    if (this.keypadPopup == null) {\n      error(\"The keypad popup cannot be null.\");\n      return;\n    }\n    if (this.textLabel == null) {\n      error(\"The text label cannot be null.\");\n      return;\n    }\n    this._initKeypadLayout();\n    this.keypadPopup.node.on(UIPopup.EventType.HIDE_COMPLETE, this._onKeypadHidden, this);\n  }\n\n  onEnable() {\n    this.node.on(Button.EventType.CLICK, this._onClick, this);\n  }\n\n  onDisable() {\n    this.node.off(Button.EventType.CLICK, this._onClick, this);\n  }\n\n  private _updateTextLabel() {\n    let textLabel = this._textLabel;\n    // If textLabel doesn't exist, create one.\n    if (!textLabel) {\n      let node = this.node.getChildByName(\"TEXT_LABEL\");\n      if (!node) {\n        node = new Node(\"TEXT_LABEL\");\n        node.layer = this.node.layer;\n      }\n      textLabel = node.getComponent(Label);\n      if (!textLabel) {\n        textLabel = node.addComponent(Label);\n      }\n      node.parent = this.node;\n      this._textLabel = textLabel;\n    }\n  }\n\n  // private _update\n\n  private _initKeypadLayout() {\n    if (this.keypadPopup == null) return;\n    const keys: KeyData[] = [];\n    switch (this.keypadType) {\n      case KeypadType.NUMERIC_INT: {\n        this._addIntegerKeys(keys);\n        break;\n      }\n      case KeypadType.NUMERIC_INT_SIGNED: {\n        this._addIntegerKeys(keys);\n        // add - key.\n        keys.push({\n          char: \"-\",\n          size: this.keySize,\n          keyCode: [KeyCode.NUM_SUBTRACT, KeyCode.DASH],\n          callback: this._addChar.bind(this, \"-\"),\n        });\n        break;\n      }\n      case KeypadType.NUMERIC_FLOAT: {\n        this._addFloatKeys(keys);\n        break;\n      }\n      case KeypadType.NUMERIC_FLOAT_SIGNED: {\n        this._addFloatKeys(keys);\n        // add - key.\n        keys.push({\n          char: \"-\",\n          size: this.keySize,\n          keyCode: [KeyCode.NUM_SUBTRACT, KeyCode.DASH],\n          callback: this._addChar.bind(this, \"-\"),\n        });\n        break;\n      }\n      case KeypadType.ALPHABET:\n      case KeypadType.ALPHA_NUMERIC:\n        error(\"Alphanumeric Keypad not implemented!!\");\n      default:\n        break;\n    }\n\n    keys.push({\n      char: SoftKeypad.SpecialKeys.DELETE,\n      size: this.keySize,\n      keyCode: [KeyCode.BACKSPACE, KeyCode.DELETE],\n      callback: this._onDeleteKeyClicked.bind(this),\n    });\n\n    keys.push({\n      char: SoftKeypad.SpecialKeys.DONE,\n      size: this.keySize,\n      keyCode: [KeyCode.ENTER, KeyCode.NUM_ENTER],\n      callback: this._onDoneKeyClicked.bind(this),\n    });\n\n    this.keypadPopup.keysLayout = { keys };\n  }\n\n  private _addFloatKeys(outKeys: Array<KeyData>) {\n    this._addIntegerKeys(outKeys);\n    // add `.` key.\n    outKeys.push({\n      char: \".\",\n      size: this.keySize,\n      keyCode: [KeyCode.NUM_DECIMAL, KeyCode.PERIOD],\n      callback: this._addChar.bind(this, \".\"),\n    });\n  }\n\n  private _addIntegerKeys(outKeys: Array<KeyData>) {\n    for (let i = 1; i < 10; i++) {\n      // Add keys 1-9\n      outKeys.push({\n        char: i.toString(),\n        size: this.keySize,\n        keyCode: [KeyCode.NUM_0 + i, KeyCode.DIGIT_0 + i],\n        callback: this._addChar.bind(this, i.toString()),\n      });\n    }\n    // add 0 key.\n    outKeys.push({\n      char: \"0\",\n      size: this.keySize,\n      keyCode: [KeyCode.NUM_0, KeyCode.DIGIT_0],\n      callback: this._addChar.bind(this, \"0\"),\n    });\n  }\n\n  private _addChar(char: string) {\n    if (this.string.length >= this.maxLength) return;\n    if (this.keypadType === KeypadType.NUMERIC_FLOAT && isNaN(+(this.string + char))) return;\n    this.string += char;\n    EventHandler.emitEvents(this.textChangedEvents, this);\n    this.node.emit(SoftEditBox.EventType.TEXT_CHANGED, this);\n  }\n\n  private _deleteChar() {\n    this.string = this.string.slice(0, -1);\n    EventHandler.emitEvents(this.textChangedEvents, this);\n    this.node.emit(SoftEditBox.EventType.TEXT_CHANGED, this);\n  }\n\n  private _onClick() {\n    this.showKeypad();\n    EventHandler.emitEvents(this.editingDidBeganEvents, this);\n    this.node.emit(SoftEditBox.EventType.EDITING_DID_BEGAN, this);\n  }\n\n  private _onDoneKeyClicked() {\n    this.hideKeypad();\n  }\n\n  private _onKeypadHidden() {\n    EventHandler.emitEvents(this.editingDidEndedEvents, this);\n    this.node.emit(\n      SoftEditBox.EventType.EDITING_DID_ENDED,\n      this,\n      this.isKeypadEmpty, // HACK: to handle replicated end.\n    );\n  }\n\n  private _onDeleteKeyClicked() {\n    this._deleteChar();\n  }\n}\n"]}