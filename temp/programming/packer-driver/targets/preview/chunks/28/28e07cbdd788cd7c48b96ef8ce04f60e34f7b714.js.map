{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/FontManager.ts"],"names":["getFontsLoadedEvent","fontsLoadedEvent","expose","loadFonts","url","families","Promise","resolve","_","config","typekit","id","join","api","google","custom","urls","load","classes","active","trigger","JSON","stringify","undefined","loadKatexFonts","loadAllFonts","on","labels","director","getScene","getComponentsInChildren","Label","forEach","label","useSystemFont","markForUpdateRenderData","fonts","fetch","json","all","fontKits","map","font","hasLatex","CCString","Component","_decorator","AS","SimpleEvent","info","indentString","WebFont","ccclass","property","executeInEditMode","FontData","tooltip","type","toJson","FontManager","onLoad"],"mappings":"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","sourcesContent":["import { CCString, Component, director, Label, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { SimpleEvent } from \"./LiteEvent\";\nimport { info } from \"./Logger\";\nimport { indentString } from \"./Utils\";\nimport WebFont from \"./webfontloader.js\";\nconst { ccclass, property, executeInEditMode } = _decorator;\n\nconst fontsLoadedEvent = new SimpleEvent<void>();\nexport function getFontsLoadedEvent() {\n  return fontsLoadedEvent.expose();\n}\n\nexport function loadFonts({ url, families }: IFontKit) {\n  return new Promise<void>((resolve, _) => {\n    let config: WebFont.Config = {};\n    if (url === \"typekit\") {\n      config = {\n        typekit: {\n          id: families.join(\";\"),\n          //@ts-expect-error\n          api: \"//use.edgefonts.net\",\n        },\n      };\n    } else if (url === \"google\") {\n      config = { google: { families } };\n    } else {\n      config = {\n        custom: {\n          families,\n          urls: [url],\n        },\n      };\n    }\n\n    WebFont.load({\n      ...config,\n      classes: false,\n      active() {\n        fontsLoadedEvent.trigger();\n      },\n    });\n\n    info(`Fonts loaded - ${url}:\\n${indentString(JSON.stringify(families, undefined, 2))}`);\n    resolve();\n  });\n}\n\nfunction loadKatexFonts() {\n  return loadFonts({\n    url: \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.15.2/katex.min.css\",\n    families: [\n      \"KaTeX_AMS\",\n      \"KaTeX_Caligraphic:n4,n7\",\n      \"KaTeX_Fraktur:n4,n7\",\n      \"KaTeX_Main:n4,n7,i4,i7\",\n      \"KaTeX_Math:i4,i7\",\n      \"KaTeX_Script\",\n      \"KaTeX_SansSerif:n4,n7,i4\",\n      \"KaTeX_Size1\",\n      \"KaTeX_Size2\",\n      \"KaTeX_Size3\",\n      \"KaTeX_Size4\",\n      \"KaTeX_Typewriter\",\n    ],\n  });\n}\n\nasync function loadAllFonts() {\n  fontsLoadedEvent.on(() => {\n    const labels = director.getScene()?.getComponentsInChildren(Label);\n    if (labels) {\n      labels.forEach((label) => {\n        if (label.useSystemFont) {\n          label.markForUpdateRenderData(true);\n        }\n      });\n    }\n  });\n\n  await loadFonts({ url: \"google\", families: [\"Mulish:n4,i4,n7\"] });\n  const fonts = (await (await fetch(\"./font-data.json\")).json()) as {\n    fontKits: FontData[];\n    hasLatex: boolean;\n  };\n  await Promise.all(fonts.fontKits.map((font) => loadFonts(font)));\n  if (fonts.hasLatex) await loadKatexFonts();\n  fontsLoadedEvent.trigger();\n}\n\nloadAllFonts();\n\nexport interface IFontKit {\n  url: string;\n  families: string[];\n}\n\n@ccclass(\"FontData\")\nexport class FontData {\n  @property({ tooltip: \"The url of the css that contains the webfonts.\" }) url = \"\";\n\n  @property({ type: CCString, tooltip: \"Array of font families to load\" }) families: string[] = [];\n\n  toJson() {\n    return {\n      url: this.url,\n      families: this.families,\n    };\n  }\n}\n\n@ccclass(\"FontManager\")\n@executeInEditMode\nexport class FontManager extends AS(Component) {\n  @property(FontData) fontKits: FontData[] = [];\n\n  async onLoad() {\n    await Promise.all(this.fontKits.map((font) => loadFonts(font)));\n    fontsLoadedEvent.trigger();\n  }\n}\n"]}