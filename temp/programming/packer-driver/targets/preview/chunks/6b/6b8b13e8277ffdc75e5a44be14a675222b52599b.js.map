{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ColourRect.ts"],"names":["CCBoolean","CCInteger","clamp","color","Color","Graphics","UITransform","_decorator","AS","ccclass","property","requireComponent","disallowMultiple","executeInEditMode","ColourRect","type","tooltip","visible","isRounded","override","displayName","_uiTransform","_opacity","_isRounded","radius","_radius","fillColor","lineWidth","_lineWidth","lineJoin","_lineJoin","lineCap","_lineCap","strokeColor","_strokeColor","_fillColor","miterLimit","_miterLimit","value","updateDraw","_color","impl","set","onLoad","getComponent","onEnable","node","on","EventType","SIZE_CHANGED","onDisable","off","update","_uiProps","localOpacity","clear","temp","clone","alpha","Math","round","a","r","g","b","anchorX","anchorY","width","height","roundRect","rect","fill"],"mappings":"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","sourcesContent":["import { CCBoolean, CCInteger, clamp, color, Color, Graphics, UITransform, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\n\nconst { ccclass, property, requireComponent, disallowMultiple, executeInEditMode } = _decorator;\n\n@ccclass(\"ColourRect\")\n@disallowMultiple\n@executeInEditMode\n@requireComponent(UITransform)\nexport class ColourRect extends AS(Graphics) {\n  @property protected _isRounded = false;\n\n  @property protected _radius = 4;\n\n  private _uiTransform: UITransform | null = null;\n\n  private _opacity = 1;\n\n  @property({ type: CCBoolean, tooltip: \"Enable to create rect with rounded corners.\" })\n  get isRounded() {\n    return this._isRounded;\n  }\n\n  @property({\n    type: CCInteger,\n    visible: function (this: ColourRect) {\n      return this.isRounded;\n    },\n    tooltip: \"If is rounded the radius to use for the corners.\",\n  })\n  get radius() {\n    return this._radius;\n  }\n\n  // Override the existing color property.\n  @property({ type: Color, override: true, visible: true })\n  get color() {\n    return this.fillColor;\n  }\n\n  @property({ override: true, visible: false })\n  get lineWidth() {\n    return this._lineWidth;\n  }\n\n  @property({ override: true, visible: false })\n  get lineJoin() {\n    return this._lineJoin;\n  }\n\n  @property({ override: true, visible: false })\n  get lineCap() {\n    return this._lineCap;\n  }\n\n  @property({ override: true, visible: false })\n  get strokeColor(): Readonly<Color> {\n    return this._strokeColor;\n  }\n\n  @property({ override: true, displayName: \"Color\" })\n  get fillColor(): Readonly<Color> {\n    return this._fillColor;\n  }\n\n  @property({ override: true, visible: false })\n  get miterLimit() {\n    return this._miterLimit;\n  }\n\n  set isRounded(value) {\n    this._isRounded = value;\n    this.updateDraw();\n  }\n\n  set radius(value) {\n    this._radius = value;\n    this.updateDraw();\n  }\n\n  set color(value: Color) {\n    if (this._color === value) {\n      return;\n    }\n    this.fillColor = value;\n    this.updateDraw();\n  }\n\n  set lineWidth(value) {\n    this._lineWidth = value;\n    if (!this.impl) {\n      return;\n    }\n    this.impl.lineWidth = value;\n  }\n\n  set lineJoin(value) {\n    this._lineJoin = value;\n    if (!this.impl) {\n      return;\n    }\n    this.impl.lineJoin = value;\n  }\n\n  set lineCap(value) {\n    this._lineCap = value;\n    if (!this.impl) {\n      return;\n    }\n    this.impl.lineCap = value;\n  }\n\n  set strokeColor(value) {\n    if (!this.impl) {\n      return;\n    }\n    this._strokeColor.set(value);\n    this.impl.strokeColor = this._strokeColor;\n  }\n\n  set fillColor(value) {\n    if (!this.impl) {\n      return;\n    }\n    this._color.set(value);\n    this._fillColor.set(value);\n    this.impl.fillColor = this._fillColor;\n    this.updateDraw();\n  }\n\n  set miterLimit(value) {\n    this._miterLimit = value;\n  }\n\n  onLoad() {\n    super.onLoad();\n    this._uiTransform = this.getComponent(UITransform);\n  }\n\n  onEnable() {\n    super.onEnable();\n    this.node.on(UITransform.EventType.SIZE_CHANGED, this.updateDraw, this);\n    this.updateDraw();\n  }\n\n  onDisable() {\n    super.onDisable();\n    this.node.off(UITransform.EventType.SIZE_CHANGED, this.updateDraw, this);\n  }\n\n  update() {\n    if (this._opacity !== this.node._uiProps.localOpacity) {\n      this._opacity = this.node._uiProps.localOpacity;\n      this.updateDraw();\n    }\n  }\n\n  updateDraw() {\n    if (!this._uiTransform) return;\n    this.clear();\n    const temp = this._fillColor.clone();\n    const alpha = clamp(Math.round(this.node._uiProps.localOpacity * this._fillColor.a), 0, 255);\n    this._fillColor = color(temp.r, temp.g, temp.b, alpha);\n    const anchorX = this._uiTransform.anchorX;\n    const anchorY = this._uiTransform.anchorY;\n    const width = this._uiTransform.width;\n    const height = this._uiTransform.height;\n    if (this.isRounded)\n      this.roundRect(-anchorX * width, -anchorY * height, width, height, this.radius);\n    else this.rect(-anchorX * width, -anchorY * height, width, height);\n    this.fill();\n    this._fillColor = temp;\n  }\n}\n"]}