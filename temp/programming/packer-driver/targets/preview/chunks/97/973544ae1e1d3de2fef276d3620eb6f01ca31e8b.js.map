{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Translations.ts"],"names":["Translations","Director","director","EDITOR","SimpleEvent","debug","error","_polyglotInstance","_languagePhrases","_currentLanguage","_translationsLoadedEvent","_resourcePath","_enabled","_isInitQueued","currentLanguage","translationsLoadedEvent","expose","resourcePath","enabled","value","_queueInit","t","key","options","once","EVENT_BEFORE_UPDATE","_init","response","fetch","text","phrases","_parseLanguagePhrases","_initializePolyglot","err","trigger","Papa","default","parse","results","header","skipEmptyLines","errors","length","e","type","row","code","message","Error","meta","fields","languages","slice","lang","langPhrases","entry","data","phrase","replace","Polyglot","locale","allowMissing","onMissingKey","_options","i18n"],"mappings":"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","sourcesContent":["import { Director, director } from \"cc\";\nimport { EDITOR } from \"cc/env\";\nimport { SimpleEvent } from \"./LiteEvent\";\nimport { debug, error } from \"./Logger\";\n\nvar Polyglot: any;\nvar Papa: any;\n\nclass Translations {\n  private _polyglotInstance: any = null;\n\n  private _languagePhrases: Record<string, Record<string, string>> = {};\n\n  private _currentLanguage = \"US\";\n\n  private _translationsLoadedEvent = new SimpleEvent<void>();\n\n  private _resourcePath = \"./i18n/languagePhrases.csv\";\n\n  private _enabled = false;\n\n  private _isInitQueued = false;\n\n  /**\n   * The currently loaded language id.\n   * The value should be the same as in your translations data file.\n   */\n  get currentLanguage() {\n    return this._currentLanguage;\n  }\n\n  get translationsLoadedEvent() {\n    return this._translationsLoadedEvent.expose();\n  }\n\n  get resourcePath() {\n    return this._resourcePath;\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set currentLanguage(value) {\n    if (value === this._currentLanguage) return;\n    this._currentLanguage = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  set resourcePath(value) {\n    if (value === this._resourcePath) return;\n    this._resourcePath = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  set enabled(value) {\n    if (this._enabled === value) return;\n    this._enabled = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  /**\n   * This method takes a text key as input, and return the localized string\n   * Please read https://github.com/airbnb/polyglot.js for details\n   * @param key The key string to get the phrase.\n   * @param options Interpolation options.\n   * @returns The translated phrase in the current language or empty string if failed.\n   * @example\n   * var myText = i18n.t('MY_TEXT_KEY');\n   * // if your data source is defined as\n   * // {\"hello_name\": \"Hello, %{name}\"}\n   * // you can use the following to interpolate the text\n   * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n   */\n  t(key: string, options?: any) {\n    if (this._polyglotInstance) {\n      return this._polyglotInstance.t(key, options);\n    }\n\n    return \"\";\n  }\n\n  private _queueInit() {\n    if (EDITOR || this._isInitQueued) return;\n    this._isInitQueued = true;\n    director.once(Director.EVENT_BEFORE_UPDATE, this._init, this);\n  }\n\n  private async _init() {\n    try {\n      const response = await fetch(this._resourcePath);\n      const text = await response.text();\n      const phrases = await this._parseLanguagePhrases(text);\n      this._languagePhrases = phrases;\n      debug(\"Loaded phrases:\", phrases);\n      this._initializePolyglot();\n    } catch (err) {\n      error(err);\n      return;\n    } finally {\n      this._isInitQueued = false;\n    }\n\n    this._translationsLoadedEvent.trigger();\n  }\n\n  private async _parseLanguagePhrases(text: string) {\n    // @ts-ignore\n    if (!Papa) Papa = (await import(\"./papaparse.js\")).default;\n    const { parse } = Papa;\n    const results = parse(text, {\n      header: true,\n      skipEmptyLines: true,\n    });\n    if (results.errors.length > 0) {\n      let err = \"\";\n      for (const e of results.errors) {\n        err += `CSV ${e.type} error at row ${e.row}: ${e.code}\\n\\t${e.message}`;\n        err += \"\\n\";\n      }\n      throw new Error(err);\n    }\n\n    if (results.meta.fields == null) {\n      throw new Error(\"CSV parsing failed!\");\n    }\n\n    const phrases: Record<string, Record<string, string>> = {};\n    const languages = results.meta.fields!.slice(1);\n    for (const lang of languages) {\n      const langPhrases: Record<string, string> = {};\n      for (const entry of results.data) {\n        const key = entry.key;\n        const phrase = entry[lang];\n        langPhrases[key] = phrase;\n      }\n      phrases[lang] = langPhrases;\n    }\n\n    return phrases;\n  }\n\n  private async _initializePolyglot() {\n    const phrases = this._languagePhrases[this._currentLanguage];\n    if (phrases == null) {\n      throw new Error(\"The phrases for the current language is not found.\");\n    }\n\n    if (this._polyglotInstance) {\n      this._polyglotInstance.replace(phrases);\n    } else {\n      // @ts-ignore\n      if (!Polyglot) Polyglot = (await import(\"./polyglot.js\")).default;\n      this._polyglotInstance = new Polyglot({\n        phrases: phrases,\n        locale: this._currentLanguage,\n        allowMissing: true,\n        onMissingKey: (key: any, _options: any, locale: any) => {\n          error(`Missing data for ${key} in ${locale}!`);\n          return \"\";\n        },\n        // TODO: pluralization rules.\n        // pluralRules: {}\n      });\n    }\n  }\n}\n\nexport const i18n = new Translations();\n"]}