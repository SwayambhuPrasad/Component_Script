{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedOptionButton.ts"],"names":["Component","EventHandler","_decorator","AS","error","networkReplicator","OptionButton","ccclass","disallowMultiple","requireComponent","ReplicatedOptionButton","constructor","_replicationIndex","_optionButton","registerEvent","awake","getComponent","node","on","EventType","OPTION_CHANGED","_onOptionChanged","onActivityEvent","name","data","selectedIndex","emitEvents","optionChangedEvents","emit","getStateData","updateStateData","button","isReplicated","sendEvent","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,U,OAAAA,U;;AACzBC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;;AACkBC,MAAAA,iB,iBAAAA,iB;;AAClBC,MAAAA,Y,iBAAAA,Y;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,gBAAX;AAA6BC,QAAAA;AAA7B,O,GAAkDP,U;AAExD;AACA;AACA;AACA;;wCAIaQ,sB,WAHZH,OAAO,CAAC,wBAAD,C,UACPE,gBAAgB;AAAA;AAAA,uC,+BAChBD,gB,UAFD,MAGaE,sBAHb,SAG4C;AAAA;AAAA,oBAAGV,SAAH,CAH5C,CAGsF;AAKpFW,QAAAA,WAAW,GAAG;AACZ;AADY,eAJNC,iBAIM;AAAA,eAFNC,aAEM,GAF+B,IAE/B;AAEZ,eAAKD,iBAAL,GAAyB;AAAA;AAAA,sDAAkBE,aAAlB,CAAgC,IAAhC,CAAzB;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKF,aAAL,GAAqB,KAAKG,YAAL;AAAA;AAAA,2CAArB;;AACA,cAAI,KAAKH,aAAL,IAAsB,IAA1B,EAAgC;AAC9B;AAAA;AAAA,gCAAM,6EAAN;AACA;AACD;;AACD,eAAKI,IAAL,CAAUC,EAAV,CAAa;AAAA;AAAA,4CAAaC,SAAb,CAAuBC,cAApC,EAAoD,KAAKC,gBAAzD,EAA2E,IAA3E;AACD;;AAEDC,QAAAA,eAAe,CAACC,IAAD,EAAeC,IAAf,EAAoC;AACjD,cAAI,KAAKX,aAAL,IAAsB,IAAtB,IAA8BU,IAAI,KAAK;AAAA;AAAA,4CAAaJ,SAAb,CAAuBC,cAAlE,EAAkF;;AAClF,cAAII,IAAI,IAAI,IAAZ,EAAkB;AAChB;AAAA;AAAA,gCAAM,2DAAN;AACA;AACD;;AACD,eAAKX,aAAL,CAAmBY,aAAnB,GAAmCD,IAAnC;AACAvB,UAAAA,YAAY,CAACyB,UAAb,CAAwB,KAAKb,aAAL,CAAmBc,mBAA3C,EAAgE,KAAKd,aAArE;AACA,eAAKI,IAAL,CAAUW,IAAV,CAAe;AAAA;AAAA,4CAAaT,SAAb,CAAuBC,cAAtC,EAAsD,KAAKP,aAA3D,EAA0E,IAA1E;AACD;;AAEDgB,QAAAA,YAAY,GAAG;AAAA;;AACb,wCAAO,KAAKhB,aAAZ,qBAAO,oBAAoBY,aAA3B;AACD;;AAEDK,QAAAA,eAAe,CAACN,IAAD,EAAe;AAC5B,cAAI,KAAKX,aAAL,IAAsB,IAA1B,EAAgC;AAChC,eAAKA,aAAL,CAAmBY,aAAnB,GAAmCD,IAAnC;AACAvB,UAAAA,YAAY,CAACyB,UAAb,CAAwB,KAAKb,aAAL,CAAmBc,mBAA3C,EAAgE,KAAKd,aAArE;AACA,eAAKI,IAAL,CAAUW,IAAV,CAAe;AAAA;AAAA,4CAAaT,SAAb,CAAuBC,cAAtC,EAAsD,KAAKP,aAA3D,EAA0E,IAA1E;AACD;;AAEOQ,QAAAA,gBAAgB,CAACU,MAAD,EAAuBC,YAAvB,EAA+C;AACrE;AACA,cAAIA,YAAJ,EAAkB;AAClB;AAAA;AAAA,sDAAkBC,SAAlB,CAA4B;AAC1BC,YAAAA,EAAE,EAAE,KAAKtB,iBADiB;AAE1BW,YAAAA,IAAI,EAAE;AAAA;AAAA,8CAAaJ,SAAb,CAAuBC,cAFH;AAG1BI,YAAAA,IAAI,EAAEO,MAAM,CAACN;AAHa,WAA5B;AAKD;;AAjDmF,O","sourcesContent":["import { Component, EventHandler, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\nimport { OptionButton } from \"./OptionButton\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\n/**\n * Class to automate replication of option-update events for the option button\n * attached to the same node using the `NetworkReplicator`.\n */\n@ccclass(\"ReplicatedOptionButton\")\n@requireComponent(OptionButton)\n@disallowMultiple\nexport class ReplicatedOptionButton extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _optionButton: OptionButton | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._optionButton = this.getComponent(OptionButton);\n    if (this._optionButton == null) {\n      error(\"The replicated option button must be attached to a node with option button.\");\n      return;\n    }\n    this.node.on(OptionButton.EventType.OPTION_CHANGED, this._onOptionChanged, this);\n  }\n\n  onActivityEvent(name: string, data?: number): void {\n    if (this._optionButton == null || name !== OptionButton.EventType.OPTION_CHANGED) return;\n    if (data == null) {\n      error(\"The data recieved on option-changed event cannot be null.\");\n      return;\n    }\n    this._optionButton.selectedIndex = data;\n    EventHandler.emitEvents(this._optionButton.optionChangedEvents, this._optionButton);\n    this.node.emit(OptionButton.EventType.OPTION_CHANGED, this._optionButton, true);\n  }\n\n  getStateData() {\n    return this._optionButton?.selectedIndex;\n  }\n\n  updateStateData(data: number) {\n    if (this._optionButton == null) return;\n    this._optionButton.selectedIndex = data;\n    EventHandler.emitEvents(this._optionButton.optionChangedEvents, this._optionButton);\n    this.node.emit(OptionButton.EventType.OPTION_CHANGED, this._optionButton, true);\n  }\n\n  private _onOptionChanged(button: OptionButton, isReplicated?: boolean) {\n    // The button is valid only if button triggered.\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: OptionButton.EventType.OPTION_CHANGED,\n      data: button.selectedIndex,\n    });\n  }\n}\n"]}