{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/polyglot.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","replace","String","prototype","split","delimiter","russianPluralGroups","n","lastTwo","end","defaultPluralRules","pluralTypes","arabic","bosnian_serbian","chinese","croatian","french","german","russian","lithuanian","czech","polish","icelandic","slovenian","pluralTypeToLanguages","langToTypeMap","mapping","ret","type","langs","Object","entries","lang","values","pluralTypeName","pluralRules","locale","langToPluralType","call","en","pluralTypeIndex","pluralType","count","createMemoizedPluralTypeNameSelector","localePluralTypeStorage","escape","token","constructTokenRegex","opts","prefix","suffix","RangeError","RegExp","memoizedPluralTypeName","defaultTokenRegex","transformPhrase","phrase","substitutions","tokenRegex","TypeError","result","interpolationRegex","options","smart_count","pluralRulesOrDefault","texts","bestLocale","pluralTypeWithCount","trim","expression","argument","hasOwnProperty","Polyglot","phrases","extend","currentLocale","allowMissing","onMissingKey","warn","console","bind","interpolation","newLocale","morePhrases","key","prefixedKey","unset","clear","newPhrases","t","_","has","transform","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n //     (c) 2012-2018 Airbnb, Inc.\n //\n //     polyglot.js may be freely distributed under the terms of the BSD\n //     license. For all licensing information, details, and documentation:\n //     http://airbnb.github.com/polyglot.js\n //\n //\n // Polyglot.js is an I18n helper library written in JavaScript, made to\n // work both in the browser and in Node. It provides a simple solution for\n // interpolation and pluralization, based off of Airbnb's\n // experience adding I18n functionality to its Backbone.js and Node apps.\n //\n // Polylglot is agnostic to your translation backend. It doesn't perform any\n // translation; it simply gives you a way to manage translated phrases from\n // your client- or server-side JavaScript application.\n //\n\n var replace = String.prototype.replace;\n var split = String.prototype.split;\n\n // #### Pluralization methods\n // The string that separates the different phrase possibilities.\n var delimiter = \"||||\";\n\n var russianPluralGroups = function (n) {\n   var lastTwo = n % 100;\n   var end = lastTwo % 10;\n   if (lastTwo !== 11 && end === 1) {\n     return 0;\n   }\n   if (end >= 2 && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n     return 1;\n   }\n   return 2;\n };\n\n var defaultPluralRules = {\n   // Mapping from pluralization group plural logic.\n   pluralTypes: {\n     arabic: function (n) {\n       // http://www.arabeyes.org/Plural_Forms\n       if (n < 3) {\n         return n;\n       }\n       var lastTwo = n % 100;\n       if (lastTwo >= 3 && lastTwo <= 10) return 3;\n       return lastTwo >= 11 ? 4 : 5;\n     },\n     bosnian_serbian: russianPluralGroups,\n     chinese: function () {\n       return 0;\n     },\n     croatian: russianPluralGroups,\n     french: function (n) {\n       return n >= 2 ? 1 : 0;\n     },\n     german: function (n) {\n       return n !== 1 ? 1 : 0;\n     },\n     russian: russianPluralGroups,\n     lithuanian: function (n) {\n       if (n % 10 === 1 && n % 100 !== 11) {\n         return 0;\n       }\n       return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;\n     },\n     czech: function (n) {\n       if (n === 1) {\n         return 0;\n       }\n       return n >= 2 && n <= 4 ? 1 : 2;\n     },\n     polish: function (n) {\n       if (n === 1) {\n         return 0;\n       }\n       var end = n % 10;\n       return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n     },\n     icelandic: function (n) {\n       return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;\n     },\n     slovenian: function (n) {\n       var lastTwo = n % 100;\n       if (lastTwo === 1) {\n         return 0;\n       }\n       if (lastTwo === 2) {\n         return 1;\n       }\n       if (lastTwo === 3 || lastTwo === 4) {\n         return 2;\n       }\n       return 3;\n     },\n   },\n\n   // Mapping from pluralization group to individual language codes/locales.\n   // Will look up based on exact match, if not found and it's a locale will parse the locale\n   // for language code, and if that does not exist will default to 'en'\n   pluralTypeToLanguages: {\n     arabic: [\"ar\"],\n     bosnian_serbian: [\"bs-Latn-BA\", \"bs-Cyrl-BA\", \"srl-RS\", \"sr-RS\"],\n     chinese: [\"id\", \"id-ID\", \"ja\", \"ko\", \"ko-KR\", \"lo\", \"ms\", \"th\", \"th-TH\", \"zh\"],\n     croatian: [\"hr\", \"hr-HR\"],\n     german: [\n       \"fa\",\n       \"da\",\n       \"de\",\n       \"en\",\n       \"es\",\n       \"fi\",\n       \"el\",\n       \"he\",\n       \"hi-IN\",\n       \"hu\",\n       \"hu-HU\",\n       \"it\",\n       \"nl\",\n       \"no\",\n       \"pt\",\n       \"sv\",\n       \"tr\",\n     ],\n     french: [\"fr\", \"tl\", \"pt-br\"],\n     russian: [\"ru\", \"ru-RU\"],\n     lithuanian: [\"lt\"],\n     czech: [\"cs\", \"cs-CZ\", \"sk\"],\n     polish: [\"pl\"],\n     icelandic: [\"is\"],\n     slovenian: [\"sl-SL\"],\n   },\n };\n\n function langToTypeMap(mapping) {\n   var ret = {};\n   for (let [type, langs] of Object.entries(mapping)) {\n     for (const lang of Object.values(langs)) {\n       ret[lang] = type;\n     }\n   }\n   return ret;\n }\n\n function pluralTypeName(pluralRules, locale) {\n   var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);\n   return (\n     langToPluralType[locale] ||\n     langToPluralType[split.call(locale, /-/, 1)[0]] ||\n     langToPluralType.en\n   );\n }\n\n function pluralTypeIndex(pluralRules, pluralType, count) {\n   return pluralRules.pluralTypes[pluralType](count);\n }\n\n function createMemoizedPluralTypeNameSelector() {\n   var localePluralTypeStorage = {};\n\n   return function (pluralRules, locale) {\n     var pluralType = localePluralTypeStorage[locale];\n\n     if (pluralType && !pluralRules.pluralTypes[pluralType]) {\n       pluralType = null;\n       localePluralTypeStorage[locale] = pluralType;\n     }\n\n     if (!pluralType) {\n       pluralType = pluralTypeName(pluralRules, locale);\n\n       if (pluralType) {\n         localePluralTypeStorage[locale] = pluralType;\n       }\n     }\n\n     return pluralType;\n   };\n }\n\n function escape(token) {\n   return token.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n }\n\n function constructTokenRegex(opts) {\n   var prefix = (opts && opts.prefix) || \"%{\";\n   var suffix = (opts && opts.suffix) || \"}\";\n\n   if (prefix === delimiter || suffix === delimiter) {\n     throw new RangeError('\"' + delimiter + '\" token is reserved for pluralization');\n   }\n\n   return new RegExp(escape(prefix) + \"(.*?)\" + escape(suffix), \"g\");\n }\n\n var memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();\n\n var defaultTokenRegex = /%\\{(.*?)\\}/g;\n\n // ### transformPhrase(phrase, substitutions, locale)\n //\n // Takes a phrase string and transforms it by choosing the correct\n // plural form and interpolating it.\n //\n //     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n //     // \"Hello, Spike!\"\n //\n // The correct plural form is selected if substitutions.smart_count\n // is set. You can pass in a number instead of an Object as `substitutions`\n // as a shortcut for `smart_count`.\n //\n //     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n //     // \"1 new message\"\n //\n //     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n //     // \"2 new messages\"\n //\n //     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n //     // \"5 new messages\"\n //\n // You should pass in a third argument, the locale, to specify the correct plural type.\n // It defaults to `'en'` with 2 plural forms.\n function transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {\n   if (typeof phrase !== \"string\") {\n     throw new TypeError(\"Polyglot.transformPhrase expects argument #1 to be string\");\n   }\n\n   if (substitutions == null) {\n     return phrase;\n   }\n\n   var result = phrase;\n   var interpolationRegex = tokenRegex || defaultTokenRegex;\n\n   // allow number as a pluralization shortcut\n   var options = typeof substitutions === \"number\" ? { smart_count: substitutions } : substitutions;\n\n   // Select plural form: based on a phrase text that contains `n`\n   // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,\n   // choose the correct plural form. This is only done if `count` is set.\n   if (options.smart_count != null && phrase) {\n     var pluralRulesOrDefault = pluralRules || defaultPluralRules;\n     var texts = split.call(phrase, delimiter);\n     var bestLocale = locale || \"en\";\n     var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);\n     var pluralTypeWithCount = pluralTypeIndex(\n       pluralRulesOrDefault,\n       pluralType,\n       options.smart_count,\n     );\n\n     result = (texts[pluralTypeWithCount] || texts[0]).trim();\n   }\n\n   // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n   result = replace.call(result, interpolationRegex, function (expression, argument) {\n     if (!options.hasOwnProperty(argument) || options[argument] == null) {\n       return expression;\n     }\n     return options[argument];\n   });\n\n   return result;\n }\n\n // ### Polyglot class constructor\n function Polyglot(options) {\n   var opts = options || {};\n   this.phrases = {};\n   this.extend(opts.phrases || {});\n   this.currentLocale = opts.locale || \"en\";\n   var allowMissing = opts.allowMissing ? transformPhrase : null;\n   this.onMissingKey = typeof opts.onMissingKey === \"function\" ? opts.onMissingKey : allowMissing;\n   this.warn = opts.warn || console.warn.bind(console);\n   this.tokenRegex = constructTokenRegex(opts.interpolation);\n   this.pluralRules = opts.pluralRules || defaultPluralRules;\n }\n\n // ### polyglot.locale([locale])\n //\n // Get or set locale. Internally, Polyglot only uses locale for pluralization.\n Polyglot.prototype.locale = function (newLocale) {\n   if (newLocale) this.currentLocale = newLocale;\n   return this.currentLocale;\n };\n\n // ### polyglot.extend(phrases)\n //\n // Use `extend` to tell Polyglot how to translate a given key.\n //\n //     polyglot.extend({\n //       \"hello\": \"Hello\",\n //       \"hello_name\": \"Hello, %{name}\"\n //     });\n //\n // The key can be any string.  Feel free to call `extend` multiple times;\n // it will override any phrases with the same key, but leave existing phrases\n // untouched.\n //\n // It is also possible to pass nested phrase objects, which get flattened\n // into an object with the nested keys concatenated using dot notation.\n //\n //     polyglot.extend({\n //       \"nav\": {\n //         \"hello\": \"Hello\",\n //         \"hello_name\": \"Hello, %{name}\",\n //         \"sidebar\": {\n //           \"welcome\": \"Welcome\"\n //         }\n //       }\n //     });\n //\n //     console.log(polyglot.phrases);\n //     // {\n //     //   'nav.hello': 'Hello',\n //     //   'nav.hello_name': 'Hello, %{name}',\n //     //   'nav.sidebar.welcome': 'Welcome'\n //     // }\n //\n // `extend` accepts an optional second argument, `prefix`, which can be used\n // to prefix every key in the phrases object with some string, using dot\n // notation.\n //\n //     polyglot.extend({\n //       \"hello\": \"Hello\",\n //       \"hello_name\": \"Hello, %{name}\"\n //     }, \"nav\");\n //\n //     console.log(polyglot.phrases);\n //     // {\n //     //   'nav.hello': 'Hello',\n //     //   'nav.hello_name': 'Hello, %{name}'\n //     // }\n //\n // This feature is used internally to support nested phrase objects.\n Polyglot.prototype.extend = function (morePhrases, prefix) {\n   for (const [key, phrase] of Object.entries(morePhrases)) {\n     var prefixedKey = prefix ? prefix + \".\" + key : key;\n     if (typeof phrase === \"object\") {\n       this.extend(phrase, prefixedKey);\n     } else {\n       this.phrases[prefixedKey] = phrase;\n     }\n   }\n };\n\n // ### polyglot.unset(phrases)\n // Use `unset` to selectively remove keys from a polyglot instance.\n //\n //     polyglot.unset(\"some_key\");\n //     polyglot.unset({\n //       \"hello\": \"Hello\",\n //       \"hello_name\": \"Hello, %{name}\"\n //     });\n //\n // The unset method can take either a string (for the key), or an object hash with\n // the keys that you would like to unset.\n Polyglot.prototype.unset = function (morePhrases, prefix) {\n   if (typeof morePhrases === \"string\") {\n     delete this.phrases[morePhrases];\n   } else {\n     for (const [key, phrase] of Object.entries(morePhrases)) {\n       var prefixedKey = prefix ? prefix + \".\" + key : key;\n       if (typeof phrase === \"object\") {\n         this.unset(phrase, prefixedKey);\n       } else {\n         delete this.phrases[prefixedKey];\n       }\n     }\n   }\n };\n\n // ### polyglot.clear()\n //\n // Clears all phrases. Useful for special cases, such as freeing\n // up memory if you have lots of phrases but no longer need to\n // perform any translation. Also used internally by `replace`.\n Polyglot.prototype.clear = function () {\n   this.phrases = {};\n };\n\n // ### polyglot.replace(phrases)\n //\n // Completely replace the existing phrases with a new set of phrases.\n // Normally, just use `extend` to add more phrases, but under certain\n // circumstances, you may want to make sure no old phrases are lying around.\n Polyglot.prototype.replace = function (newPhrases) {\n   this.clear();\n   this.extend(newPhrases);\n };\n\n // ### polyglot.t(key, options)\n //\n // The most-used method. Provide a key, and `t` will return the\n // phrase.\n //\n //     polyglot.t(\"hello\");\n //     => \"Hello\"\n //\n // The phrase value is provided first by a call to `polyglot.extend()` or\n // `polyglot.replace()`.\n //\n // Pass in an object as the second argument to perform interpolation.\n //\n //     polyglot.t(\"hello_name\", {name: \"Spike\"});\n //     => \"Hello, Spike\"\n //\n // If you like, you can provide a default value in case the phrase is missing.\n // Use the special option key \"_\" to specify a default.\n //\n //     polyglot.t(\"i_like_to_write_in_language\", {\n //       _: \"I like to write in %{language}.\",\n //       language: \"JavaScript\"\n //     });\n //     => \"I like to write in JavaScript.\"\n //\n Polyglot.prototype.t = function (key, options) {\n   var phrase, result;\n   var opts = options == null ? {} : options;\n   if (typeof this.phrases[key] === \"string\") {\n     phrase = this.phrases[key];\n   } else if (typeof opts._ === \"string\") {\n     phrase = opts._;\n   } else if (this.onMissingKey) {\n     var onMissingKey = this.onMissingKey;\n     result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n   } else {\n     this.warn('Missing translation for key: \"' + key + '\"');\n     result = key;\n   }\n   if (typeof phrase === \"string\") {\n     result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n   }\n   return result;\n };\n\n // ### polyglot.has(key)\n //\n // Check if polyglot has a translation for given key\n Polyglot.prototype.has = function (key) {\n   return this.phrases.hasOwnProperty(key);\n };\n\n // export transformPhrase\n Polyglot.transformPhrase = function transform(phrase, substitutions, locale) {\n   return transformPhrase(phrase, substitutions, locale);\n };\n\n module.exports = Polyglot;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}