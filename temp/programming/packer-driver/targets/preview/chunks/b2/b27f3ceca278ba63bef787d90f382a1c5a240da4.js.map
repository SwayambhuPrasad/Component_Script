{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/TranslatedOptionButton.ts"],"names":["Component","_decorator","EDITOR","AS","error","OptionButton","i18n","ccclass","property","requireComponent","TranslatedOptionButton","tooltip","_optBtn","key","_key","string","strs","Array","getComponent","options","forEach","item","push","JSON","stringify","value","parse","length","i","awake","updateTranslation","onEnable","translationsLoadedEvent","on","onDisable","off","enabled","t"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACXC,MAAAA,M,UAAAA,M;;AACAC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,I,iBAAAA,I;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA0CR,U;;wCAInCS,sB,WAFZH,OAAO,CAAC,wBAAD,C,UACPE,gBAAgB;AAAA;AAAA,uC,UAMdD,QAAQ,CAAC;AACRG,QAAAA,OAAO;AADC,OAAD,C,0CAPX,MAEaD,sBAFb,SAE4C;AAAA;AAAA,oBAAGV,SAAH,CAF5C,CAE0D;AAAA;AAAA;;AAAA;;AAAA,eAGhDY,OAHgD,GAGjB,IAHiB;AAAA;;AAQjD,YAAHC,GAAG,GAAG;AACR,iBAAO,KAAKC,IAAZ;AACD;;AAES,YAANC,MAAM,GAAG;AAAA;;AACX,cAAMC,IAAI,GAAG,IAAIC,KAAJ,EAAb;;AACA,cAAIf,MAAM,IAAI,KAAKU,OAAL,IAAgB,IAA9B,EAAoC;AAClC,iBAAKA,OAAL,GAAe,KAAKM,YAAL;AAAA;AAAA,6CAAf;AACD;;AACD,gCAAKN,OAAL,mCAAcO,OAAd,CAAsBC,OAAtB,CAA+BC,IAAD,IAAU;AACtCL,YAAAA,IAAI,CAACM,IAAL,CAAUD,IAAI,CAACN,MAAf;AACD,WAFD;AAGA,iBAAOQ,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAP;AACD;;AAEM,YAAHH,GAAG,CAACY,KAAD,EAAgB;AACrB,cAAIvB,MAAJ,EAAY;AACV,iBAAKY,IAAL,GAAYW,KAAZ;AACD,WAFD,MAEO;AACL;AAAA;AAAA;AACD;AACF;;AAES,YAANV,MAAM,CAACU,KAAD,EAAgB;AAAA;;AACxB;AACA,cAAI,CAACA,KAAD,IAAU,KAAKb,OAAL,IAAgB,IAA9B,EAAoC;AACpC,cAAMO,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA7B;AACA,cAAMH,IAAI,GAAGO,IAAI,CAACG,KAAL,CAAWD,KAAX,CAAb;;AACA,cAAIT,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACW,MAAL,KAAgBR,OAAO,CAACQ,MAA5C,EAAoD;AAClD;AAAA;AAAA,gCAAM,wCAAN;AACA;AACD;;AACD,iCAAKf,OAAL,oCAAcO,OAAd,CAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOO,CAAP,KAAa;AACzCP,YAAAA,IAAI,CAACN,MAAL,GAAcC,IAAI,CAACY,CAAD,CAAlB;AACD,WAFD;AAGD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKjB,OAAL,GAAe,KAAKM,YAAL;AAAA;AAAA,2CAAf;AACA,eAAKY,iBAAL;AACD;;AAEDC,QAAAA,QAAQ,GAAG;AACT;AAAA;AAAA,4BAAKC,uBAAL,CAA6BC,EAA7B,CAAgC,KAAKH,iBAArC,EAAwD,IAAxD;AACD;;AAEDI,QAAAA,SAAS,GAAG;AACV;AAAA;AAAA,4BAAKF,uBAAL,CAA6BG,GAA7B,CAAiC,KAAKL,iBAAtC,EAAyD,IAAzD;AACD;;AAEDA,QAAAA,iBAAiB,GAAG;AAClB,cAAI,CAAC;AAAA;AAAA,4BAAKM,OAAV,EAAmB;AACnB,eAAKrB,MAAL,GAAc;AAAA;AAAA,4BAAKsB,CAAL,CAAO,KAAKxB,GAAZ,CAAd;AACD,SA7DuD,CA+DxD;;;AA/DwD,O,uEACvDL,Q;;;;;iBAAwB,E","sourcesContent":["import { Component, _decorator } from \"cc\";\nimport { EDITOR } from \"cc/env\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { OptionButton } from \"./OptionButton\";\nimport { i18n } from \"./Translations\";\n\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass(\"TranslatedOptionButton\")\n@requireComponent(OptionButton)\nexport class TranslatedOptionButton extends AS(Component) {\n  @property private _key = \"\";\n\n  private _optBtn: OptionButton | null = null;\n\n  @property({\n    tooltip: `The key used to get the translated string.`,\n  })\n  get key() {\n    return this._key;\n  }\n\n  get string() {\n    const strs = new Array<string>();\n    if (EDITOR && this._optBtn == null) {\n      this._optBtn = this.getComponent(OptionButton);\n    }\n    this._optBtn?.options.forEach((item) => {\n      strs.push(item.string);\n    });\n    return JSON.stringify(strs);\n  }\n\n  set key(value: string) {\n    if (EDITOR) {\n      this._key = value;\n    } else {\n      error(`Cannot set key outside the editor!`);\n    }\n  }\n\n  set string(value: string) {\n    // Ignore if string not valid!\n    if (!value || this._optBtn == null) return;\n    const options = this._optBtn.options;\n    const strs = JSON.parse(value) as Array<string>;\n    if (strs == null || strs.length !== options.length) {\n      error(\"Unable to parse option button strings!\");\n      return;\n    }\n    this._optBtn?.options.forEach((item, i) => {\n      item.string = strs[i];\n    });\n  }\n\n  awake() {\n    this._optBtn = this.getComponent(OptionButton);\n    this.updateTranslation();\n  }\n\n  onEnable() {\n    i18n.translationsLoadedEvent.on(this.updateTranslation, this);\n  }\n\n  onDisable() {\n    i18n.translationsLoadedEvent.off(this.updateTranslation, this);\n  }\n\n  updateTranslation() {\n    if (!i18n.enabled) return;\n    this.string = i18n.t(this.key);\n  }\n\n  // TODO: Sprites!!\n}\n"]}