{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedUIDrag.ts"],"names":["Component","EventHandler","v3","Vec3","_decorator","AS","error","networkReplicator","UIDrag","ccclass","disallowMultiple","requireComponent","ReplicatedUIDrag","constructor","_replicationIndex","_drag","registerEvent","awake","getComponent","node","on","EventType","DRAG_DID_BEGAN","_onDragBegan","DRAG_DID_END","_onDragEnded","DRAG_MOVE","_onDragMove","onActivityEvent","name","data","emit","emitEvents","dragDidBeganEvents","checkUIDrop","dragDidEndedEvents","targetPosition","x","y","dragMoveEvents","getStateData","updateStateData","parentCanvas","_parentCanvas","forceSetPosition","convertToWorldSpaceAR","isReplicated","sendEvent","id","drag","delta","subtract","previousTargetPosition","lengthSqr"],"mappings":"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","sourcesContent":["import { Component, EventHandler, v3, Vec3, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\nimport { UIDrag } from \"./UIDrag\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\n/**\n * Class to automate replication of events for the `DragData` attached to\n * the same node using the `NetworkReplicator`.\n */\n@ccclass(\"ReplicatedUIDrag\")\n@requireComponent(UIDrag)\n@disallowMultiple\nexport class ReplicatedUIDrag extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _drag: UIDrag | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._drag = this.getComponent(UIDrag);\n    // TODO: Add debounce.\n    if (this._drag == null) {\n      error(\"the replicated UIDrag must be attached to node with UIDrag component.\");\n      return;\n    }\n    this.node.on(UIDrag.EventType.DRAG_DID_BEGAN, this._onDragBegan, this);\n    this.node.on(UIDrag.EventType.DRAG_DID_END, this._onDragEnded, this);\n    this.node.on(UIDrag.EventType.DRAG_MOVE, this._onDragMove, this);\n  }\n\n  onActivityEvent(name: string, data?: { x: number; y: number }) {\n    if (this._drag == null) return;\n    switch (name) {\n      case UIDrag.EventType.DRAG_DID_BEGAN: {\n        this.node.emit(UIDrag.EventType.DRAG_DID_BEGAN, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragDidBeganEvents, this._drag);\n        break;\n      }\n      case UIDrag.EventType.DRAG_DID_END: {\n        this._drag.checkUIDrop();\n        this.node.emit(UIDrag.EventType.DRAG_DID_END, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragDidEndedEvents, this._drag);\n        break;\n      }\n      case UIDrag.EventType.DRAG_MOVE: {\n        if (data == null) {\n          error(\"The data recieved on drag-move cannot be null.\");\n          return;\n        }\n        this._drag.targetPosition = v3(data.x, data.y, 0);\n        this.node.emit(UIDrag.EventType.DRAG_MOVE, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragMoveEvents, this._drag);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  getStateData() {\n    if (!this._drag?.targetPosition) return;\n    const targetPosition = this._drag.targetPosition;\n    return { x: targetPosition.x, y: targetPosition.y };\n  }\n\n  updateStateData(data: { x: number; y: number }) {\n    if (!this._drag) return;\n    // @ts-ignore\n    const parentCanvas = this._drag._parentCanvas!;\n    this._drag.forceSetPosition(parentCanvas.convertToWorldSpaceAR(v3(data.x, data.y, 0)));\n    this.node.emit(UIDrag.EventType.DRAG_DID_BEGAN, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragDidBeganEvents, this._drag);\n    this.node.emit(UIDrag.EventType.DRAG_MOVE, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragMoveEvents, this._drag);\n    this.node.emit(UIDrag.EventType.DRAG_DID_END, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragDidEndedEvents, this._drag);\n  }\n\n  private _onDragBegan(_drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_DID_BEGAN,\n    });\n  }\n\n  private _onDragEnded(_drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_DID_END,\n    });\n  }\n\n  private _onDragMove(drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    const delta = Vec3.subtract(v3(), drag.targetPosition, drag.previousTargetPosition);\n    // throttle the event to avoid sending too many events.\n    if (Vec3.lengthSqr(delta) < 0.1) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_MOVE,\n      data: {\n        x: drag.targetPosition.x,\n        y: drag.targetPosition.y,\n      },\n    });\n  }\n}\n"]}