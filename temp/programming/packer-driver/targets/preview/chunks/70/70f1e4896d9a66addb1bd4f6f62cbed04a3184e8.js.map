{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/LatexRenderer.ts"],"names":["checkInputBoxNode","virtualNode","isInputBoxNode","inputBoxNodeIndex","charCount","name","index","classes","INPUT_CLASS","startsWith","substring","length","ccenum","CCObject","CCString","Color","color","Component","Director","director","Graphics","ImageAsset","Label","Mask","Node","NodePool","Sprite","SpriteFrame","Texture2D","UITransform","v3","_decorator","AS","getFontsLoadedEvent","BoxNode","HorizontalLineNode","SvgNode","TextNode","VerticalLineNode","VirtualContainerNode","VirtualNodeBuilder","error","ccclass","property","executeInEditMode","requireComponent","gfxNodePool","labelNodePool","imgNodePool","baseNodePool","fontsLoadedEvent","Overflow","inputMacros","LatexRenderer","type","displayName","multiline","min","_dirty","_baseNode","_baseNodePositionOffset","_gfxNodes","Array","_labelNodes","_imgNodes","_inputClassData","latex","_latexSrc","baseSize","_baseSize","defaultTextColor","_defaultTextColor","overflow","_overflow","inputNodes","_inputNodes","value","markRendererDirty","_updateOverflow","onEnable","node","on","EventType","ANCHOR_CHANGED","_updateBaseNodePosition","TRANSFORM_CHANGED","_transformChanged","SIZE_CHANGED","EVENT_BEFORE_DRAW","_onBeforeDraw","onDisable","off","onDestroy","_cleanup","_render","TransformBit","POSITION","_updateInputNodes","options","output","displayMode","toCSS","macros","strict","trust","nodeBuilder","nodeData","build","rootWidth","rootNode","bounds","width","rootHeight","strutBounds","height","rootX","x","rootY","y","get","hideFlags","Flags","DontSave","HideInHierarchy","layer","addChild","baseUiXform","getComponent","addComponent","setAnchorPoint","setContentSize","_convertRecursive","put","parent","isValid","rootUiTransform","_uiProps","uiTransformComp","baseNodeUITransform","contentSize","position","anchorX","anchorY","add","clone","multiply","scale","uiTransform","fullWidth","fullHeight","NONE","CLAMP","mask","Type","RECT","SHRINK","designRatio","originalRatio","setScale","baseUI","forEach","ind","inputUI","worldPos","convertToWorldSpaceAR","add3f","worldPosition","baseNode","nodes","child","_virtualNodeToCocosMapping","typeId","_virtualLineNodeToCocos","_virtualTextNodeToCocos","_virtualSvgNodeToCocos","_virtualBoxNodeToCocos","getBounds","uiXform","gfx","lineCap","LineCap","BUTT","lineJoin","LineJoin","MITER","miterLimit","fillColor","fillRect","push","backgroundColor","borderColor","strokeColor","lineWidth","borderWidth","rect","stroke","fill","fontData","font","split","fontSize","replace","label","horizontalAlign","HorizontalAlign","CENTER","verticalAlign","VerticalAlign","enableWrapText","isItalic","isBold","fontFamily","string","text","markForUpdateRenderData","sprite","img","Image","svg","Blob","virtualHtmlNode","toMarkup","url","URL","createObjectURL","onload","revokeObjectURL","spriteFrame","texture","image","src","WHITE"],"mappings":"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","sourcesContent":["import {\n  ccenum,\n  CCObject,\n  CCString,\n  Color,\n  color,\n  Component,\n  Director,\n  director,\n  Graphics,\n  ImageAsset,\n  Label,\n  Mask,\n  Node,\n  NodePool,\n  Sprite,\n  SpriteFrame,\n  Texture2D,\n  UITransform,\n  v3,\n  _decorator,\n} from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { getFontsLoadedEvent } from \"./FontManager\";\nimport { IOptions } from \"./latex/RenderingState\";\nimport {\n  BoxNode,\n  HorizontalLineNode,\n  SvgNode,\n  TextNode,\n  VerticalLineNode,\n  VirtualCanvasNode,\n  VirtualContainerNode,\n} from \"./latex/virtualCanvasNodes\";\nimport { VirtualNodeBuilder } from \"./latex/VirtualNodeBuilder\";\nimport { error } from \"./Logger\";\nconst { ccclass, property, executeInEditMode, requireComponent } = _decorator;\n\nconst gfxNodePool = new NodePool();\nconst labelNodePool = new NodePool();\nconst imgNodePool = new NodePool();\nconst baseNodePool = new NodePool();\nconst fontsLoadedEvent = getFontsLoadedEvent();\n\nconst INPUT_CLASS = \"asInput\";\n\nenum Overflow {\n  NONE,\n  CLAMP,\n  SHRINK,\n}\nccenum(Overflow);\n\ninterface InputNodeData {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nconst inputMacros = {\n  \"\\\\input\": `\\\\htmlClass{${INPUT_CLASS}#1}{\\\\boxed{#1}}`,\n};\n\nfunction checkInputBoxNode(virtualNode: VirtualCanvasNode) {\n  let isInputBoxNode = false;\n  let inputBoxNodeIndex = -1;\n  let charCount = 6;\n  for (const { name, index } of virtualNode.classes) {\n    if (name === INPUT_CLASS) {\n      isInputBoxNode = true;\n      inputBoxNodeIndex = index;\n      break;\n    } else if (name.startsWith(INPUT_CLASS)) {\n      isInputBoxNode = true;\n      inputBoxNodeIndex = index;\n      charCount = +name.substring(INPUT_CLASS.length);\n    }\n  }\n\n  return {\n    isInputBoxNode,\n    inputBoxNodeIndex,\n    charCount,\n  };\n}\n\n@ccclass(\"LatexRenderer\")\n@executeInEditMode\n@requireComponent(UITransform)\nexport class LatexRenderer extends AS(Component) {\n  static readonly Overflow = Overflow;\n\n  @property protected _latexSrc = \"\";\n\n  @property protected _baseSize = 20;\n\n  @property protected _defaultTextColor = Color.WHITE.clone();\n\n  @property protected _inputNodes = Array<UITransform>();\n\n  @property protected _overflow = Overflow.NONE;\n\n  protected _dirty = true;\n\n  private _baseNode: Node | null = null;\n\n  private _baseNodePositionOffset = v3();\n\n  private _gfxNodes = new Array<Node>();\n\n  private _labelNodes = new Array<Node>();\n\n  private _imgNodes = new Array<Node>();\n\n  private _inputClassData = Array<InputNodeData>();\n\n  @property({ type: CCString, displayName: \"Latex Source\", multiline: true })\n  get latex() {\n    return this._latexSrc;\n  }\n\n  @property({ min: 1 })\n  get baseSize() {\n    return this._baseSize;\n  }\n\n  @property(Color)\n  get defaultTextColor() {\n    return this._defaultTextColor;\n  }\n\n  @property({ type: Overflow }) get overflow() {\n    return this._overflow;\n  }\n\n  @property(UITransform)\n  get inputNodes() {\n    return this._inputNodes;\n  }\n\n  set latex(value) {\n    if (this._latexSrc === value) return;\n    this._latexSrc = value;\n    this.markRendererDirty();\n  }\n\n  set baseSize(value) {\n    if (this._baseSize === value) return;\n    this._baseSize = value;\n    this.markRendererDirty();\n  }\n\n  set defaultTextColor(value) {\n    if (this._defaultTextColor === value) return;\n    this._defaultTextColor = value;\n    this.markRendererDirty();\n  }\n\n  set overflow(value) {\n    this._overflow = value;\n    this._updateOverflow();\n  }\n\n  set inputNodes(value) {\n    if (this._inputNodes === value) return;\n    this._inputNodes = value;\n    this.markRendererDirty();\n  }\n\n  onEnable() {\n    this.node.on(Node.EventType.ANCHOR_CHANGED, this._updateBaseNodePosition, this);\n    this.node.on(Node.EventType.TRANSFORM_CHANGED, this._transformChanged, this);\n    this.node.on(Node.EventType.SIZE_CHANGED, this._updateOverflow, this);\n    director.on(Director.EVENT_BEFORE_DRAW, this._onBeforeDraw, this);\n    fontsLoadedEvent.on(this.markRendererDirty, this);\n  }\n\n  onDisable() {\n    this.node.off(Node.EventType.ANCHOR_CHANGED, this._updateBaseNodePosition, this);\n    this.node.off(Node.EventType.TRANSFORM_CHANGED, this._transformChanged, this);\n    this.node.off(Node.EventType.SIZE_CHANGED, this._updateOverflow, this);\n    director.off(Director.EVENT_BEFORE_DRAW, this._onBeforeDraw, this);\n    fontsLoadedEvent.off(this.markRendererDirty, this);\n  }\n\n  onDestroy() {\n    this._cleanup();\n  }\n\n  markRendererDirty() {\n    this._dirty = true;\n  }\n\n  private _onBeforeDraw() {\n    if (!this._dirty) return;\n    this._render();\n  }\n\n  private _transformChanged(type: number) {\n    if (!(type & Node.TransformBit.POSITION)) return;\n    this._updateInputNodes();\n    // if (EDITOR) {\n    // }\n  }\n\n  private _render() {\n    this._cleanup();\n\n    const options: Partial<IOptions> = {\n      output: \"html\",\n      displayMode: true,\n      baseSize: this._baseSize,\n      defaultTextColor: this._defaultTextColor.toCSS(),\n      macros: inputMacros,\n      strict: false,\n      trust: true,\n    };\n\n    const nodeBuilder = new VirtualNodeBuilder(this._latexSrc, options);\n    const nodeData = nodeBuilder.build();\n    if (!nodeData) return;\n\n    // Get the position and bounds data required from root node.\n    const rootWidth = nodeData.rootNode.bounds.width;\n    const rootHeight = nodeData.rootNode.strutBounds.height;\n    const rootX = nodeData.rootNode.strutBounds.x;\n    const rootY = nodeData.rootNode.strutBounds.y;\n    // The position offset used to adjust position based on anchor.\n    this._baseNodePositionOffset = v3(-rootX, rootY);\n\n    // Create or get from pool\n    this._baseNode = baseNodePool.get() ?? new Node(\"BaseNode\");\n    this._baseNode.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n    this._baseNode.layer = this.node.layer;\n    this.node.addChild(this._baseNode);\n\n    const baseUiXform =\n      this._baseNode.getComponent(UITransform) ?? this._baseNode.addComponent(UITransform);\n    baseUiXform.setAnchorPoint(0, 0);\n    baseUiXform.setContentSize(rootWidth, rootHeight);\n    this._updateBaseNodePosition();\n\n    this._updateOverflow();\n\n    // Recursively create the node tree required.\n    this._convertRecursive(nodeData.rootNode, this._baseNode);\n    this._updateInputNodes();\n\n    this._dirty = false;\n  }\n\n  private _cleanup() {\n    for (const node of this._gfxNodes) {\n      gfxNodePool.put(node);\n    }\n\n    for (const node of this._labelNodes) {\n      labelNodePool.put(node);\n    }\n\n    for (const node of this._imgNodes) {\n      imgNodePool.put(node);\n    }\n\n    if (this._baseNode) {\n      this._baseNode.parent = null;\n      baseNodePool.put(this._baseNode);\n    }\n\n    this._baseNode = null;\n    this._gfxNodes = new Array<Node>();\n    this._labelNodes = new Array<Node>();\n    this._imgNodes = new Array<Node>();\n    this._inputClassData = [];\n  }\n\n  private _updateBaseNodePosition() {\n    if (this._baseNode && this._baseNode.isValid) {\n      const rootUiTransform = this.node._uiProps.uiTransformComp!;\n      const baseNodeUITransform = this._baseNode._uiProps.uiTransformComp!;\n      const rootWidth = rootUiTransform.contentSize.width;\n      const rootHeight = rootUiTransform.contentSize.height;\n\n      this._baseNode.position = v3(\n        -rootWidth * rootUiTransform.anchorX,\n        rootHeight * (1 - rootUiTransform.anchorY),\n      ).add(this._baseNodePositionOffset.clone().multiply(this._baseNode.scale));\n    }\n  }\n\n  private _updateOverflow() {\n    if (!this._baseNode) return;\n    const uiTransform = this.node._uiProps.uiTransformComp!;\n    const fullWidth = this._baseNode._uiProps.uiTransformComp!.width;\n    const fullHeight = this._baseNode._uiProps.uiTransformComp!.height;\n    let scale = 1;\n    switch (this._overflow) {\n      case Overflow.NONE:\n        uiTransform.setContentSize(fullWidth, fullHeight);\n        break;\n      case Overflow.CLAMP:\n        // The position offset used to adjust position based on anchor.\n        const mask = this.getComponent(Mask) ?? this.addComponent(Mask)!;\n        mask.type = Mask.Type.RECT;\n        mask.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n        break;\n      case Overflow.SHRINK:\n        const designRatio = uiTransform.width / uiTransform.height;\n        const originalRatio = fullWidth / fullHeight;\n\n        if (designRatio >= originalRatio) {\n          scale = uiTransform.height / fullHeight;\n        } else {\n          scale = uiTransform.width / fullWidth;\n        }\n\n      default:\n        break;\n    }\n\n    this._baseNode.setScale(scale, scale, 1);\n    this._updateBaseNodePosition();\n  }\n\n  private _updateInputNodes() {\n    const baseUI = this._baseNode?._uiProps.uiTransformComp;\n    if (baseUI == null) {\n      error(`Unable to place input nodes. The base node for latex rendering is invalid!!`);\n    }\n\n    this._inputClassData.forEach(({ x, y, width, height }, ind) => {\n      const inputUI = this.inputNodes[ind];\n      if (inputUI == null) {\n        error(`No valid input node at index ${ind}`);\n      }\n\n      inputUI.setContentSize(width, height);\n      // Calc world position of the left corner.\n      const worldPos = baseUI!.convertToWorldSpaceAR(v3(x, -y));\n      // Offset the position based on anchor point of the input ui.\n      worldPos.add3f(inputUI.anchorX * width, inputUI.anchorY * height, 0);\n      inputUI.node.worldPosition = worldPos;\n    });\n  }\n\n  private _convertRecursive(node: VirtualCanvasNode, baseNode: Node) {\n    if (node instanceof VirtualContainerNode) {\n      // Container nodes don't get rendered. We only care about\n      // the children\n      node.nodes.forEach((child) => {\n        this._convertRecursive(child, baseNode);\n      });\n    } else {\n      this._virtualNodeToCocosMapping(node, baseNode);\n    }\n  }\n\n  private _virtualNodeToCocosMapping(node: VirtualCanvasNode, baseNode: Node) {\n    // This padding doesn't get rendered.\n    if (node.type === \"HPaddingNode\") return;\n    switch (node.type) {\n      case VerticalLineNode.typeId:\n        this._virtualLineNodeToCocos(node as VerticalLineNode, baseNode);\n        break;\n      case TextNode.typeId:\n        this._virtualTextNodeToCocos(node as TextNode, baseNode);\n        break;\n      case SvgNode.typeId:\n        this._virtualSvgNodeToCocos(node as SvgNode, baseNode);\n        break;\n      case HorizontalLineNode.typeId:\n        this._virtualLineNodeToCocos(node as HorizontalLineNode, baseNode);\n        break;\n      case BoxNode.typeId:\n        this._virtualBoxNodeToCocos(node as BoxNode, baseNode);\n        break;\n      default:\n        error(`Node ${node.type} is not a renderable node.`);\n    }\n  }\n\n  private _virtualLineNodeToCocos(\n    virtualNode: VerticalLineNode | HorizontalLineNode,\n    baseNode: Node,\n  ) {\n    // if color is empty/transparent don't add any node.\n    if (!virtualNode.color) return;\n\n    const node = gfxNodePool.get() ?? new Node(\"LatexGraphics\");\n    node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n    node.layer = this.node.layer;\n    baseNode.addChild(node);\n\n    const { x, y, width, height } = virtualNode.getBounds();\n    const uiXform = node.getComponent(UITransform) ?? node.addComponent(UITransform);\n    uiXform.setAnchorPoint(0, 0);\n    uiXform.setContentSize(width, height);\n\n    const gfx = node.getComponent(Graphics) ?? node.addComponent(Graphics);\n    gfx.lineCap = Graphics.LineCap.BUTT;\n    gfx.lineJoin = Graphics.LineJoin.MITER;\n    gfx.miterLimit = 4;\n    gfx.fillColor = color(virtualNode.color);\n    gfx.fillRect(0, 0, width, height);\n    node.position = v3(x, -y);\n\n    this._gfxNodes.push(node);\n  }\n\n  private _virtualBoxNodeToCocos(virtualNode: BoxNode, baseNode: Node) {\n    // if color is empty/transparent don't add any node.\n    if (!virtualNode.backgroundColor && !virtualNode.borderColor) return;\n\n    const { isInputBoxNode, inputBoxNodeIndex, charCount } = checkInputBoxNode(virtualNode);\n\n    if (isInputBoxNode) {\n      this._inputClassData[inputBoxNodeIndex] = virtualNode.getBounds();\n      return;\n    }\n\n    const node = gfxNodePool.get() ?? new Node(\"LatexGraphics\");\n    node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n    node.layer = this.node.layer;\n    baseNode.addChild(node);\n\n    const { x, y, width, height } = virtualNode.getBounds();\n    const uiXform = node.getComponent(UITransform) ?? node.addComponent(UITransform);\n    uiXform.setAnchorPoint(0, 0);\n    uiXform.setContentSize(width, height);\n\n    const gfx = node.getComponent(Graphics) ?? node.addComponent(Graphics);\n    gfx.lineCap = Graphics.LineCap.BUTT;\n    gfx.lineJoin = Graphics.LineJoin.MITER;\n    gfx.miterLimit = 4;\n    gfx.fillColor = color(virtualNode.backgroundColor);\n    gfx.strokeColor = color(virtualNode.borderColor);\n    gfx.lineWidth = virtualNode.borderWidth;\n    gfx.rect(0, 0, width, height);\n    gfx.stroke();\n    if (virtualNode.backgroundColor) gfx.fill();\n    node.position = v3(x, -y);\n\n    this._gfxNodes.push(node);\n  }\n\n  private _virtualTextNodeToCocos(virtualNode: TextNode, baseNode: Node) {\n    // if color is empty/transparent don't add any node.\n    if (!virtualNode.color) return;\n\n    if (checkInputBoxNode(virtualNode).isInputBoxNode) return;\n\n    const node = labelNodePool.get() ?? new Node(\"LatexText\");\n    node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n    node.layer = this.node.layer;\n    baseNode.addChild(node);\n\n    const uiXform = node.getComponent(UITransform) ?? node.addComponent(UITransform);\n    const { x, y, width, height } = virtualNode.getBounds();\n    const fontData = virtualNode.font.split(\" \");\n    // px to pt conversion 1px = 0.75pts\n    const fontSize = +fontData[2].replace(/px/gi, \"\") * 0.75;\n    // The cocos creator label is a bit wierd with base line height. Hence this adjustment.\n    uiXform.setAnchorPoint(0, 0.18);\n    uiXform.setContentSize(width, height);\n\n    const label = node.getComponent(Label) ?? node.addComponent(Label);\n    label.horizontalAlign = Label.HorizontalAlign.CENTER;\n    label.verticalAlign = Label.VerticalAlign.CENTER;\n    label.overflow = Label.Overflow.SHRINK;\n    // label.fontSize = fontSize;\n    label.enableWrapText = false;\n    label.color = color(virtualNode.color);\n    label.isItalic = fontData[0] === \"italic\";\n    label.isBold = fontData[1] === \"bold\";\n    label.fontFamily = fontData[3];\n    label.string = virtualNode.text;\n    label.markForUpdateRenderData();\n\n    node.position = v3(x, -y);\n    this._labelNodes.push(node);\n  }\n\n  private _virtualSvgNodeToCocos(virtualNode: SvgNode, baseNode: Node) {\n    const node = new Node(\"LatexSVG\");\n    node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;\n    node.layer = this.node.layer;\n    baseNode.addChild(node);\n    const uiXform = node.getComponent(UITransform) ?? node.addComponent(UITransform);\n    uiXform.setAnchorPoint(0, 0);\n    const sprite = node.getComponent(Sprite) ?? node.addComponent(Sprite);\n    const { x, y } = virtualNode.bounds;\n    node.position = v3(x, -y);\n\n    const img = new Image();\n    const svg = new Blob([virtualNode.virtualHtmlNode.toMarkup()], { type: \"image/svg+xml\" });\n    const url = URL.createObjectURL(svg);\n    img.onload = () => {\n      URL.revokeObjectURL(url);\n      const spriteFrame = new SpriteFrame();\n      const texture = new Texture2D();\n      texture.image = new ImageAsset(img);\n      spriteFrame.texture = texture;\n      sprite.spriteFrame = spriteFrame;\n    };\n\n    img.src = url;\n    this._imgNodes.push(node);\n  }\n}\n"]}