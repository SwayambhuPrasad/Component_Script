{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/SoftKeypad.ts"],"names":["Director","director","instantiate","Layout","Node","Prefab","size","UITransform","v3","_decorator","error","SoftKey","UIPopup","ccclass","property","SpecialKeys","SCREEN_PADDING_X","SCREEN_PADDING_Y","SoftKeypad","type","tooltip","_uiTransform","_editBoxUITransform","_keysContainerUI","_arrowSize","_showEmpty","_keysLayout","keys","keysContainer","_keysContainer","arrow","_arrow","keyPrefab","_keyPrefab","deleteKeyPrefab","_deleteKeyPrefab","doneKeyPrefab","_doneKeyPrefab","emptyContentPrefab","_emptyContentPrefab","showEmpty","keysLayout","value","awake","getComponent","node","parent","arrowUITransform","contentSize","on","EventType","HIDE_COMPLETE","_destroyKeys","ABOUT_TO_SHOW","_createKeys","once","EVENT_AFTER_UPDATE","_updatePopupPosition","_calculatePopupSize","updateLayout","width","paddingLeft","paddingRight","height","paddingBottom","paddingTop","emptyNode","children","emptyNodeSize","_uiProps","uiTransformComp","baseSize","reduce","acc","key","keyCount","length","constraint","Constraint","FIXED_COL","startAxis","AxisDirection","HORIZONTAL","numCol","constraintNum","spacingX","FIXED_ROW","VERTICAL","numRow","spacingY","editBoxWorldBounds","getBoundingBoxToWorld","popupSize","canvasBounds","_parentCanvas","getBoundingBox","anchorX","anchorY","arrowRot","popupWorldPosY","yMax","yMin","popupWorldPosX","center","x","xMax","widthAvailable","setAnchorPoint","worldPosition","angle","forEach","destroy","addChild","_addSoftKey","keyData","keyNode","char","DELETE","DONE","softKey","string","name","keyUITransform","setContentSize","setClickCallback","callback","keyCode"],"mappings":"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","sourcesContent":["import {\n  Director,\n  director,\n  instantiate,\n  KeyCode,\n  Layout,\n  Node,\n  Prefab,\n  Size,\n  size,\n  UITransform,\n  v3,\n  _decorator,\n} from \"cc\";\nimport { error } from \"./Logger\";\nimport { KeyCallback, SoftKey } from \"./SoftKey\";\nimport { UIPopup } from \"./UIPopup\";\n\nconst { ccclass, property } = _decorator;\n\nexport interface KeyData {\n  char: string;\n  size: Size;\n  keyCode?: KeyCode | KeyCode[];\n  callback: KeyCallback;\n}\n\nexport interface KeysLayout {\n  keys: KeyData[];\n  // rows: number;\n}\n\nenum SpecialKeys {\n  DONE = \"DONE\",\n  DELETE = \"DELETE\",\n}\n\nconst SCREEN_PADDING_X = 10;\nconst SCREEN_PADDING_Y = 10;\n\n@ccclass(\"SoftKeypad\")\nexport class SoftKeypad extends UIPopup {\n  static readonly SpecialKeys = SpecialKeys;\n\n  @property private _keysContainer: Layout | null = null;\n\n  @property private _arrow: Node | null = null;\n\n  @property private _keyPrefab: Prefab | null = null;\n\n  @property private _deleteKeyPrefab: Prefab | null = null;\n\n  @property private _doneKeyPrefab: Prefab | null = null;\n\n  @property private _emptyContentPrefab: Prefab | null = null;\n\n  private _uiTransform: UITransform | null = null;\n\n  private _editBoxUITransform: UITransform | null = null;\n\n  private _keysContainerUI: UITransform | null = null;\n\n  private _arrowSize = size();\n\n  private _showEmpty = false;\n\n  private _keysLayout: KeysLayout = { keys: [] };\n\n  @property({\n    type: Layout,\n    tooltip: \"The layout node that is used to hold the keys.\",\n  })\n  get keysContainer() {\n    return this._keysContainer;\n  }\n\n  @property({\n    type: Node,\n    tooltip: \"The node with the arrow sprite.\",\n  })\n  get arrow() {\n    return this._arrow;\n  }\n\n  @property({\n    type: Prefab,\n    tooltip: \"The prefab used to instantiate keys.\",\n  })\n  get keyPrefab() {\n    return this._keyPrefab;\n  }\n\n  @property({\n    type: Prefab,\n    tooltip: \"The prefab used to instantiate delete key.\",\n  })\n  get deleteKeyPrefab() {\n    return this._deleteKeyPrefab;\n  }\n\n  @property({\n    type: Prefab,\n    tooltip: \"The prefab used to instantiate done key.\",\n  })\n  get doneKeyPrefab() {\n    return this._doneKeyPrefab;\n  }\n\n  @property({\n    type: Prefab,\n    tooltip: \"The prefab used when empty keypad is shown\",\n  })\n  get emptyContentPrefab() {\n    return this._emptyContentPrefab;\n  }\n\n  get showEmpty() {\n    return this._showEmpty;\n  }\n\n  get keysLayout() {\n    return this._keysLayout;\n  }\n\n  set keysContainer(value) {\n    this._keysContainer = value;\n  }\n\n  set arrow(value) {\n    this._arrow = value;\n  }\n\n  set keyPrefab(value) {\n    this._keyPrefab = value;\n  }\n\n  set deleteKeyPrefab(value) {\n    this._deleteKeyPrefab = value;\n  }\n\n  set doneKeyPrefab(value) {\n    this._doneKeyPrefab = value;\n  }\n\n  set emptyContentPrefab(value) {\n    this._emptyContentPrefab = value;\n  }\n\n  set showEmpty(value: boolean) {\n    this._showEmpty = value;\n  }\n\n  set keysLayout(value: KeysLayout) {\n    this._keysLayout = value;\n  }\n\n  awake() {\n    if (\n      !this.keysContainer ||\n      !this.arrow ||\n      !this.keyPrefab ||\n      !this.deleteKeyPrefab ||\n      !this.doneKeyPrefab ||\n      !this.emptyContentPrefab\n    ) {\n      error(\"Required properties not set in SoftKeypad!\");\n      return;\n    }\n\n    this._uiTransform = this.getComponent(UITransform);\n    // Get the parent UITransform which should be that of the editbox.\n    if (this.node.parent == null) {\n      error(\"The parent node cannot null.\");\n      return;\n    }\n    this._editBoxUITransform = this.node.parent.getComponent(UITransform);\n\n    const arrowUITransform = this.arrow.getComponent(UITransform);\n    if (arrowUITransform == null) {\n      error(\"The arrow node must have a UITransform.\");\n      return;\n    }\n    this._arrowSize = arrowUITransform.contentSize;\n    this._keysContainerUI = this.keysContainer.getComponent(UITransform);\n\n    super.awake();\n\n    this.node.on(UIPopup.EventType.HIDE_COMPLETE, this._destroyKeys, this);\n    this.node.on(\n      UIPopup.EventType.ABOUT_TO_SHOW,\n      () => {\n        this._destroyKeys();\n        this._createKeys();\n        director.once(Director.EVENT_AFTER_UPDATE, this._updatePopupPosition, this);\n      },\n      this,\n    );\n  }\n\n  private _calculatePopupSize() {\n    if (this.keysContainer == null || this._keysContainerUI == null) return size();\n    this.keysContainer.updateLayout(true);\n    let width = this.keysContainer.paddingLeft + this.keysContainer.paddingRight;\n    let height = this.keysContainer.paddingBottom + this.keysContainer.paddingTop;\n\n    if (this.showEmpty) {\n      // Get the empty content node added.\n      const emptyNode = this.keysContainer.node.children[0];\n      const emptyNodeSize = emptyNode._uiProps.uiTransformComp!.contentSize;\n      width += emptyNodeSize.width;\n      height += emptyNodeSize.height;\n      return size(width, height);\n    }\n    const baseSize = this.keysLayout.keys.reduce((acc, key) => {\n      if (key.size.width > acc.width) acc.width = key.size.width;\n      if (key.size.height > acc.height) acc.height = key.size.height;\n      return acc;\n    }, size(0, 0));\n    const keyCount = this.keysContainer.node.children.length;\n\n    if (keyCount === 0) {\n      return size(width, height);\n    }\n\n    if (\n      this.keysContainer.constraint === Layout.Constraint.FIXED_COL &&\n      this.keysContainer.startAxis === Layout.AxisDirection.HORIZONTAL\n    ) {\n      // Only update the width.\n      let numCol = this.keysContainer.constraintNum;\n      if (keyCount < numCol) {\n        numCol = keyCount;\n      }\n      width += (numCol - 1) * this.keysContainer.spacingX;\n      width += numCol * baseSize.width;\n      return size(width, this._keysContainerUI.height);\n    }\n    if (\n      this.keysContainer.constraint === Layout.Constraint.FIXED_ROW &&\n      this.keysContainer.startAxis === Layout.AxisDirection.VERTICAL\n    ) {\n      // Only update height.\n      let numRow = this.keysContainer.constraintNum;\n      if (keyCount < numRow) {\n        numRow = keyCount;\n      }\n\n      height += (numRow - 1) * this.keysContainer.spacingY;\n      height += numRow * baseSize.height;\n      return size(this._keysContainerUI.width, height);\n    }\n\n    return this._keysContainerUI.contentSize;\n  }\n\n  private _updatePopupPosition() {\n    if (\n      this._editBoxUITransform == null ||\n      this._uiTransform == null ||\n      this._keysContainerUI == null ||\n      this.arrow == null\n    )\n      return;\n    const editBoxWorldBounds = this._editBoxUITransform.getBoundingBoxToWorld();\n    // Resize the keypad based on the layout.\n    // Update the layout and background.\n    // Get the width needed.\n    const popupSize = (this._uiTransform.contentSize = this._calculatePopupSize());\n    this._keysContainerUI.contentSize = popupSize;\n    const canvasBounds = this._parentCanvas!.node._uiProps.uiTransformComp!.getBoundingBox();\n\n    // Initially set anchor to bottom center.\n    let anchorX = 0.5;\n    let anchorY = 0.0;\n\n    // Set the position Y as above the edit box bounds.\n    let arrowRot = 180;\n    let popupWorldPosY = editBoxWorldBounds.yMax + this._arrowSize.height;\n    // Check if popupPositionY provides enough room for the entire popup to\n    // be visible at the top.\n    // If not place below the edit box.\n    if (popupWorldPosY + popupSize.height > canvasBounds.yMax - SCREEN_PADDING_Y) {\n      // Set the anchor to the top.\n      anchorY = 1.0;\n      arrowRot = 0;\n      popupWorldPosY = editBoxWorldBounds.yMin - this._arrowSize.height;\n    }\n    // Set the position X as the edit box bounds center X.\n    const popupWorldPosX = editBoxWorldBounds.center.x;\n    // Check if enough space to the right of the popup. If not move the\n    // popup to the left.\n    if (popupWorldPosX + 0.5 * popupSize.width > canvasBounds.xMax - SCREEN_PADDING_X) {\n      // NOTE: Assuming editbox center is inside screen.\n      const widthAvailable = canvasBounds.width - SCREEN_PADDING_X - popupWorldPosX;\n      anchorX = 1 - widthAvailable / popupSize.width;\n    }\n    // Check if enough space to the left of the popup.\n    // If not move the popup to the right.\n    else if (popupWorldPosX - 0.5 * popupSize.width < SCREEN_PADDING_X) {\n      const widthAvailable = popupWorldPosX - SCREEN_PADDING_X;\n      anchorX = widthAvailable / popupSize.width;\n    }\n\n    this._uiTransform.setAnchorPoint(anchorX, anchorY);\n    this._keysContainerUI.setAnchorPoint(anchorX, anchorY);\n    this.node.worldPosition = v3(popupWorldPosX, popupWorldPosY);\n    this.arrow.angle = -arrowRot;\n  }\n\n  private _destroyKeys() {\n    if (this.keysContainer == null) return;\n    this.keysContainer.node.children.forEach((key) => {\n      key.destroy();\n    });\n  }\n\n  private _createKeys() {\n    if (this._showEmpty) {\n      if (this.emptyContentPrefab == null) {\n        error(`Cannot add empty content. Prefab is null.`);\n        return;\n      }\n      const emptyNode = instantiate(this.emptyContentPrefab);\n      this.keysContainer?.node.addChild(emptyNode);\n    } else this.keysLayout.keys.forEach(this._addSoftKey, this);\n  }\n\n  // Helper functions to setup keys.\n  private _addSoftKey(keyData: KeyData) {\n    if (this.keysContainer == null) return;\n    let keyNode: Node;\n    switch (keyData.char) {\n      case SoftKeypad.SpecialKeys.DELETE: {\n        if (this.deleteKeyPrefab == null) {\n          error(`Cannot add key: ${keyData.char}. Prefab is null.`);\n          return;\n        }\n        keyNode = instantiate(this.deleteKeyPrefab);\n        break;\n      }\n      case SoftKeypad.SpecialKeys.DONE: {\n        if (this.doneKeyPrefab == null) {\n          error(`Cannot add key: ${keyData.char}. Prefab is null.`);\n          return;\n        }\n        keyNode = instantiate(this.doneKeyPrefab);\n        break;\n      }\n      default: {\n        if (this.keyPrefab == null) {\n          error(`Cannot add key: ${keyData.char}. Prefab is null.`);\n          return;\n        }\n        keyNode = instantiate(this.keyPrefab);\n        break;\n      }\n    }\n    const softKey = keyNode.getComponent(SoftKey);\n    if (softKey == null) {\n      error(\"The key prefab must have the SoftKey component.\");\n      return;\n    }\n    softKey.string = keyData.char;\n\n    keyNode.name = `softKey_${keyData.char}`;\n    const keyUITransform = keyNode.getComponent(UITransform);\n    if (keyUITransform == null) {\n      error(\"The key prefab must have the UITransform component.\");\n      return;\n    }\n    // Set the size of the key.\n    keyUITransform.setContentSize(keyData.size);\n    // Connect the click event.\n    softKey.setClickCallback(keyData.callback, keyData.keyCode);\n    this.keysContainer.node.addChild(keyNode);\n  }\n}\n"]}