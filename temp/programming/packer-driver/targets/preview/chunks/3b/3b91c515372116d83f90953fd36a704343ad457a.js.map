{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/MCQ/script/MCQ.ts"],"names":["_decorator","Component","Button","Label","Prefab","AS","UIAnimationLibrary","ReplicatedButton","ccclass","property","requireComponent","AnswerType","MCQ","type","String","_selection","Array","answer","awake","insertButtonsComp","node","children","choiceButtons","map","child","btn","addComponent","forEach","i","name","on","EventType","CLICK","checkSelection","push","active","lableAssigner","sel","checkFeedback","console","log","mcqLable","getComponentsInChildren","btnLable","optionLabel","length","parent","string","statusIndex","Promise","all","status","flash"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, instantiate, Button, UITransform, UI, Enum, Label, Prefab } from 'cc';\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { UIAnimationLibrary } from \"db://as_framework/scripts/UIAnimLibrary\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { toUSVString } from 'util';\nimport { threadId } from 'worker_threads';\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum AnswerType {\n    SINGLE_CORRECT,\n    MULTIPLE_CORRECT\n}\n\n@ccclass('MCQ')\nexport class MCQ extends AS(Component) {\n\n    //@property({type: Enum(AnswerType)}) private answerType = AnswerType.SINGLE_CORRECT;\n\n    // @property({visible: function (this: MCQ) {return this.answerType === AnswerType.SINGLE_CORRECT}}) private x;\n    private _selection = Array<boolean>();\n    private answer = [false, true, true, false];\n    @property({ type: String })\n    private optionLabel: string[] = [];\n    @property (Prefab)\n    private _option: Prefab = null;\n    awake() {\n        const insertButtonsComp = this.node.children;\n\n        const choiceButtons = insertButtonsComp.map((child,) => {\n            const btn = child.addComponent(Button);\n            child.addComponent(ReplicatedButton);\n\n            return btn;\n        })\n\n        // const choiceButtons = this.node.getComponentsInChildren(Button); \n        choiceButtons.forEach((btn, i) => {\n            if (btn.node.name === \"check\") {\n                btn.node.on(Button.EventType.CLICK, () => {\n                    this.checkSelection();\n                })\n\n                return;\n            }\n\n            this._selection.push(false);\n\n            btn.node.on(Button.EventType.CLICK, async () => {\n                if (this._selection[i] === false) {\n                    btn.node.children[0].active = true;\n                    this._selection[i] = true;\n                }\n                else {\n                    btn.node.children[0].active = false;\n                    this._selection[i] = false;\n                }\n            })\n        });\n        this.lableAssigner();\n    }\n    checkSelection() {\n        this._selection.forEach((sel, i) => {\n            if (sel != this.answer[i]) { this.checkFeedback(2); return };\n        });\n        this.checkFeedback(1)\n        console.log(\"running\")\n\n    }\n    lableAssigner() {\n        const mcqLable = this.node.getComponentsInChildren(Label);\n        mcqLable.forEach((btnLable, i) => {\n            if (this.optionLabel.length <= i) {\n                btnLable.node.parent.active = false;\n            }\n            else\n                btnLable.string = this.optionLabel[i];\n        });\n    }\n    async checkFeedback(statusIndex) {\n        console.log(\"running\", this._selection);\n        const btn = this.node.children;\n\n        await Promise.all(this._selection.map(async (status, i) => {\n            if (status) {\n                console.log(\"running\", statusIndex);\n                btn[i].children[statusIndex].active = true;\n                await UIAnimationLibrary.flash(btn[i].children[statusIndex], 2);\n                btn[i].children[statusIndex].active = false;\n            }\n        }))\n\n    }\n}\n\n"]}