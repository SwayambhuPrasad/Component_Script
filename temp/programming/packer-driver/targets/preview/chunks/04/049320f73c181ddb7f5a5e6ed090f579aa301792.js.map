{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedSoftEditBox.ts"],"names":["Component","Director","director","EventHandler","_decorator","AS","error","networkReplicator","SoftEditBox","ccclass","disallowMultiple","requireComponent","ReplicatedSoftEditBox","constructor","_replicationIndex","_editBox","registerEvent","awake","getComponent","node","on","EventType","EDITING_DID_BEGAN","_onEditingBegan","EDITING_DID_ENDED","_onEditingEnded","TEXT_CHANGED","_onTextChanged","onActivityEvent","name","data","showEmptyKeypad","emitEvents","editingDidBeganEvents","emit","hideKeypad","string","isKeypadVisible","isKeypadEmpty","textChangedEvents","getStateData","once","EVENT_BEGIN_FRAME","isKeypadOpen","updateStateData","editingDidEndedEvents","showKeypad","isReplicated","sendEvent","id","editBox"],"mappings":"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","sourcesContent":["import { Component, Director, director, EventHandler, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\nimport { SoftEditBox } from \"./SoftEditBox\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\n/**\n * Class to automate replication of events for the `SoftEditBox` attached to\n * the same node using the `NetworkReplicator`.\n *\n * Here only the `text-changed` event is replicated.\n * The begin and end events are used to prevent simultaneous editing.\n */\n@ccclass(\"ReplicatedSoftEditBox\")\n@requireComponent(SoftEditBox)\n@disallowMultiple\nexport class ReplicatedSoftEditBox extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _editBox: SoftEditBox | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    // TODO: Add debounce.\n    this._editBox = this.getComponent(SoftEditBox);\n    if (this._editBox == null) {\n      error(\"The replicated soft edit box must be attached to a node with soft edit box.\");\n      return;\n    }\n    this.node.on(SoftEditBox.EventType.EDITING_DID_BEGAN, this._onEditingBegan, this);\n    this.node.on(SoftEditBox.EventType.EDITING_DID_ENDED, this._onEditingEnded, this);\n    this.node.on(SoftEditBox.EventType.TEXT_CHANGED, this._onTextChanged, this);\n  }\n\n  onActivityEvent(name: string, data?: string) {\n    if (this._editBox == null) return;\n    switch (name) {\n      case SoftEditBox.EventType.EDITING_DID_BEGAN: {\n        // Another user is editing this edit box. So disable in current\n        // applet to avoid issues.\n        // softEditBox.button.interactable = false;\n        this._editBox.showEmptyKeypad();\n        EventHandler.emitEvents(this._editBox.editingDidBeganEvents, this._editBox);\n        this.node.emit(SoftEditBox.EventType.EDITING_DID_BEGAN, this._editBox, true);\n        break;\n      }\n\n      case SoftEditBox.EventType.EDITING_DID_ENDED: {\n        // Another user is done editing, enable it again.\n        // softEditBox.button.interactable = true;\n        this._editBox.hideKeypad();\n        // HACK: Replication handled inside SoftEditBox\n        break;\n      }\n\n      case SoftEditBox.EventType.TEXT_CHANGED: {\n        if (data == null) {\n          error(\"The recieved data on text-changed event cannot be null.\");\n          return;\n        }\n        // Update the edit box in current user applet.\n        this._editBox.string = data;\n        if (!this._editBox.isKeypadVisible || !this._editBox.isKeypadEmpty) {\n          this._editBox.showEmptyKeypad();\n        }\n        EventHandler.emitEvents(this._editBox.textChangedEvents, this._editBox);\n        this.node.emit(SoftEditBox.EventType.TEXT_CHANGED, this._editBox, true);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  getStateData() {\n    if (this._editBox == null) return;\n    if (this._editBox.isKeypadVisible && !this._editBox.isKeypadEmpty) {\n      // If the current edit box keypad is visible and not the empty keypad,\n      // send a textchanged event at the begining of next frame to force proper sync of\n      // the empty keypad popup, since on recieving text changed event the sync is done.\n      director.once(Director.EVENT_BEGIN_FRAME, () => this._onTextChanged(this._editBox!));\n    }\n    return { string: this._editBox.string, isKeypadOpen: this._editBox.isKeypadVisible };\n  }\n\n  updateStateData(data: { string: string; isKeypadOpen: boolean }) {\n    if (this._editBox == null) return;\n    this._editBox.string = data.string;\n    EventHandler.emitEvents(this._editBox.editingDidBeganEvents, this._editBox);\n    this.node.emit(SoftEditBox.EventType.EDITING_DID_BEGAN, this._editBox, true);\n    EventHandler.emitEvents(this._editBox.editingDidEndedEvents, this._editBox);\n    this.node.emit(SoftEditBox.EventType.EDITING_DID_ENDED, this._editBox, true);\n    EventHandler.emitEvents(this._editBox.textChangedEvents, this._editBox);\n    this.node.emit(SoftEditBox.EventType.TEXT_CHANGED, this._editBox, true);\n    if (data.isKeypadOpen) this._editBox!.showKeypad();\n  }\n\n  private _onEditingBegan(_editBox?: SoftEditBox, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: SoftEditBox.EventType.EDITING_DID_BEGAN,\n    });\n  }\n\n  private _onEditingEnded(_editBox?: SoftEditBox, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: SoftEditBox.EventType.EDITING_DID_ENDED,\n    });\n  }\n\n  private _onTextChanged(editBox: SoftEditBox, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: SoftEditBox.EventType.TEXT_CHANGED,\n      data: editBox.string,\n    });\n  }\n}\n"]}