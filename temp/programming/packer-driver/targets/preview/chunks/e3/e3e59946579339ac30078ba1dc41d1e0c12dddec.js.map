{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/GeogebraView.ts"],"names":["Director","director","EventHandler","WebView","_decorator","EDITOR","AS","debug","error","info","networkReplicator","ccclass","property","GGB_EVENT","APPLET_LOADED","GGB_EVENT_BATCH_SIZE","GGB_EVENT_BATCH_FLUSH_TIMEOUT","GGB_TEMPLATE_URL","GGBEventType","GeogebraView","override","visible","constructor","_ggbApp","_ggbApi","_replicationId","_ggbEventQueue","_timeoutHandle","undefined","_isUpdatingState","registerEvent","materialId","_materialId","width","_width","height","_height","url","_url","value","_updateUrl","awake","nativeWebView","contentWindow","frame","addEventListener","ev","event","data","type","ggbApp","ggbApi","_onAppletLoaded","getStateData","getXML","updateStateData","xml","node","once","EventType","GGB_APPLET_LOADED","_evalXML","onActivityEvent","name","eventQueue","query","registerUpdateListener","_updateListener","bind","registerRemoveListener","_removeListener","registerAddListener","_addListener","emitEvents","webviewEvents","emit","setXML","evalCommand","EVENT_BEFORE_UPDATE","_queueGGBEvent","ggbEventType","push","setTimeout","_flushGGBEventQueue","length","sendEvent","id","clearTimeout","_clientListener","UPDATE_STYLE","label","SET_MODE","DESELECT","SELECT","MOUSE_DOWN","hits","i","viewNo","x","y","ADD_POLYGON","ADD_POLYGON_COMPLETE","VIEW_CHANGED2D","props","JSON","parse","getViewProperties","xMin","yMin","xMax","invXscale","yMax","invYscale","DRAG_END","SHOW_STYLE_BAR","tempXml","parsedTempXml","window","DOMParser","parseFromString","temp","getElementsByTagName","getAttribute","parsedXml","htmlCollection","valueTag","indexOf","UPDATE","definition","getCommandString","ADD","REMOVE"],"mappings":"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","sourcesContent":["import { Director, director, EventHandler, WebView, _decorator } from \"cc\";\nimport { EDITOR } from \"cc/env\";\nimport { AS } from \"./ASComponent\";\nimport { debug, error, info } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\n\nconst { ccclass, property } = _decorator;\n\nconst GGB_EVENT = \"ggbEvent\";\nconst APPLET_LOADED = \"appletLoaded\";\n\nconst GGB_EVENT_BATCH_SIZE = 50;\nconst GGB_EVENT_BATCH_FLUSH_TIMEOUT = 250;\n\nconst GGB_TEMPLATE_URL =\n  \"https://s3-whjr-prod-cocos-applet.whjr.online/Utils/ggb-frame-template/index.html\";\n\nenum GGBEventType {\n  UPDATE_STYLE = \"updateStyle\",\n  SET_MODE = \"setMode\",\n  DESELECT = \"deselect\",\n  SELECT = \"select\",\n  MOUSE_DOWN = \"mouseDown\",\n  ADD_POLYGON = \"addPolygon\",\n  ADD_POLYGON_COMPLETE = \"addPolygonComplete\",\n  VIEW_CHANGED2D = \"viewChanged2D\",\n  DRAG_END = \"dragEnd\",\n  SHOW_STYLE_BAR = \"showStyleBar\",\n  UPDATE = \"update\",\n  ADD = \"add\",\n  REMOVE = \"remove\",\n}\n\n@ccclass(\"GeogebraView\")\nexport class GeogebraView extends AS(WebView) implements IReplicatedEvent {\n  static readonly EventType = {\n    ...super.EventType,\n    GGB_APPLET_LOADED: \"ggbAppletLoaded\",\n  };\n\n  @property _materialId: string = \"\";\n\n  @property _width: number = 2000;\n\n  @property _height: number = 1500;\n\n  private _ggbApp: any | null = null;\n\n  private _ggbApi: any | null = null;\n\n  private _replicationId: string;\n\n  private _ggbEventQueue: GGBEventType[] = [];\n\n  private _timeoutHandle: number | undefined = undefined;\n\n  private _isUpdatingState = false;\n\n  constructor() {\n    super();\n\n    this._replicationId = networkReplicator.registerEvent(this);\n  }\n\n  @property get materialId(): string {\n    return this._materialId;\n  }\n\n  @property get width() {\n    return this._width;\n  }\n\n  @property get height() {\n    return this._height;\n  }\n\n  @property({ override: true, visible: false }) get url() {\n    return super._url;\n  }\n\n  set materialId(value) {\n    if (this._materialId === value) return;\n\n    this._materialId = value;\n    this._updateUrl();\n  }\n\n  set width(value) {\n    if (this._width === value) return;\n    this._width = value;\n    this._updateUrl();\n  }\n\n  set height(value) {\n    if (this._height === value) return;\n    this._height = value;\n    this._updateUrl();\n  }\n\n  awake() {\n    if (EDITOR) return;\n    if (!this.nativeWebView || !this.nativeWebView.contentWindow) {\n      error(`GeogebraView: the frame is null`);\n      return;\n    }\n\n    this._updateUrl();\n    const frame = this.nativeWebView.contentWindow as Window & { ggbApp: any; ggbApi: any };\n\n    this.nativeWebView.addEventListener(\"loaderror\", (ev) => {\n      error(`GeogebraView: ${this.materialId} failed to load`);\n    });\n\n    this.nativeWebView.addEventListener(\"load\", () => {\n      debug(`GeogebraView: ${this.materialId} loaded`);\n      frame.addEventListener(\"message\", (event: MessageEvent) => {\n        info(`GeogebraView: ${this.materialId} received message:`, event.data);\n        if (event.data.type === APPLET_LOADED) {\n          this._ggbApp = frame.ggbApp;\n          this._ggbApi = frame.ggbApi;\n          this._onAppletLoaded();\n        }\n      });\n    });\n  }\n\n  getStateData() {\n    return this._ggbApi?.getXML();\n  }\n\n  updateStateData(xml: string) {\n    if (!this._ggbApi) {\n      this.node.once(GeogebraView.EventType.GGB_APPLET_LOADED, () => {\n        this._evalXML(xml);\n      });\n    } else this._evalXML(xml);\n  }\n\n  onActivityEvent(name: string, data: { eventQueue: GGBEventType[]; xml: string }) {\n    if (name === GGB_EVENT) {\n      const { eventQueue, xml } = data;\n      this._evalXML(xml);\n    }\n  }\n\n  private _updateUrl() {\n    const query = `?materialId=${this.materialId}&width=${this.width}&height=${this.height}`;\n    this._url = GGB_TEMPLATE_URL + query;\n    debug(`GeogebraView: ${this.materialId} url:`, this.url);\n  }\n\n  private _onAppletLoaded() {\n    this._ggbApi.registerUpdateListener(this._updateListener.bind(this));\n    this._ggbApi.registerRemoveListener(this._removeListener.bind(this));\n    this._ggbApi.registerAddListener(this._addListener.bind(this));\n    // this._ggbApi.registerClientListener(this._clientListener.bind(this));\n\n    EventHandler.emitEvents(this.webviewEvents, this, GeogebraView.EventType.GGB_APPLET_LOADED);\n    this.node.emit(GeogebraView.EventType.GGB_APPLET_LOADED, this);\n  }\n\n  private _evalXML(xml: string) {\n    this._isUpdatingState = true;\n\n    this._ggbApi.setXML(xml);\n    this._ggbApi.evalCommand(\"UpdateConstruction()\");\n\n    director.once(Director.EVENT_BEFORE_UPDATE, () => {\n      this._isUpdatingState = false;\n    });\n  }\n\n  private _queueGGBEvent(ggbEventType: GGBEventType) {\n    if (this._isUpdatingState) return;\n    this._ggbEventQueue.push(ggbEventType);\n    if (!this._timeoutHandle) {\n      this._timeoutHandle = setTimeout(\n        this._flushGGBEventQueue.bind(this),\n        GGB_EVENT_BATCH_FLUSH_TIMEOUT,\n      );\n    }\n\n    if (this._ggbEventQueue.length >= GGB_EVENT_BATCH_SIZE) {\n      this._flushGGBEventQueue();\n    }\n  }\n\n  private _flushGGBEventQueue() {\n    if (this._ggbEventQueue.length > 0) {\n      networkReplicator.sendEvent({\n        id: this._replicationId,\n        name: GGB_EVENT,\n        data: { eventQueue: this._ggbEventQueue, xml: this._ggbApi.getXML() },\n      });\n    }\n    clearTimeout(this._timeoutHandle);\n    this._ggbEventQueue = [];\n    this._timeoutHandle = undefined;\n  }\n\n  private _clientListener(event: any) {\n    switch (event[0]) {\n      case GGBEventType.UPDATE_STYLE: {\n        const label = event[1];\n        info(`GeogebraView: ${this.materialId} received updateStyle:`, label);\n\n        const xml = this._ggbApi.getXML(label);\n        this._queueGGBEvent(GGBEventType.UPDATE_STYLE);\n        break;\n      }\n\n      case GGBEventType.SET_MODE: {\n        info(`GeogebraView: ${this.materialId} received setMode:`, event[2]);\n        // this._sendGGBEvent(GGBEventType.SET_MODE, { label, xml });\n        break;\n      }\n\n      case GGBEventType.DESELECT: {\n        info(`GeogebraView: ${this.materialId} received deselect`, event);\n        // unregisterListeners();\n        // xapi2.evalCommand(\"SelectObjects[]\");\n        // registerListeners();\n        break;\n      }\n\n      case GGBEventType.SELECT:\n        info(`GeogebraView: ${this.materialId} received select`, event);\n        //unregisterListeners();\n        //xapi2.evalCommand(\"SelectObjects[\" + event[1] + \"]\");\n        //registerListeners();\n        break;\n\n      case GGBEventType.MOUSE_DOWN:\n        info(`GeogebraView: ${this.materialId} received mouseDown`, event);\n        let hits = \"\";\n        for (let i = 0; i < event.hits.length; i++) {\n          hits += event.hits[i];\n          hits += \" \";\n        }\n        if (!hits) {\n          hits = \"(none)\";\n        }\n        info(\n          `GeogebraView: ${this.materialId} received mouseDown in view ${event.viewNo} at (${event.x}, ${event.y}) hitting ${hits}`,\n        );\n        break;\n      case GGBEventType.ADD_POLYGON:\n        info(`GeogebraView: ${this.materialId} received addPolygon`, event);\n        break;\n      case GGBEventType.ADD_POLYGON_COMPLETE:\n        info(`GeogebraView: ${this.materialId} received addPolygonComplete`, event);\n        break;\n\n      case GGBEventType.VIEW_CHANGED2D:\n        const props = JSON.parse(this._ggbApi.getViewProperties());\n        const xMin = props.xMin;\n        const yMin = props.yMin;\n        const xMax = props.xMin + props.width * props.invXscale;\n        const yMax = props.yMin + props.height * props.invYscale;\n        info(\n          `GeogebraView: ${this.materialId} received viewChanged2D`,\n          `(${xMin}, ${yMin}, ${xMax}, ${yMax})`,\n          event,\n        );\n\n        // xapi2.setCoordSystem(xMin, xMax, yMin, yMax);\n        break;\n\n      case GGBEventType.DRAG_END:\n        info(`GeogebraView: ${this.materialId} received dragEnd`, event[1]);\n        break;\n\n      case GGBEventType.SHOW_STYLE_BAR:\n        info(`GeogebraView: ${this.materialId} received showStyleBar`, event);\n        break;\n\n      default:\n        info(`GeogebraView: ${this.materialId} received unknown event`, event);\n        break;\n    }\n  }\n\n  private _updateListener(label: string) {\n    const xml = this._ggbApi.getXML(label);\n    info(`GeogebraView: ${this.materialId} update:`, label, xml);\n    const tempXml = `<root>${xml}</root>`;\n\n    let parsedTempXml = new window.DOMParser().parseFromString(tempXml, \"text/xml\");\n    const temp = parsedTempXml.getElementsByTagName(\"element\");\n    if (temp[0].getAttribute(\"type\") === \"image\") {\n      return;\n    }\n\n    if (label === \"finalResult\") {\n      info(`GeogebraView: ${this.materialId} received finalResult`, xml);\n      let parsedXml = new window.DOMParser().parseFromString(xml, \"text/xml\");\n      if (parsedXml) {\n        let htmlCollection = parsedXml.getElementsByTagName(\"value\");\n        if (htmlCollection && htmlCollection.length > 0) {\n          let valueTag = htmlCollection[0] ? htmlCollection[0].getAttribute(\"val\") : \"\";\n          if (valueTag) {\n            info(`Value tag: ${valueTag}`);\n          }\n        }\n      }\n    }\n\n    if (label.indexOf(\"{\") > -1 || label.indexOf(\"angle\") > -1) {\n      return;\n    }\n\n    this._queueGGBEvent(GGBEventType.UPDATE);\n  }\n\n  private _addListener(label: string) {\n    info(`GeogebraView: ${this.materialId} add:`, label);\n\n    const xml = this._ggbApi.getXML(label);\n    debug(`GeogebraView: ${this.materialId}`, xml);\n\n    const definition = this._ggbApi.getCommandString(label);\n    debug(`GeogebraView: ${this.materialId}`, definition);\n\n    this._queueGGBEvent(GGBEventType.ADD);\n  }\n\n  private _removeListener(label: string) {\n    info(`GeogebraView: ${this.materialId} remove:`, label);\n    const xml = this._ggbApi.getXML(label);\n    this._queueGGBEvent(GGBEventType.REMOVE);\n  }\n}\n"]}