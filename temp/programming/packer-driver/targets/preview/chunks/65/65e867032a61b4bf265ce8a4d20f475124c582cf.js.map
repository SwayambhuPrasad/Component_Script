{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedUIDrag.ts"],"names":["Component","EventHandler","v3","_decorator","AS","error","networkReplicator","UIDrag","ccclass","disallowMultiple","requireComponent","ReplicatedUIDrag","constructor","_replicationIndex","_drag","registerEvent","awake","getComponent","node","on","EventType","DRAG_DID_BEGAN","_onDragBegan","DRAG_DID_END","_onDragEnded","DRAG_MOVE","_onDragMove","onActivityEvent","name","data","emit","emitEvents","dragDidBeganEvents","checkUIDrop","dragDidEndedEvents","targetPosition","x","y","dragMoveEvents","getStateData","worldPosition","updateStateData","forceSetPosition","isReplicated","sendEvent","id","drag"],"mappings":"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","sourcesContent":["import { Component, EventHandler, v3, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\nimport { UIDrag } from \"./UIDrag\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\n/**\n * Class to automate replication of events for the `DragData` attached to\n * the same node using the `NetworkReplicator`.\n */\n@ccclass(\"ReplicatedUIDrag\")\n@requireComponent(UIDrag)\n@disallowMultiple\nexport class ReplicatedUIDrag extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _drag: UIDrag | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._drag = this.getComponent(UIDrag);\n    // TODO: Add debounce.\n    if (this._drag == null) {\n      error(\"the replicated UIDrag must be attached to node with UIDrag component.\");\n      return;\n    }\n    this.node.on(UIDrag.EventType.DRAG_DID_BEGAN, this._onDragBegan, this);\n    this.node.on(UIDrag.EventType.DRAG_DID_END, this._onDragEnded, this);\n    this.node.on(UIDrag.EventType.DRAG_MOVE, this._onDragMove, this);\n  }\n\n  onActivityEvent(name: string, data?: { x: number; y: number }) {\n    if (this._drag == null) return;\n    switch (name) {\n      case UIDrag.EventType.DRAG_DID_BEGAN: {\n        this.node.emit(UIDrag.EventType.DRAG_DID_BEGAN, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragDidBeganEvents, this._drag);\n        break;\n      }\n      case UIDrag.EventType.DRAG_DID_END: {\n        this._drag.checkUIDrop();\n        this.node.emit(UIDrag.EventType.DRAG_DID_END, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragDidEndedEvents, this._drag);\n        break;\n      }\n      case UIDrag.EventType.DRAG_MOVE: {\n        if (data == null) {\n          error(\"The data recieved on drag-move cannot be null.\");\n          return;\n        }\n        // Update the edit box in current user applet.\n        this._drag.targetPosition = v3(data.x, data.y);\n        this.node.emit(UIDrag.EventType.DRAG_MOVE, this._drag, true);\n        EventHandler.emitEvents(this._drag.dragMoveEvents, this._drag);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  getStateData() {\n    return { x: this.node.worldPosition.x, y: this.node.worldPosition.y };\n  }\n\n  updateStateData(data: { x: number; y: number }) {\n    if (!this._drag) return;\n    this._drag.forceSetPosition(v3(data.x, data.y));\n    this.node.emit(UIDrag.EventType.DRAG_DID_BEGAN, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragDidBeganEvents, this._drag);\n    this.node.emit(UIDrag.EventType.DRAG_MOVE, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragMoveEvents, this._drag);\n    this.node.emit(UIDrag.EventType.DRAG_DID_END, this._drag, true);\n    EventHandler.emitEvents(this._drag.dragDidEndedEvents, this._drag);\n  }\n\n  private _onDragBegan(_drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_DID_BEGAN,\n    });\n  }\n\n  private _onDragEnded(_drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_DID_END,\n    });\n  }\n\n  private _onDragMove(drag: UIDrag, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: UIDrag.EventType.DRAG_MOVE,\n      data: {\n        x: drag.targetPosition.x,\n        y: drag.targetPosition.y,\n      },\n    });\n  }\n}\n"]}