{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedSlider.ts"],"names":["Component","EventHandler","Slider","_decorator","AS","error","networkReplicator","ccclass","disallowMultiple","requireComponent","SLIDE","ReplicatedSlider","constructor","_replicationIndex","_slider","registerEvent","awake","getComponent","node","on","_onSlide","onActivityEvent","name","data","progress","emitEvents","slideEvents","emit","getStateData","updateStateData","slider","isReplicated","sendEvent","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,U,OAAAA,U;;AACjCC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;;AACkBC,MAAAA,iB,iBAAAA,iB;;;;;;;OAErB;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,gBAAX;AAA6BC,QAAAA;AAA7B,O,GAAkDN,U;AAElDO,MAAAA,K,GAAQ,O;;kCAKDC,gB,WAHZJ,OAAO,CAAC,kBAAD,C,UACPE,gBAAgB,CAACP,MAAD,C,+BAChBM,gB,UAFD,MAGaG,gBAHb,SAGsC;AAAA;AAAA,oBAAGX,SAAH,CAHtC,CAGgF;AAK9EY,QAAAA,WAAW,GAAG;AACZ;AADY,eAJNC,iBAIM;AAAA,eAFNC,OAEM,GAFmB,IAEnB;AAEZ,eAAKD,iBAAL,GAAyB;AAAA;AAAA,sDAAkBE,aAAlB,CAAgC,IAAhC,CAAzB;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKF,OAAL,GAAe,KAAKG,YAAL,CAAkBf,MAAlB,CAAf;;AACA,cAAI,KAAKY,OAAL,IAAgB,IAApB,EAA0B;AACxB;AAAA;AAAA,gCAAM,yEAAN;AACA;AACD;;AACD,eAAKI,IAAL,CAAUC,EAAV,CAAaT,KAAb,EAAoB,KAAKU,QAAzB,EAAmC,IAAnC;AACD;;AAEDC,QAAAA,eAAe,CAACC,IAAD,EAAeC,IAAf,EAAoC;AACjD,cAAI,KAAKT,OAAL,IAAgB,IAAhB,IAAwBQ,IAAI,KAAKZ,KAArC,EAA4C;;AAC5C,cAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB;AAAA;AAAA,gCAAM,kDAAN;AACA;AACD;;AACD,eAAKT,OAAL,CAAaU,QAAb,GAAwBD,IAAxB;AACAtB,UAAAA,YAAY,CAACwB,UAAb,CAAwB,KAAKX,OAAL,CAAaY,WAArC,EAAkD,KAAKZ,OAAvD;AACA,eAAKI,IAAL,CAAUS,IAAV,CAAejB,KAAf,EAAsB,KAAKI,OAA3B,EAAoC,IAApC;AACD;;AAEDc,QAAAA,YAAY,GAAG;AAAA;;AACb,kCAAO,KAAKd,OAAZ,qBAAO,cAAcU,QAArB;AACD;;AAEDK,QAAAA,eAAe,CAACN,IAAD,EAAe;AAC5B,cAAI,KAAKT,OAAL,IAAgB,IAApB,EAA0B;AAC1B,eAAKA,OAAL,CAAaU,QAAb,GAAwBD,IAAxB;AACAtB,UAAAA,YAAY,CAACwB,UAAb,CAAwB,KAAKX,OAAL,CAAaY,WAArC,EAAkD,KAAKZ,OAAvD;AACA,eAAKI,IAAL,CAAUS,IAAV,CAAejB,KAAf,EAAsB,KAAKI,OAA3B,EAAoC,IAApC;AACD;;AAEOM,QAAAA,QAAQ,CAACU,MAAD,EAAiBC,YAAjB,EAAyC;AACvD,cAAIA,YAAJ,EAAkB;AAClB;AAAA;AAAA,sDAAkBC,SAAlB,CAA4B;AAC1BC,YAAAA,EAAE,EAAE,KAAKpB,iBADiB;AAE1BS,YAAAA,IAAI,EAAEZ,KAFoB;AAG1Ba,YAAAA,IAAI,EAAEO,MAAM,CAACN;AAHa,WAA5B;AAKD;;AAhD6E,O","sourcesContent":["import { Component, EventHandler, Slider, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\nconst SLIDE = \"slide\";\n\n@ccclass(\"ReplicatedSlider\")\n@requireComponent(Slider)\n@disallowMultiple\nexport class ReplicatedSlider extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _slider: Slider | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._slider = this.getComponent(Slider);\n    if (this._slider == null) {\n      error(\"The replicated slider must be attached to a node with slider component.\");\n      return;\n    }\n    this.node.on(SLIDE, this._onSlide, this);\n  }\n\n  onActivityEvent(name: string, data?: number): void {\n    if (this._slider == null || name !== SLIDE) return;\n    if (data == null) {\n      error(\"The recieved data on slide event cannot be null.\");\n      return;\n    }\n    this._slider.progress = data;\n    EventHandler.emitEvents(this._slider.slideEvents, this._slider);\n    this.node.emit(SLIDE, this._slider, true);\n  }\n\n  getStateData() {\n    return this._slider?.progress;\n  }\n\n  updateStateData(data: number) {\n    if (this._slider == null) return;\n    this._slider.progress = data;\n    EventHandler.emitEvents(this._slider.slideEvents, this._slider);\n    this.node.emit(SLIDE, this._slider, true);\n  }\n\n  private _onSlide(slider: Slider, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: SLIDE,\n      data: slider.progress,\n    });\n  }\n}\n"]}