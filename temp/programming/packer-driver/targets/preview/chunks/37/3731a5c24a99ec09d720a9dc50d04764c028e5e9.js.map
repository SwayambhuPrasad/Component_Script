{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Screenshot.ts"],"names":["Camera","Component","director","Director","EventHandler","find","instantiate","RenderTexture","UITransform","view","_decorator","AS","error","networkReplicator","findParentCanvas","readPixels","ccclass","property","CAMERA_NAME","Screenshot","type","tooltip","displayOrder","_parentCanvas","_mainCamera","_camera","_texture","targetRect","_targetRect","value","onLoad","node","cameraNode","cameraComponent","name","addChild","getComponent","enabled","targetTexture","canvasSize","getDesignResolutionSize","initialize","onEnable","screenShotRequested","on","_onScreenshotRequested","onDisable","off","setScreenshotCamera","unsetScreenshotCamera","getImageURL","fullQuality","x","y","width","height","getBoundingBoxToWorld","data","call","canvas","document","createElement","ctx","getContext","rowBytes","row","srow","imageData","createImageData","start","i","putImageData","toDataURL","emitEvents","beforeCaptureEvents","emit","EventType","BEFORE_CAPTURE","once","EVENT_AFTER_DRAW","sendScreenShot","afterCaptureEvents","AFTER_CAPTURE","Array"],"mappings":"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","sourcesContent":["import {\n  Camera,\n  Canvas,\n  Component,\n  director,\n  Director,\n  EventHandler,\n  find,\n  instantiate,\n  RenderTexture,\n  UITransform,\n  view,\n  _decorator,\n} from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { networkReplicator } from \"./NetworkReplicator\";\nimport { findParentCanvas, readPixels } from \"./Utils\";\n\nconst { ccclass, property } = _decorator;\n\nconst CAMERA_NAME = \"_screenShotCamera\";\n\n@ccclass(\"Screenshot\")\nexport class Screenshot extends AS(Component) {\n  static EventType = {\n    BEFORE_CAPTURE: \"before-capture\",\n    AFTER_CAPTURE: \"after-capture\",\n  };\n\n  @property({\n    type: [EventHandler],\n    tooltip: \"The event handler to be trggered before capture\",\n    displayOrder: 30,\n  })\n  beforeCaptureEvents = new Array<EventHandler>();\n\n  @property({\n    type: [EventHandler],\n    tooltip: \"The event handler to be trggered after capture\",\n    displayOrder: 31,\n  })\n  afterCaptureEvents = new Array<EventHandler>();\n\n  @property _targetRect: UITransform | null = null;\n\n  private _parentCanvas: Canvas | null = null;\n\n  private _mainCamera: Camera | null = null;\n\n  private _camera: Camera | null = null;\n\n  private _texture: RenderTexture | null = null;\n\n  @property({\n    type: UITransform,\n    tooltip: \"The area to be captured. Use full screen if width or height is zero.\",\n  })\n  get targetRect() {\n    return this._targetRect;\n  }\n\n  set targetRect(value) {\n    this._targetRect = value;\n  }\n\n  onLoad() {\n    // Get the current canvas.\n    this._parentCanvas = findParentCanvas(this.node);\n    if (this._parentCanvas == null) {\n      error(\"Screenshot initialization failed. Could not find any canvas in the scene.\");\n      return;\n    }\n    let cameraNode = find(CAMERA_NAME, this._parentCanvas.node);\n    if (!cameraNode) {\n      // Create a copy of the existing camera node.\n      if (this._parentCanvas.cameraComponent == null) {\n        error(\"The canvas does not have a valid camera attached.\");\n        return;\n      }\n      cameraNode = instantiate(this._parentCanvas.cameraComponent.node);\n      cameraNode.name = CAMERA_NAME;\n      this._parentCanvas.node.addChild(cameraNode);\n    }\n    this._camera = cameraNode.getComponent(Camera);\n    if (this._camera == null) {\n      error(\"Screenshot initialization failed. Camera could not be cloned.\");\n      return;\n    }\n    this._camera.enabled = false;\n    this._texture = this._camera.targetTexture;\n\n    if (!this._texture) {\n      // Create a new RenderTexture and set this new RenderTexture to the\n      // camera's targetTexture so that the camera content will be\n      // rendered to this new RenderTexture.\n      this._texture = new RenderTexture();\n      const canvasSize = view.getDesignResolutionSize();\n      this._texture.initialize(canvasSize);\n      this._camera.targetTexture = this._texture;\n    }\n  }\n\n  onEnable() {\n    networkReplicator.screenShotRequested.on(this._onScreenshotRequested, this);\n  }\n\n  onDisable() {\n    networkReplicator.screenShotRequested.off(this._onScreenshotRequested, this);\n  }\n\n  protected setScreenshotCamera() {\n    if (this._parentCanvas == null || this._camera == null) return;\n    this._camera.enabled = true;\n    this._mainCamera = this._parentCanvas.cameraComponent;\n    this._parentCanvas.cameraComponent = this._camera;\n  }\n\n  protected unsetScreenshotCamera() {\n    if (this._parentCanvas == null || this._camera == null) return;\n    this._camera.enabled = false;\n    this._parentCanvas.cameraComponent = this._mainCamera;\n  }\n\n  protected getImageURL(fullQuality = true) {\n    if (this._camera == null || this._texture == null) {\n      error(\"The screenshot camera or render texture was not initialized correctly!\");\n      return \"\";\n    }\n    // let x, y, width, height;\n    const { x, y, width, height } = this._targetRect?.getBoundingBoxToWorld() ?? {\n      x: 0,\n      y: 0,\n      width: this._texture.width,\n      height: this._texture.height,\n    };\n\n    const data = readPixels.call(this._texture, x, y, width, height);\n    if (data == null) {\n      error(\"Unabel to read pixels from the render texture.\");\n      return \"\";\n    }\n    // Converting to base64 data\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx == null) {\n      error(\"Unable to find '2d' context on the newly created canvas.\");\n      return \"\";\n    }\n    canvas.width = width;\n    canvas.height = height;\n    const rowBytes = width * 4;\n    for (let row = 0; row < height; row++) {\n      const srow = height - 1 - row;\n      const imageData = ctx.createImageData(width, 1);\n      const start = srow * width * 4;\n      for (let i = 0; i < rowBytes; i++) {\n        imageData.data[i] = data[start + i];\n      }\n      ctx.putImageData(imageData, 0, row);\n    }\n\n    return canvas.toDataURL(`image/${fullQuality ? \"png\" : \"jpeg\"}`, fullQuality ? 1.0 : 0.6);\n  }\n\n  private _onScreenshotRequested() {\n    this.setScreenshotCamera();\n    EventHandler.emitEvents(this.beforeCaptureEvents, this);\n    this.node.emit(Screenshot.EventType.BEFORE_CAPTURE, this);\n    director.once(Director.EVENT_AFTER_DRAW, () => {\n      networkReplicator.sendScreenShot(this.getImageURL(false));\n      this.unsetScreenshotCamera();\n      EventHandler.emitEvents(this.afterCaptureEvents, this);\n      this.node.emit(Screenshot.EventType.AFTER_CAPTURE, this);\n    });\n  }\n}\n"]}