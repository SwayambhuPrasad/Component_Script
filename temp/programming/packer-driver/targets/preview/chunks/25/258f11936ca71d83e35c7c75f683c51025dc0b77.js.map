{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/VirtualNodeBuilder.ts"],"names":["NodeData","VirtualNodeBuilder","isHtmlDomNode","obj","isSymbolNode","katex","__domTree","SymbolNode","isSvgNode","SvgNode","hasChildNodes","isClassName","name","isStyleName","error","warn","classStateMapping","State","styleStateMapping","HPaddingNode","TextNode","VerticalListRow","IDENTIFIER_CLASS","constructor","rootNode","attributes","latex","options","_latex","_options","_state","_enclosedClassIndexes","defaultOptions","build","row","vlist","addRow","virtualDomTree","default","__renderToHTMLTree","children","err","_createRenderingState","align","_getNodeAttributes","nodeData","root","strutBounds","getStrutBounds","baselineHeight","height","depth","em","node","parentState","_getGlyphDataFromNode","forEach","child","_resetState","parentVlist","setStretchyWidths","addCell","classes","classData","pstrut","withYShift","withResetMargin","_extractClassDataFromNode","_extractStyleDataFromNode","_createMSpace","_createSvgNode","_createTextNode","_createItalicNode","nextClassIsEnclosedClass","index","withClass","camelName","_toCamelCase","str","replace","g","toUpperCase","mspace","setPosition","nextX","y","bounds","set","width","key","style","Object","prototype","hasOwnProperty","call","value","virtualSvg","state","test","toString","fill","color","svgNode","minWidth","margin","left","marginLeft","right","marginRight","text","textNode","font","italic","italicNode"],"mappings":";;;0IAuCMA,Q,EAeOC,kB;;;;;;AArCb,WAASC,aAAT,CAAuBC,GAAvB,EAAiC;AAC/B,WAAO,aAAaA,GAApB;AACD;;AACD,WAASC,YAAT,CAAsBD,GAAtB,EAAgC;AAC9B,WAAOA,GAAG,YAAYE,KAAK,CAACC,SAAN,CAAgBC,UAAtC;AACD;;AACD,WAASC,SAAT,CAAmBL,GAAnB,EAA6B;AAC3B,WAAOA,GAAG,YAAYE,KAAK,CAACC,SAAN,CAAgBG,OAAtC;AACD;;AACD,WAASC,aAAT,CAAuBP,GAAvB,EAAiC;AAC/B,WAAO,cAAcA,GAArB;AACD;;AACD,WAASQ,WAAT,CAAqBC,IAArB,EAA2E;AACzE,WAAOA,IAAI;AAAA;AAAA,+CAAX;AACD;;AACD,WAASC,WAAT,CAAqBD,IAArB,EAA2E;AACzE,WAAOA,IAAI;AAAA;AAAA,+CAAX;AACD;AAED;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtCSE,MAAAA,K,iBAAAA,K;AAAOC,MAAAA,I,iBAAAA,I;;AACPC,MAAAA,iB,iBAAAA,iB;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,iB,iBAAAA,iB;;AAEPC,MAAAA,Y,iBAAAA,Y;AACAV,MAAAA,O,iBAAAA,O;AACAW,MAAAA,Q,iBAAAA,Q;AAEAC,MAAAA,e,iBAAAA,e;;;;;;;AAIIC,MAAAA,gB,GAAmB,W;AA0BnBtB,MAAAA,Q,GAAN,MAAMA,QAAN,CAAe;AAKbuB,QAAAA,WAAW,CAACC,QAAD,EAAyBC,UAAzB,EAAsF;AAAA,eAJjGD,QAIiG;AAAA,eAFjGC,UAEiG;AAC/F,eAAKD,QAAL,GAAgBA,QAAhB;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACD;;AARY,O;AAWf;AACA;AACA;AACA;;oCACaxB,kB,GAAN,MAAMA,kBAAN,CAAyB;AAS9B;AACF;AACA;AACA;AACA;AACA;AACEsB,QAAAA,WAAW,CAACG,KAAD,EAAgBC,OAAhB,EAA+B;AAAA,eAdlCC,MAckC;AAAA,eAZlCC,QAYkC;AAAA,eAVlCC,MAUkC;AAAA,eARlCC,qBAQkC;AACxC,eAAKH,MAAL,GAAcF,KAAd;AACA,eAAKG,QAAL,GAAgBF,OAAhB,WAAgBA,OAAhB,GAA2B,EAA3B;AACA,eAAKG,MAAL,GAAc;AAAA;AAAA,8BAAU;AAAA;AAAA,8BAAME,cAAN,CAAqB,KAAKH,QAA1B,CAAV,CAAd;AACA,eAAKE,qBAAL,GAA6B,EAA7B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACQE,QAAAA,KAAK,GAAG;AAAA;;AAAA;AACZ,YAAA,KAAI,CAACH,MAAL,GAAc;AAAA;AAAA,gCAAU;AAAA;AAAA,gCAAME,cAAN,CAAqB,KAAI,CAACH,QAA1B,CAAV,CAAd;AACA,gBAAMK,GAAG,GAAG;AAAA;AAAA,oDAAoB,EAApB,CAAZ;;AACA,YAAA,KAAI,CAACJ,MAAL,CAAYK,KAAZ,CAAkBC,MAAlB,CAAyBF,GAAzB;;AACA,YAAA,KAAI,CAACH,qBAAL,GAA6B,EAA7B;AACA,gBAAIM,cAAJ;;AACA,gBAAI;AACF;AACA,kBAAI,CAAChC,KAAL,EAAYA,KAAK,GAAG,0CAAmCiC,OAA3C,CAFV,CAGF;;AACAD,cAAAA,cAAc,GAAGhC,KAAK,CAACkC,kBAAN,CAAyB,KAAI,CAACX,MAA9B,EAAsC,KAAI,CAACC,QAA3C,EAAqDW,QAArD,CAA8D,CAA9D,CAAjB;AACD,aALD,CAKE,OAAOC,GAAP,EAAY;AACZ;AAAA;AAAA,kCAAMA,GAAN;AACA;AACD;;AACD,YAAA,KAAI,CAACC,qBAAL,CAA2BL,cAA3B;;AACA,gBAAMb,QAAQ,GAAG,KAAI,CAACM,MAAL,CAAYK,KAA7B;AACAX,YAAAA,QAAQ,CAACmB,KAAT;;AACA,gBAAMlB,UAAU,GAAG,KAAI,CAACmB,kBAAL,CAAwBP,cAAxB,EAAwCb,QAAxC,CAAnB;;AACA,gBAAMqB,QAAQ,GAAG,IAAI7C,QAAJ,CAAawB,QAAb,EAAuBC,UAAvB,CAAjB;AACA,mBAAOoB,QAAP;AApBY;AAqBb;;AAEOD,QAAAA,kBAAkB,CAACP,cAAD,EAAsBS,IAAtB,EAA0C;AAClE,cAAMC,WAAW,GAAGD,IAAI,CAACE,cAAL,EAApB;AACA,cAAMvB,UAAU,GAAG;AACjBwB,YAAAA,cAAc,EAAEF,WAAW,CAACG,MAAZ,GAAqBb,cAAc,CAACc,KAAf,GAAuB,KAAKrB,MAAL,CAAYsB,EADvD;AAEjBL,YAAAA;AAFiB,WAAnB;AAIA,iBAAOtB,UAAP;AACD;;AAEOiB,QAAAA,qBAAqB,CAACW,IAAD,EAAY;AACvC,cAAMC,WAAW,GAAG,KAAKxB,MAAzB;;AACA,eAAKyB,qBAAL,CAA2BF,IAA3B;;AACA,cAAI3C,aAAa,CAAC2C,IAAD,CAAjB,EAAyB;AACvBA,YAAAA,IAAI,CAACb,QAAL,CAAcgB,OAAd,CAAuBC,KAAD,IAAgB,KAAKf,qBAAL,CAA2Be,KAA3B,CAAtC;AACD;;AACD,eAAKC,WAAL,CAAiBJ,WAAjB;AACD;;AAEOI,QAAAA,WAAW,CAACJ,WAAD,EAAqB;AACtC,cAAMnB,KAAK,GAAG,KAAKL,MAAL,CAAYK,KAA1B;AACA,cAAMwB,WAAW,GAAGL,WAAW,CAACnB,KAAhC;;AACA,cAAIA,KAAK,KAAKwB,WAAd,EAA2B;AACzBxB,YAAAA,KAAK,CAACyB,iBAAN;AACAzB,YAAAA,KAAK,CAACQ,KAAN;AACAgB,YAAAA,WAAW,CAACE,OAAZ,CAAoB1B,KAApB;AACD;;AACD,cAAI,KAAKL,MAAL,CAAYgC,OAAZ,KAAwBR,WAAW,CAACQ,OAAxC,EAAiD;AAC/C,iBAAKhC,MAAL,CAAYgC,OAAZ,CAAoBN,OAApB,CAA6BO,SAAD,IAAe;AACzC,mBAAKhC,qBAAL,CAA2BgC,SAAS,CAACnD,IAArC;AACD,aAFD;AAGD;;AACD,cAAI,KAAKkB,MAAL,CAAYkC,MAAhB,EAAwB;AACtBV,YAAAA,WAAW,GAAGA,WAAW,CAACW,UAAZ,CAAuB,KAAKnC,MAAL,CAAYkC,MAAnC,EAA2CE,eAA3C,EAAd;AACD;;AACD,eAAKpC,MAAL,GAAcwB,WAAd;AACD;;AAEOC,QAAAA,qBAAqB,CAACF,IAAD,EAAY;AACvC,eAAKc,yBAAL,CAA+Bd,IAA/B;;AACA,eAAKe,yBAAL,CAA+Bf,IAA/B;;AACA,eAAKgB,aAAL;;AACA,eAAKC,cAAL,CAAoBjB,IAApB;;AACA,eAAKkB,eAAL,CAAqBlB,IAArB;;AACA,eAAKmB,iBAAL,CAAuBnB,IAAvB;AACD;;AAEOc,QAAAA,yBAAyB,CAACd,IAAD,EAAY;AAC3C,cAAIoB,wBAAwB,GAAG,KAA/B;AACA,cAAI,CAACvE,aAAa,CAACmD,IAAD,CAAlB,EAA0B;AAC1BA,UAAAA,IAAI,CAACS,OAAL,CAAaN,OAAb,CAAsB5C,IAAD,IAAkB;AACrC,gBAAIA,IAAI,KAAKU,gBAAb,EAA+B;AAC7BmD,cAAAA,wBAAwB,GAAG,IAA3B;AACD,aAFD,MAEO,IAAIA,wBAAJ,EAA8B;AAAA;;AACnCA,cAAAA,wBAAwB,GAAG,KAA3B;AACA,kBAAMC,KAAK,GAAI,KAAK3C,qBAAL,CAA2BnB,IAA3B,6BAAmC,KAAKmB,qBAAL,CAA2BnB,IAA3B,CAAnC,oCAAuE,CAAtF;AACA,mBAAKkB,MAAL,GAAc,KAAKA,MAAL,CAAY6C,SAAZ,CAAsB;AAAE/D,gBAAAA,IAAF;AAAQ8D,gBAAAA;AAAR,eAAtB,CAAd;AACD,aAJM,MAIA;AACL,kBAAME,SAAS,GAAG,KAAKC,YAAL,CAAkBjE,IAAlB,CAAlB;;AACA,kBAAID,WAAW,CAACiE,SAAD,CAAf,EAA4B;AAC1B,qBAAK9C,MAAL,GAAc;AAAA;AAAA,4DAAkB8C,SAAlB,EAA6B,KAAK9C,MAAlC,EAA0CuB,IAA1C,CAAd;AACD;AACF;AACF,WAbD;AAcD;;AAEOwB,QAAAA,YAAY,CAACC,GAAD,EAAc;AAChC,iBAAOA,GAAG,CAACC,OAAJ,CAAY,WAAZ,EAAyB,UAAUC,CAAV,EAAa;AAC3C,mBAAOA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAP;AACD,WAFM,CAAP;AAGD;;AAEOZ,QAAAA,aAAa,GAAG;AACtB,cAAI,KAAKvC,MAAL,CAAYoD,MAAhB,EAAwB;AACtB,gBAAMA,MAAM,GAAG;AAAA;AAAA,8CAAiB,KAAKpD,MAAL,CAAYgC,OAA7B,CAAf;AACAoB,YAAAA,MAAM,CAACC,WAAP,CAAmB,KAAKrD,MAAL,CAAYsD,KAA/B,EAAsC,KAAKtD,MAAL,CAAYuD,CAAlD;AACAH,YAAAA,MAAM,CAACI,MAAP,CAAcC,GAAd,CAAkB;AAAEC,cAAAA,KAAK,EAAE,KAAK1D,MAAL,CAAYoD,MAAZ,GAAqB,KAAKpD,MAAL,CAAYsB;AAA1C,aAAlB;;AACA,iBAAKtB,MAAL,CAAYK,KAAZ,CAAkB0B,OAAlB,CAA0BqB,MAA1B;;AACA,iBAAKpD,MAAL,GAAc,KAAKA,MAAL,CAAYoC,eAAZ,EAAd;AACD;AACF;;AAEOE,QAAAA,yBAAyB,CAACf,IAAD,EAAY;AAC3C,cAAI,CAACnD,aAAa,CAACmD,IAAD,CAAlB,EAA0B;;AAC1B,eAAK,IAAMoC,GAAX,IAAkBpC,IAAI,CAACqC,KAAvB,EAA8B;AAC5B,gBAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCzC,IAAI,CAACqC,KAA1C,EAAiDD,GAAjD,CAAJ,EAA2D;AACzD,kBAAMM,KAAK,GAAG1C,IAAI,CAACqC,KAAL,CAAWD,GAAX,CAAd;;AACA,kBAAI5E,WAAW,CAAC4E,GAAD,CAAX,IAAoBM,KAAK,IAAI,IAAjC,EAAuC;AACrC,qBAAKjE,MAAL,GAAc;AAAA;AAAA,4DAAkB2D,GAAlB,EAAuB,KAAK3D,MAA5B,EAAoCiE,KAApC,CAAd;AACD;AACF;AACF;AACF;;AAEOzB,QAAAA,cAAc,CAACjB,IAAD,EAAY;AAChC,cAAI,CAAC7C,SAAS,CAAC6C,IAAD,CAAd,EAAsB;AAEtB,cAAM2C,UAAU,GAAG3C,IAAnB;AACA,cAAM4C,KAAK,GAAG,KAAKnE,MAAnB;AACA,cAAMoB,MAAM,GAAG,CAAC8C,UAAU,CAACvE,UAAX,CAAsByB,MAAtB,CAA6B6B,OAA7B,CAAqC,IAArC,EAA2C,EAA3C,CAAD,GAAkD,KAAKjD,MAAL,CAAYsB,EAA7E;;AACA,cAAI4C,UAAU,CAACvE,UAAX,CAAsBiE,KAA1B,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAI,CAAC,sCAAsCQ,IAAtC,CAA2CF,UAAU,CAACvE,UAAX,CAAsBiE,KAAjE,CAAL,EAA8E;AAC5E;AAAA;AAAA,gCAAK,+CAAL,EAAsDM,UAAU,CAACvE,UAAX,CAAsBiE,KAA5E;AACD,aAFD,MAEO;AACL;AACA,qBAAOM,UAAU,CAACvE,UAAX,CAAsBiE,KAA7B;AACD;AACF;;AACDM,UAAAA,UAAU,CAACvE,UAAX,CAAsByB,MAAtB,GAA+BA,MAAM,CAACiD,QAAP,EAA/B;AACAH,UAAAA,UAAU,CAACvE,UAAX,CAAsB2E,IAAtB,GAA6B,KAAKtE,MAAL,CAAYuE,KAAzC;AACA,cAAMC,OAAO,GAAG;AAAA;AAAA,kCAAYN,UAAZ,EAAwBC,KAAK,CAACM,QAA9B,EAAwCN,KAAK,CAACnC,OAA9C,CAAhB;AACAwC,UAAAA,OAAO,CAACnB,WAAR,CAAoBc,KAAK,CAACb,KAA1B,EAAiCa,KAAK,CAACZ,CAAvC;AACAiB,UAAAA,OAAO,CAAChB,MAAR,CAAeC,GAAf,CAAmB;AAAErC,YAAAA;AAAF,WAAnB;AACAoD,UAAAA,OAAO,CAACE,MAAR,CAAejB,GAAf,CAAmB;AACjBkB,YAAAA,IAAI,EAAER,KAAK,CAACS,UADK;AAEjBC,YAAAA,KAAK,EAAEV,KAAK,CAACW;AAFI,WAAnB;;AAIA,eAAK9E,MAAL,CAAYK,KAAZ,CAAkB0B,OAAlB,CAA0ByC,OAA1B;;AACA,eAAKxE,MAAL,GAAc,KAAKA,MAAL,CAAYoC,eAAZ,EAAd;AACD;;AAEOK,QAAAA,eAAe,CAAClB,IAAD,EAAY;AACjC;AACA;AACA,cAAIjD,YAAY,CAACiD,IAAD,CAAZ,IAAsBA,IAAI,CAACwD,IAAL,KAAc,GAAxC,EAA6C;AAC3C,gBAAMZ,KAAK,GAAG,KAAKnE,MAAnB;AACA,gBAAMgF,QAAQ,GAAG;AAAA;AAAA,sCAAazD,IAAI,CAACwD,IAAlB,EAAwBZ,KAAK,CAACc,IAA9B,EAAoCd,KAAK,CAACI,KAA1C,EAAiDJ,KAAK,CAACnC,OAAvD,CAAjB,CAF2C,CAG3C;AACA;;AACAgD,YAAAA,QAAQ,CAAC3B,WAAT,CAAqBc,KAAK,CAACb,KAA3B,EAAkCa,KAAK,CAACZ,CAAxC;AACAyB,YAAAA,QAAQ,CAACN,MAAT,CAAgBjB,GAAhB,CAAoB;AAClBkB,cAAAA,IAAI,EAAER,KAAK,CAACS,UADM;AAElBC,cAAAA,KAAK,EAAEV,KAAK,CAACW;AAFK,aAApB,EAN2C,CAU3C;;AACA,iBAAK9E,MAAL,CAAYK,KAAZ,CAAkB0B,OAAlB,CAA0BiD,QAA1B;;AACA,iBAAKhF,MAAL,GAAc,KAAKA,MAAL,CAAYoC,eAAZ,EAAd;AACD;AACF;;AAEOM,QAAAA,iBAAiB,CAACnB,IAAD,EAAY;AACnC,cAAIjD,YAAY,CAACiD,IAAD,CAAhB,EAAwB;AACtB,gBAAM2D,MAAM,GAAG,KAAKlF,MAAL,CAAYsB,EAAZ,GAAiBC,IAAI,CAAC2D,MAArC;AACA,gBAAMC,UAAU,GAAG;AAAA;AAAA,8CAAiB,KAAKnF,MAAL,CAAYgC,OAA7B,CAAnB;AACAmD,YAAAA,UAAU,CAAC9B,WAAX,CAAuB,KAAKrD,MAAL,CAAYsD,KAAnC,EAA0C,CAA1C;AACA6B,YAAAA,UAAU,CAAC3B,MAAX,CAAkBC,GAAlB,CAAsB;AAAEC,cAAAA,KAAK,EAAEwB;AAAT,aAAtB;;AACA,iBAAKlF,MAAL,CAAYK,KAAZ,CAAkB0B,OAAlB,CAA0BoD,UAA1B;;AACA,iBAAKnF,MAAL,GAAc,KAAKA,MAAL,CAAYoC,eAAZ,EAAd;AACD;AACF;;AA/M6B,O","sourcesContent":["import { error, warn } from \"../Logger\";\nimport { classStateMapping } from \"./classStateMapping\";\nimport { State } from \"./RenderingState\";\nimport { styleStateMapping } from \"./styleStateMapping\";\nimport {\n  HPaddingNode,\n  SvgNode,\n  TextNode,\n  VerticalList,\n  VerticalListRow,\n} from \"./virtualCanvasNodes\";\nimport { Bounds } from \"./virtualCanvasNodes/VirtualCanvasNode\";\n\nconst IDENTIFIER_CLASS = \"enclosing\";\n\nvar katex: any;\n\nfunction isHtmlDomNode(obj: any) {\n  return \"classes\" in obj;\n}\nfunction isSymbolNode(obj: any) {\n  return obj instanceof katex.__domTree.SymbolNode;\n}\nfunction isSvgNode(obj: any) {\n  return obj instanceof katex.__domTree.SvgNode;\n}\nfunction hasChildNodes(obj: any) {\n  return \"children\" in obj;\n}\nfunction isClassName(name: string): name is keyof typeof classStateMapping {\n  return name in classStateMapping;\n}\nfunction isStyleName(name: string): name is keyof typeof styleStateMapping {\n  return name in styleStateMapping;\n}\n\n/**\n * NodeData represents the data returned from the build method\n */\nclass NodeData {\n  rootNode: VerticalList;\n\n  attributes: { baselineHeight: number; strutBounds: Bounds };\n\n  constructor(rootNode: VerticalList, attributes: { baselineHeight: number; strutBounds: Bounds }) {\n    this.rootNode = rootNode;\n    this.attributes = attributes;\n  }\n}\n\n/**\n * The NodeBuilder represents the entry point for all renderers.\n * The only public method available is the \"build method\".\n */\nexport class VirtualNodeBuilder {\n  private _latex: string;\n\n  private _options: any;\n\n  private _state: State;\n\n  private _enclosedClassIndexes: Record<string, number>;\n\n  /**\n   * Constructor\n   *\n   * @param  {String} latex - Sets the initial latex expression\n   * @param  {KatexOptions} options - Any options to apply to the expression\n   */\n  constructor(latex: string, options?: any) {\n    this._latex = latex;\n    this._options = options ?? {};\n    this._state = new State(State.defaultOptions(this._options));\n    this._enclosedClassIndexes = {};\n  }\n\n  /**\n   * Builds all the Virtual Nodes and retrieves the appropriate attributes\n   * for the given latex/options. This is the entry point for any renderer\n   * implementation.\n   */\n  async build() {\n    this._state = new State(State.defaultOptions(this._options));\n    const row = new VerticalListRow([]);\n    this._state.vlist.addRow(row);\n    this._enclosedClassIndexes = {};\n    let virtualDomTree;\n    try {\n      // @ts-ignore\n      if (!katex) katex = (await import(\"./katex/katex.js\")).default;\n      // @ts-ignore\n      virtualDomTree = katex.__renderToHTMLTree(this._latex, this._options).children[0];\n    } catch (err) {\n      error(err);\n      return;\n    }\n    this._createRenderingState(virtualDomTree);\n    const rootNode = this._state.vlist;\n    rootNode.align();\n    const attributes = this._getNodeAttributes(virtualDomTree, rootNode);\n    const nodeData = new NodeData(rootNode, attributes);\n    return nodeData;\n  }\n\n  private _getNodeAttributes(virtualDomTree: any, root: VerticalList) {\n    const strutBounds = root.getStrutBounds();\n    const attributes = {\n      baselineHeight: strutBounds.height - virtualDomTree.depth * this._state.em,\n      strutBounds,\n    };\n    return attributes;\n  }\n\n  private _createRenderingState(node: any) {\n    const parentState = this._state;\n    this._getGlyphDataFromNode(node);\n    if (hasChildNodes(node)) {\n      node.children.forEach((child: any) => this._createRenderingState(child));\n    }\n    this._resetState(parentState);\n  }\n\n  private _resetState(parentState: State) {\n    const vlist = this._state.vlist;\n    const parentVlist = parentState.vlist;\n    if (vlist !== parentVlist) {\n      vlist.setStretchyWidths();\n      vlist.align();\n      parentVlist.addCell(vlist);\n    }\n    if (this._state.classes !== parentState.classes) {\n      this._state.classes.forEach((classData) => {\n        this._enclosedClassIndexes[classData.name]++;\n      });\n    }\n    if (this._state.pstrut) {\n      parentState = parentState.withYShift(this._state.pstrut).withResetMargin();\n    }\n    this._state = parentState;\n  }\n\n  private _getGlyphDataFromNode(node: any) {\n    this._extractClassDataFromNode(node);\n    this._extractStyleDataFromNode(node);\n    this._createMSpace();\n    this._createSvgNode(node);\n    this._createTextNode(node);\n    this._createItalicNode(node);\n  }\n\n  private _extractClassDataFromNode(node: any) {\n    let nextClassIsEnclosedClass = false;\n    if (!isHtmlDomNode(node)) return;\n    node.classes.forEach((name: string) => {\n      if (name === IDENTIFIER_CLASS) {\n        nextClassIsEnclosedClass = true;\n      } else if (nextClassIsEnclosedClass) {\n        nextClassIsEnclosedClass = false;\n        const index = (this._enclosedClassIndexes[name] = this._enclosedClassIndexes[name] ?? 0);\n        this._state = this._state.withClass({ name, index });\n      } else {\n        const camelName = this._toCamelCase(name);\n        if (isClassName(camelName)) {\n          this._state = classStateMapping[camelName](this._state, node);\n        }\n      }\n    });\n  }\n\n  private _toCamelCase(str: string) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  }\n\n  private _createMSpace() {\n    if (this._state.mspace) {\n      const mspace = new HPaddingNode(this._state.classes);\n      mspace.setPosition(this._state.nextX, this._state.y);\n      mspace.bounds.set({ width: this._state.mspace * this._state.em });\n      this._state.vlist.addCell(mspace);\n      this._state = this._state.withResetMargin();\n    }\n  }\n\n  private _extractStyleDataFromNode(node: any) {\n    if (!isHtmlDomNode(node)) return;\n    for (const key in node.style) {\n      if (Object.prototype.hasOwnProperty.call(node.style, key)) {\n        const value = node.style[key];\n        if (isStyleName(key) && value != null) {\n          this._state = styleStateMapping[key](this._state, value);\n        }\n      }\n    }\n  }\n\n  private _createSvgNode(node: any) {\n    if (!isSvgNode(node)) return;\n\n    const virtualSvg = node;\n    const state = this._state;\n    const height = +virtualSvg.attributes.height.replace(\"em\", \"\") * this._state.em;\n    if (virtualSvg.attributes.style) {\n      // for `\\oiint`, the width gets specified in a style=\"xx.xxem\"\n      // attribute however this causes it to become rendered vert\n      // small as em isn't scaled properly; we can either remove the\n      // style attribute and let the externally-set height determine\n      // the bounds, or we can scale the em similar to what is done to\n      // the height earlier in this function. We do the former, while\n      // adding a console warning in case another (unexpected)\n      // condition is encountered - in which case the developer should\n      // handle this new case accordingly.\n      if (!/^width:[+-]?(?:[0-9]*[.])?[0-9]+em$/.test(virtualSvg.attributes.style)) {\n        warn(\"Unsupported SVG node explicit style attribute\", virtualSvg.attributes.style);\n      } else {\n        // width will be determined by height\n        delete virtualSvg.attributes.style;\n      }\n    }\n    virtualSvg.attributes.height = height.toString();\n    virtualSvg.attributes.fill = this._state.color;\n    const svgNode = new SvgNode(virtualSvg, state.minWidth, state.classes);\n    svgNode.setPosition(state.nextX, state.y);\n    svgNode.bounds.set({ height });\n    svgNode.margin.set({\n      left: state.marginLeft,\n      right: state.marginRight,\n    });\n    this._state.vlist.addCell(svgNode);\n    this._state = this._state.withResetMargin();\n  }\n\n  private _createTextNode(node: any) {\n    // The '' is NOT an empty string. It's some invisible character (U+200B)\n    // aka ZERO-WIDTH Space\n    if (isSymbolNode(node) && node.text !== \"​\") {\n      const state = this._state;\n      const textNode = new TextNode(node.text, state.font, state.color, state.classes);\n      // const width = parseFloat(node.style.width?.replace(\"em\", \"\") ?? \"0\") * state.em;\n      // const height = parseFloat(node.style.height?.replace(\"em\", \"\") ?? \"0\") * state.em;\n      textNode.setPosition(state.nextX, state.y);\n      textNode.margin.set({\n        left: state.marginLeft,\n        right: state.marginRight,\n      });\n      // textNode.setSize(width, height);\n      this._state.vlist.addCell(textNode);\n      this._state = this._state.withResetMargin();\n    }\n  }\n\n  private _createItalicNode(node: any) {\n    if (isSymbolNode(node)) {\n      const italic = this._state.em * node.italic;\n      const italicNode = new HPaddingNode(this._state.classes);\n      italicNode.setPosition(this._state.nextX, 0);\n      italicNode.bounds.set({ width: italic });\n      this._state.vlist.addCell(italicNode);\n      this._state = this._state.withResetMargin();\n    }\n  }\n}\n"]}