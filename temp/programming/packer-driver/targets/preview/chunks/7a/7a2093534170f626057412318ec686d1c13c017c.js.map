{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/UIDragSort.ts"],"names":["Layout","Node","TransformBit","UITransform","v2","_decorator","error","UIDrag","UIDrop","intersectionPercent","ccclass","property","UIDragSort","override","visible","_shadowMap","Map","container","_container","enableSnap","behaviour","DropBehaviour","ALLOW_MULTIPLE","value","onEnable","_addEventListeners","onDisable","_removeEventListeners","updateShadow","drag","shadow","has","get","node","name","layer","shadowUI","addComponent","dragUI","getComponent","width","height","setAnchorPoint","anchorPoint","addChild","updateLayout","set","on","EventType","TRANSFORM_CHANGED","type","POSITION","targetWorldPosition","worldPosition","NODE_DESTROYED","reset","__addDrag","_dragsInside","push","__removeDrag","delete","destroy","onLoad","child","children","DRAG_MOVE","_onRegisteredDragUpdate","DRAG_DID_END","off","__isInside","x","y","currentShadow","dragUITransform","bounds","getBoundingBoxToWorld","otherDrag","entries","shadowUITransform","shadowBounds","setSiblingIndex","getSiblingIndex","d","isDragging"],"mappings":"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","sourcesContent":["import { Layout, Node, TransformBit, UITransform, v2, _decorator } from \"cc\";\nimport { error } from \"./Logger\";\nimport { UIDrag } from \"./UIDrag\";\nimport { UIDrop } from \"./UIDrop\";\nimport { intersectionPercent } from \"./Utils\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"UIDragSort\")\nexport class UIDragSort extends UIDrop {\n  @property private _container: Layout | null = null;\n\n  private _shadowMap = new Map<UIDrag, Node>();\n\n  @property(Layout) get container() {\n    return this._container;\n  }\n\n  @property({ override: true, visible: false })\n  get enableSnap() {\n    return false;\n  }\n\n  @property({ override: true, visible: false })\n  get behaviour() {\n    return UIDragSort.DropBehaviour.ALLOW_MULTIPLE;\n  }\n\n  set container(value) {\n    this._container = value;\n  }\n\n  onEnable() {\n    this._addEventListeners();\n  }\n\n  onDisable() {\n    this._removeEventListeners();\n  }\n\n  updateShadow(drag: UIDrag) {\n    let shadow: Node;\n    if (this._shadowMap.has(drag)) {\n      shadow = this._shadowMap.get(drag)!;\n    } else {\n      shadow = new Node(drag.node.name + \"-shadow\");\n      shadow.layer = drag.node.layer;\n      const shadowUI = shadow.addComponent(UITransform);\n      const dragUI = drag.getComponent(UITransform);\n      shadowUI.width = dragUI!.width;\n      shadowUI.height = dragUI!.height;\n      shadowUI.setAnchorPoint(dragUI!.anchorPoint);\n\n      this.container!.node.addChild(shadow);\n      this.container!.updateLayout();\n\n      this._shadowMap.set(drag, shadow);\n      shadow.on(Node.EventType.TRANSFORM_CHANGED, (type: number) => {\n        if (type & TransformBit.POSITION) {\n          drag.targetWorldPosition = shadow.worldPosition;\n        }\n      });\n      shadow.on(Node.EventType.NODE_DESTROYED, () => {\n        drag.reset();\n      });\n    }\n\n    return shadow;\n  }\n\n  __addDrag(drag: UIDrag) {\n    this._dragsInside.push(drag);\n    const shadow = this.updateShadow(drag);\n    if (shadow == null) return false;\n    return true;\n  }\n\n  __removeDrag(drag: UIDrag) {\n    super.__removeDrag(drag);\n    const shadow = this._shadowMap.get(drag)!;\n    this._shadowMap.delete(drag);\n    shadow.destroy();\n  }\n\n  onLoad() {\n    super.onLoad();\n    if (!this.container) {\n      error(`UIDragSort: Requires a valid Layout container to be assigned.`);\n      return null;\n    }\n  }\n\n  private _addEventListeners() {\n    for (const child of this.node.children) {\n      const drag = child.getComponent(UIDrag);\n      if (drag) {\n        child.on(UIDrag.EventType.DRAG_MOVE, this._onRegisteredDragUpdate, this);\n        child.on(UIDrag.EventType.DRAG_DID_END, this._onRegisteredDragUpdate, this);\n      }\n    }\n  }\n\n  private _removeEventListeners() {\n    for (const child of this.node.children) {\n      const drag = child.getComponent(UIDrag);\n      if (drag) {\n        child.off(UIDrag.EventType.DRAG_MOVE, this._onRegisteredDragUpdate, this);\n        child.off(UIDrag.EventType.DRAG_DID_END, this._onRegisteredDragUpdate, this);\n      }\n    }\n  }\n\n  private _onRegisteredDragUpdate(drag: UIDrag) {\n    if (\n      !this._shadowMap.has(drag) &&\n      this.__isInside(v2(drag.targetWorldPosition.x, drag.targetWorldPosition.y))\n    ) {\n      this.updateShadow(drag);\n    }\n\n    const currentShadow = this._shadowMap.get(drag)!;\n\n    const dragUITransform = drag.getComponent(UITransform)!;\n    const bounds = dragUITransform.getBoundingBoxToWorld();\n    for (const [otherDrag, shadow] of this._shadowMap.entries()) {\n      if (otherDrag && otherDrag !== drag) {\n        const shadowUITransform = shadow.getComponent(UITransform)!;\n        const shadowBounds = shadowUITransform.getBoundingBoxToWorld();\n        if (intersectionPercent(bounds, shadowBounds) > 0.5) {\n          // rearrange the shadows by placing current at the overlapped.\n          currentShadow.setSiblingIndex(shadow.getSiblingIndex());\n          this.container!.updateLayout();\n          break;\n        }\n      }\n    }\n\n    for (const [d, shadow] of this._shadowMap.entries()) {\n      if (!d.isDragging) d.targetWorldPosition = shadow.worldPosition;\n    }\n  }\n}\n"]}