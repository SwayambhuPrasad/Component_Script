{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/SnapToSlot/SnapToSlot.ts"],"names":["_decorator","Component","Button","Node","Sprite","Color","find","AS","ReplicatedButton","ReplicatedUIDrag","UIDrag","UIDrop","ChangeBackground","CheckPrompt","ValidationEvent","ccclass","property","SnapToSlot","type","Number","String","correctCount","backGround","correctDrags","wrongDrags","chechstatus","awake","on","_setNavStatus","bind","DragOptions","forEach","dragOption","i","push","addComponent","node","EventType","DRAG_DID_END","getComponent","ButtonClick","play","check","active","scheduleOnce","afterDrop","CLICK","drag","condition","counter","j","answer","length","validUIDrop","DropSlots","changeColorAsFeedback","color","children","_callForPromts","onEnable","_navButtonVisibility","screen","ScreenTag","console","log","getComponentInChildren","showCorrect","ev","dispatchEvent","showTryAgain","afterCheck","worldPosition","resetScreenPoint","W","reset","_resetfeedback","R","child"],"mappings":"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","sourcesContent":["import { _decorator, Component, Button, Node, Sprite, SpriteFrame, instantiate, Prefab, Color, find } from 'cc';\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { ReplicatedUIDrag, UIDrag, UIDrop } from \"db://as_framework/scripts\";\nimport { ChangeBackground } from '../Background/ChangeBackground';\nimport { CheckPrompt } from '../Background/CheckPrompt';\nimport { ValidationEvent } from '../Background/ValidationEvent';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SnapToSlot')\nexport class SnapToSlot extends AS(Component) {\n\n  @property({ type: Number }) ScreenTag: Number = -1;\n  @property(UIDrop) DropSlots: UIDrop[] | null = [];\n  @property(UIDrag) DragOptions: UIDrag[] | null = [];\n  @property(Node) check: Node | null = null;\n  @property(String) answer: String[] | null = [];\n\n  private correctCount = [];\n  private backGround: Node = null;\n  private correctDrags = [];\n  private wrongDrags = [];\n  private chechstatus;\n  @property private changeColorAsFeedback = true;\n\n  awake() {\n    this.backGround = find(\"Canvas_new/BackGround\");\n    this.backGround.on(\"Screen\", this._setNavStatus.bind(this));\n\n\n    this.DragOptions.forEach((dragOption, i) => {\n      this.correctCount.push(-1);\n      dragOption.addComponent(ReplicatedUIDrag)\n      dragOption.node.on(UIDrag.EventType.DRAG_DID_END, () => {\n        this.backGround.getComponent(ChangeBackground).ButtonClick.play();\n        if (!this.check.active) this.check.active = true;\n        this.scheduleOnce(this.afterDrop, 0.05);\n      })\n    })\n    this.check.addComponent(ReplicatedButton)\n    this.check.on(Button.EventType.CLICK, () => {\n      this.backGround.getComponent(ChangeBackground).ButtonClick.play();\n      this.chechstatus = true;\n      this.wrongDrags = [];\n      this.correctDrags = [];\n      this.DragOptions.forEach((drag, i) => {\n\n        var condition = false;\n        let counter = 0;\n        for (let j = 0; j < this.answer[i].length; j++) {\n          if (drag.validUIDrop === this.DropSlots[this.answer[i][j]])\n            counter++;\n        }\n        if (counter > 0) condition = true\n        else condition = false;\n\n        if (condition) {\n          if (this.changeColorAsFeedback) drag.getComponent(Sprite).color = new Color(24, 186, 24, 255);\n          else {\n            drag.node.children[0].active = true;\n          }\n          this.correctCount[i] = 1;\n          this.correctDrags.push(drag)\n        }\n        else {\n          this.chechstatus = false;\n          this.correctCount[i] = -1;\n          if (this.changeColorAsFeedback) drag.getComponent(Sprite).color = new Color(255, 50, 50, 255);\n          else {\n            drag.node.children[1].active = true;\n          }\n          this.wrongDrags.push(drag)\n        }\n      })\n      this.check.active = false;\n      this._callForPromts();\n\n    })\n\n  }\n  onEnable() {\n    this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false, false, false)\n  }\n  //   onDisable(){\n  //     this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false,true,false)\n  //   }\n  _setNavStatus(screen) {\n    if (this.ScreenTag == screen) {\n      console.log(\"set\", screen)\n      this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false, true, false)\n    }\n  }\n\n  async _callForPromts() {\n\n    if (this.chechstatus) {\n      await this.backGround.getComponentInChildren(CheckPrompt).showCorrect();\n      const ev = new ValidationEvent(true, true)\n      this.node.dispatchEvent(ev)\n      this.check.active = true;\n    }\n    else {\n      await this.backGround.getComponentInChildren(CheckPrompt).showTryAgain();\n      const ev = new ValidationEvent(true, false)\n      this.node.dispatchEvent(ev)\n      this.check.active = true;\n    }\n    this.scheduleOnce(this.afterCheck, 1);\n  }\n\n  afterDrop() {\n\n    this.DragOptions.forEach((dragOption, i) => {\n      console.log(\"pos of \" + i + \" ---\" + dragOption.node.worldPosition + \"   reset   \" + dragOption.resetScreenPoint)\n      if (dragOption.validUIDrop == null) {\n        dragOption.getComponent(Sprite).color = new Color(255, 255, 255, 255);\n      }\n    })\n\n  }\n  afterCheck() {\n    this.wrongDrags.forEach((W) => {\n      W.reset();\n      if (this.changeColorAsFeedback) W.getComponent(Sprite).color = new Color(255, 255, 255, 255);\n      else { this._resetfeedback(); }\n    });\n    this.correctDrags.forEach((R) => {\n      if (this.changeColorAsFeedback) R.getComponent(Sprite).color = new Color(255, 255, 255, 255);\n      else { this._resetfeedback(); }\n    });\n  }\n\n  _resetfeedback() {\n    for (let i = 0; i < this.DragOptions.length; i++)\n      this.DragOptions[i].node.children.forEach((child) => {\n        child.active = false;\n      })\n  }\n\n\n\n\n\n\n\n\n}\n\n"]}