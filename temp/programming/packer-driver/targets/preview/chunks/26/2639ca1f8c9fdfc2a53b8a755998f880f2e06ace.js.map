{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/UIDrop.ts"],"names":["Component","Enum","Intersection2D","PolygonCollider2D","UITransform","v2","v3","_decorator","AS","error","warn","ccclass","property","disallowMultiple","requireComponent","BoundsType","DropBehaviour","UIDrop","tooltip","type","visible","boundsType","CIRCLE","_uiTransform","_parentUiTransform","_dragsInside","Array","_collider","enableSnap","_enableSnap","_boundsType","circleRadius","_circleRadius","behaviour","_behaviour","usePolygonCollider","_usePolygonCollider","dragsInside","value","__addDrag","drag","ALLOW_MULTIPLE","ALLOW_SINGLE","length","REPLACE","forEach","dragInside","resetDrop","push","node","emit","EventType","DRAG_ADDED","__removeDrag","index","indexOf","removed","splice","DRAG_REMOVED","__isInside","worldPoint","localPoint","convertToNodeSpaceAR","x","y","isInRect","getBoundingBox","contains","pointInPolygon","worldPoints","onLoad","getComponent","parent","RECT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,MAAAA,S,OAAAA,S;AACAC,MAAAA,I,OAAAA,I;AACAC,MAAAA,c,OAAAA,c;AACAC,MAAAA,iB,OAAAA,iB;AACAC,MAAAA,W,OAAAA,W;AACAC,MAAAA,E,OAAAA,E;AACAC,MAAAA,E,OAAAA,E;AAEAC,MAAAA,U,OAAAA,U;;AAEOC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;AAAOC,MAAAA,I,iBAAAA,I;;;;;;;OAGV;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,gBAArB;AAAuCC,QAAAA;AAAvC,O,GAA4DP,U;;iBAE7DQ,U;AAAAA,QAAAA,U,CAAAA,U;AAAAA,QAAAA,U,CAAAA,U;SAAAA,U,KAAAA,U;;iBAKAC,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;SAAAA,a,KAAAA,a;;wBASQC,M,WAHZN,OAAO,CAAC,QAAD,C,UAEPG,gBAAgB,CAACV,WAAD,C,UA6BdQ,QAAQ,CAAC;AAAEM,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAKRN,QAAQ,CAAC;AACRO,QAAAA,IAAI,EAAElB,IAAI,CAACc,UAAD,CADF;AAERG,QAAAA,OAAO,EAAE;AAFD,OAAD,C,UAQRN,QAAQ,CAAC;AACRM,QAAAA,OAAO,EACL,uFACA,0BAHM;;AAIRE,QAAAA,OAAO,GAAe;AACpB,iBAAO,KAAKC,UAAL,KAAoBN,UAAU,CAACO,MAAtC;AACD;;AANO,OAAD,C,UAYRV,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB,IAAI,CAACe,aAAD;AAAZ,OAAD,C,gBAvDVH,gB,+CADD,MAGaI,MAHb,SAG4B;AAAA;AAAA,oBAAGjB,SAAH,CAH5B,CAG0C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAoB9BuB,YApB8B,GAoBK,IApBL;AAAA,eAsB9BC,kBAtB8B,GAsBW,IAtBX;AAAA,eAwB9BC,YAxB8B,GAwBf,IAAIC,KAAJ,EAxBe;AAAA,eA0BhCC,SA1BgC,GA0BM,IA1BN;AAAA;;AA6B1B,YAAVC,UAAU,GAAG;AACf,iBAAO,KAAKC,WAAZ;AACD;;AAMa,YAAVR,UAAU,GAAG;AACf,iBAAO,KAAKS,WAAZ;AACD;;AAUe,YAAZC,YAAY,GAAG;AACjB,iBAAO,KAAKC,aAAZ;AACD;;AAGY,YAATC,SAAS,GAAG;AACd,iBAAO,KAAKC,UAAZ;AACD;;AAE+B,YAAlBC,kBAAkB,GAAG;AACjC,iBAAO,KAAKC,mBAAZ;AACD;;AAEc,YAAXC,WAAW,GAAG;AAChB,iBAAO,KAAKZ,YAAZ;AACD;;AAEa,YAAVG,UAAU,CAACU,KAAD,EAAQ;AACpB,eAAKT,WAAL,GAAmBS,KAAnB;AACD;;AAEa,YAAVjB,UAAU,CAACiB,KAAD,EAAQ;AACpB,eAAKR,WAAL,GAAmBQ,KAAnB;AACD;;AAEe,YAAZP,YAAY,CAACO,KAAD,EAAQ;AACtB,eAAKN,aAAL,GAAqBM,KAArB;AACD;;AAEY,YAATL,SAAS,CAACK,KAAD,EAAQ;AACnB,eAAKJ,UAAL,GAAkBI,KAAlB;AACD;;AAEqB,YAAlBH,kBAAkB,CAACG,KAAD,EAAQ;AAC5B,eAAKF,mBAAL,GAA2BE,KAA3B;AACD;AAED;AACF;AACA;;;AACEC,QAAAA,SAAS,CAACC,IAAD,EAAe;AACtB,kBAAQ,KAAKP,SAAb;AACE,iBAAKjB,aAAa,CAACyB,cAAnB;AACE;;AACF,iBAAKzB,aAAa,CAAC0B,YAAnB;AACE,kBAAI,KAAKjB,YAAL,CAAkBkB,MAAlB,GAA2B,CAA/B,EAAkC,OAAO,KAAP;AAClC;;AACF,iBAAK3B,aAAa,CAAC4B,OAAnB;AACE,mBAAKnB,YAAL,CAAkBoB,OAAlB,CAA2BC,UAAD,IAAgBN,IAAI,KAAKM,UAAT,IAAuBA,UAAU,CAACC,SAAX,EAAjE;;AACA,mBAAKtB,YAAL,GAAoB,EAApB;AACA;;AAEF;AACE;AAAA;AAAA,kCAAM,yBAAN;AACA;AAbJ;;AAgBA,eAAKA,YAAL,CAAkBuB,IAAlB,CAAuBR,IAAvB;;AACA,eAAKS,IAAL,CAAUC,IAAV,CAAejC,MAAM,CAACkC,SAAP,CAAiBC,UAAhC,EAA4C,IAA5C,EAAkDZ,IAAlD;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEa,QAAAA,YAAY,CAACb,IAAD,EAAe;AACzB,cAAMc,KAAK,GAAG,KAAK7B,YAAL,CAAkB8B,OAAlB,CAA0Bf,IAA1B,EAAgC,CAAhC,CAAd;;AACA,cAAIc,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,gBAAME,OAAO,GAAG,KAAK/B,YAAL,CAAkBgC,MAAlB,CAAyBH,KAAzB,EAAgC,CAAhC,CAAhB;;AACA,iBAAKL,IAAL,CAAUC,IAAV,CAAejC,MAAM,CAACkC,SAAP,CAAiBO,YAAhC,EAA8C,IAA9C,EAAoDF,OAAO,CAAC,CAAD,CAA3D;AACD;AACF;AAED;AACF;AACA;;;AACEG,QAAAA,UAAU,CAACC,UAAD,EAAmB;AAAA;;AAC3B,cAAMC,UAAU,GAAG,KAAKrC,kBAAL,CAAyBsC,oBAAzB,CACjBxD,EAAE,CAACsD,UAAU,CAACG,CAAZ,EAAeH,UAAU,CAACI,CAA1B,EAA6B,CAA7B,CADe,CAAnB;;AAGA,cAAIC,QAAQ,kDACV,KAAK1C,YADK,qBACV,mBAAmB2C,cAAnB,GAAoCC,QAApC,CAA6C9D,EAAE,CAACwD,UAAU,CAACE,CAAZ,EAAeF,UAAU,CAACG,CAA1B,CAA/C,CADU,oCACsE,KADlF;AAEA,cAAI,KAAK7B,kBAAL,IAA2B,KAAKR,SAApC,EACEsC,QAAQ,KAARA,QAAQ,GAAK/D,cAAc,CAACkE,cAAf,CAA8BR,UAA9B,EAA0C,KAAKjC,SAAL,CAAe0C,WAAzD,CAAL,CAAR;AACF,iBAAOJ,QAAP;AACD;;AAEDK,QAAAA,MAAM,GAAG;AACP,eAAK/C,YAAL,GAAoB,KAAKgD,YAAL,CAAkBnE,WAAlB,CAApB;AACA,eAAKoB,kBAAL,GAA0B,KAAKyB,IAAL,CAAUuB,MAAV,CAAkBD,YAAlB,CAA+BnE,WAA/B,CAA1B;AACA,eAAKuB,SAAL,GAAiB,KAAK4C,YAAL,CAAkBpE,iBAAlB,CAAjB;AAEA,cAAI,KAAKgC,kBAAL,IAA2B,CAAC,KAAKR,SAArC,EAAgD;AAAA;AAAA,4BAAK,4BAAL;AACjD;;AA9IuC,O,UACxBwB,S,GAAY;AAC1BC,QAAAA,UAAU,EAAE,YADc;AAE1BM,QAAAA,YAAY,EAAE;AAFY,O,UAKZ3C,U,GAAaA,U,UAEbC,a,GAAgBA,a,wFAE/BJ,Q;;;;;iBAA+B,I;;sFAE/BA,Q;;;;;iBAA+BG,UAAU,CAAC0D,I;;wFAE1C7D,Q;;;;;iBAAiC,C;;qFAEjCA,Q;;;;;iBAA8BI,aAAa,CAAC4B,O;;8FAE5ChC,Q;;;;;iBAAuC,K;;wrBAwCvCA,Q","sourcesContent":["import {\n  Component,\n  Enum,\n  Intersection2D,\n  PolygonCollider2D,\n  UITransform,\n  v2,\n  v3,\n  Vec2,\n  _decorator,\n} from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error, warn } from \"./Logger\";\nimport { UIDrag } from \"./UIDrag\";\n\nconst { ccclass, property, disallowMultiple, requireComponent } = _decorator;\n\nenum BoundsType {\n  RECT,\n  CIRCLE,\n}\n\nenum DropBehaviour {\n  ALLOW_MULTIPLE,\n  ALLOW_SINGLE,\n  REPLACE,\n}\n\n@ccclass(\"UIDrop\")\n@disallowMultiple\n@requireComponent(UITransform)\nexport class UIDrop extends AS(Component) {\n  static readonly EventType = {\n    DRAG_ADDED: \"drag-added\",\n    DRAG_REMOVED: \"drag-removed\",\n  };\n\n  static readonly BoundsType = BoundsType;\n\n  static readonly DropBehaviour = DropBehaviour;\n\n  @property private _enableSnap = true;\n\n  @property private _boundsType = BoundsType.RECT;\n\n  @property private _circleRadius = 0;\n\n  @property private _behaviour = DropBehaviour.REPLACE;\n\n  @property private _usePolygonCollider = false;\n\n  protected _uiTransform: UITransform | null = null;\n\n  protected _parentUiTransform: UITransform | null = null;\n\n  protected _dragsInside = new Array<UIDrag>();\n\n  private _collider: PolygonCollider2D | null = null;\n\n  @property({ tooltip: \"Enable if you want the valid drag data to snap to this node position.\" })\n  get enableSnap() {\n    return this._enableSnap;\n  }\n\n  @property({\n    type: Enum(BoundsType),\n    tooltip: \"The shape of bounds to use.\",\n  })\n  get boundsType() {\n    return this._boundsType;\n  }\n\n  @property({\n    tooltip:\n      \"The radius of the circle to use for bounds. If radius is greater than the UI Rect \" +\n      \"bounds, it may not work.\",\n    visible(this: UIDrop) {\n      return this.boundsType === BoundsType.CIRCLE;\n    },\n  })\n  get circleRadius() {\n    return this._circleRadius;\n  }\n\n  @property({ type: Enum(DropBehaviour) })\n  get behaviour() {\n    return this._behaviour;\n  }\n\n  @property get usePolygonCollider() {\n    return this._usePolygonCollider;\n  }\n\n  get dragsInside() {\n    return this._dragsInside;\n  }\n\n  set enableSnap(value) {\n    this._enableSnap = value;\n  }\n\n  set boundsType(value) {\n    this._boundsType = value;\n  }\n\n  set circleRadius(value) {\n    this._circleRadius = value;\n  }\n\n  set behaviour(value) {\n    this._behaviour = value;\n  }\n\n  set usePolygonCollider(value) {\n    this._usePolygonCollider = value;\n  }\n\n  /**\n   * @internal\n   */\n  __addDrag(drag: UIDrag) {\n    switch (this.behaviour) {\n      case DropBehaviour.ALLOW_MULTIPLE:\n        break;\n      case DropBehaviour.ALLOW_SINGLE:\n        if (this._dragsInside.length > 0) return false;\n        break;\n      case DropBehaviour.REPLACE:\n        this._dragsInside.forEach((dragInside) => drag !== dragInside && dragInside.resetDrop());\n        this._dragsInside = [];\n        break;\n\n      default:\n        error(\"Unkown Drop Behaviour!!\");\n        break;\n    }\n\n    this._dragsInside.push(drag);\n    this.node.emit(UIDrop.EventType.DRAG_ADDED, this, drag);\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  __removeDrag(drag: UIDrag) {\n    const index = this._dragsInside.indexOf(drag, 0);\n    if (index > -1) {\n      const removed = this._dragsInside.splice(index, 1);\n      this.node.emit(UIDrop.EventType.DRAG_REMOVED, this, removed[0]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  __isInside(worldPoint: Vec2) {\n    const localPoint = this._parentUiTransform!.convertToNodeSpaceAR(\n      v3(worldPoint.x, worldPoint.y, 0),\n    );\n    let isInRect =\n      this._uiTransform?.getBoundingBox().contains(v2(localPoint.x, localPoint.y)) ?? false;\n    if (this.usePolygonCollider && this._collider)\n      isInRect &&= Intersection2D.pointInPolygon(worldPoint, this._collider.worldPoints);\n    return isInRect;\n  }\n\n  onLoad() {\n    this._uiTransform = this.getComponent(UITransform);\n    this._parentUiTransform = this.node.parent!.getComponent(UITransform);\n    this._collider = this.getComponent(PolygonCollider2D);\n\n    if (this.usePolygonCollider && !this._collider) warn(\"No polygon collider found!\");\n  }\n}\n"]}