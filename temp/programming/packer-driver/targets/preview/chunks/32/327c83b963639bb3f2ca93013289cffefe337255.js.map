{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/GifPlayer.ts"],"names":["Component","Director","director","Sprite","SpriteFrame","_decorator","AS","error","ccclass","property","requireComponent","GifPlayer","_frames","_frameIndex","_frameDelay","_isInQueue","_isPlaying","_width","_height","_sprite","_tempCtx","_tempCanvas","_gifCanvas","_gifCtx","_frameImageData","url","_url","playOnLoad","_playOnLoad","frameIndex","value","_loadGif","play","_queueRenderFrame","pause","awake","getComponent","onLoad","onEnable","response","fetch","arrayBuffer","gif","default","gifParsed","parseGIF","frames","decompressFrames","document","createElement","getContext","width","dims","height","err","enabledInHierarchy","length","Promise","all","resolve","setTimeout","once","EVENT_BEFORE_DRAW","_renderFrame","frame","delay","disposalType","clearRect","createImageData","data","set","patch","putImageData","drawImage","left","top","spriteFrame","createWithImage"],"mappings":"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","sourcesContent":["import { Component, Director, director, Sprite, SpriteFrame, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\n\nconst { ccclass, property, requireComponent } = _decorator;\n\nvar gif: any;\n\n@ccclass(\"GifPlayer\")\n@requireComponent(Sprite)\nexport class GifPlayer extends AS(Component) {\n  @property _url = \"\";\n\n  @property _playOnLoad = true;\n\n  private _frames: any[] = [];\n\n  private _frameIndex = 0;\n\n  private _frameDelay = 0;\n\n  private _isInQueue = false;\n\n  private _isPlaying = false;\n\n  private _width: number = 0;\n\n  private _height: number = 0;\n\n  private _sprite: Sprite | null = null;\n\n  private _tempCtx: CanvasRenderingContext2D | null = null;\n\n  private _tempCanvas: HTMLCanvasElement | null = null;\n\n  private _gifCanvas: HTMLCanvasElement | null = null;\n\n  private _gifCtx: CanvasRenderingContext2D | null = null;\n\n  private _frameImageData: ImageData | null = null;\n\n  @property get url() {\n    return this._url;\n  }\n\n  @property get playOnLoad() {\n    return this._playOnLoad;\n  }\n\n  get frameIndex() {\n    return this._frameIndex;\n  }\n\n  set url(value) {\n    if (this._url === value) return;\n    this._url = value;\n    this._loadGif();\n  }\n\n  set playOnLoad(value) {\n    this._playOnLoad = value;\n  }\n\n  set frameIndex(value) {\n    this._frameIndex = value;\n  }\n\n  play() {\n    this._isPlaying = true;\n    this._queueRenderFrame();\n  }\n\n  pause() {\n    this._isPlaying = false;\n  }\n\n  awake() {\n    this._sprite = this.getComponent(Sprite);\n    if (!this._sprite) {\n      error(`GifSprite requires a Sprite component`);\n      return;\n    }\n\n    this._loadGif();\n  }\n\n  onLoad() {\n    if (this._playOnLoad) {\n      this.play();\n    }\n  }\n\n  onEnable() {\n    if (this._isPlaying) {\n      this._queueRenderFrame();\n    }\n  }\n\n  private async _loadGif() {\n    if (!this._url) {\n      error(`GifSprite requires a url`);\n      return;\n    }\n\n    try {\n      const response = await fetch(this._url);\n      const arrayBuffer = await response.arrayBuffer();\n      // @ts-ignore\n      if (!gif) gif = (await import(\"./gif.js\")).default as any;\n      const gifParsed = gif.parseGIF(arrayBuffer);\n      const frames = gif.decompressFrames(gifParsed, true);\n      // gif patch canvas\n      if (!this._tempCanvas || !this._tempCtx) {\n        this._tempCanvas = document.createElement(\"canvas\");\n        this._tempCtx = this._tempCanvas.getContext(\"2d\");\n      }\n      // full gif canvas\n      if (!this._gifCanvas || !this._gifCtx) {\n        this._gifCanvas = document.createElement(\"canvas\");\n        this._gifCtx = this._gifCanvas.getContext(\"2d\");\n      }\n\n      if (!this._tempCtx || !this._gifCtx) {\n        error(\"Failed to create canvas context\");\n        return;\n      }\n\n      this._width = this._gifCanvas.width = frames[0].dims.width;\n      this._height = this._gifCanvas.height = frames[0].dims.height;\n\n      this._frames = frames;\n\n      // debug(`Loaded ${this._frames.length} frames`, this._frames);\n    } catch (err) {\n      error(`Error loading gif ${this._url}`, err);\n    }\n  }\n\n  private async _queueRenderFrame() {\n    if (!this.enabledInHierarchy || !this._frames || this._frames.length <= 0 || this._isInQueue)\n      return;\n\n    this._isInQueue = true;\n    await Promise.all([\n      new Promise<void>((resolve) => setTimeout(resolve, this._frameDelay)),\n      new Promise<void>((resolve) =>\n        director.once(Director.EVENT_BEFORE_DRAW, () => {\n          this._renderFrame();\n          resolve();\n        }),\n      ),\n    ]);\n    this._isInQueue = false;\n    if (this._isPlaying) this._queueRenderFrame();\n  }\n\n  private _renderFrame() {\n    const frame = this._frames[this._frameIndex];\n    // debug(`Rendering frame ${this._frameIndex}`, frame);\n    this._frameDelay = frame.delay;\n\n    if (frame.disposalType === 2) {\n      this._gifCtx!.clearRect(0, 0, this._width, this._height);\n    }\n\n    const dims = frame.dims;\n    if (\n      !this._frameImageData ||\n      dims.width !== this._frameImageData.width ||\n      dims.height !== this._frameImageData.height\n    ) {\n      this._tempCanvas!.width = dims.width;\n      this._tempCanvas!.height = dims.height;\n      this._frameImageData = this._tempCtx!.createImageData(dims.width, dims.height);\n    }\n\n    // set the patch data as an override\n    this._frameImageData.data.set(frame.patch);\n\n    // draw the patch back over the canvas\n    this._tempCtx!.putImageData(this._frameImageData, 0, 0);\n    this._gifCtx!.drawImage(this._tempCanvas!, dims.left, dims.top);\n\n    this._sprite!.spriteFrame = SpriteFrame.createWithImage(this._gifCanvas!);\n    this._frameIndex++;\n    if (this._frameIndex >= this._frames.length) {\n      this._frameIndex = 0;\n    }\n  }\n}\n"]}