{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/RenderingState.ts"],"names":["State","VerticalList","SIZES","constructor","state","_y","_baseSize","_sizeIndex","_family","_variant","_weight","_vlist","_textAlign","_minWidth","_marginRight","_marginLeft","_delimSizing","_classes","_mspace","_pstrut","undefined","_color","Object","assign","classes","pstrut","mspace","nextX","vlist","getNextNodePlacement","marginLeft","marginRight","delimSizing","minWidth","color","textAlign","y","em","font","weight","variant","defaultOptions","options","baseSize","sizeIndex","alignment","defaultTextColor","withMarginLeft","withMarginRight","withResetMargin","withDelimSizing","withColor","withYShift","withFamily","family","withWeight","withVlist","table","withClass","classData","clonedClasses","forEach","val","push","withMSpace","withVariant","withSize","size","withTextAlign","align","withMinWidth","width","withPstrut"],"mappings":"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","sourcesContent":["import katex from \"./katex/katex.js\";\nimport { ClassData, ClassList, VerticalList } from \"./virtualCanvasNodes\";\n\nconst SIZES = [null, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];\n\nexport type IOptions = katex.KatexOptions & {\n  baseSize: number;\n  sizeIndex: number;\n  alignment: \"left\" | \"center\" | \"right\";\n  defaultTextColor: string;\n};\n\nexport class State {\n  private _y = 0;\n\n  private _baseSize = 44;\n\n  private _sizeIndex = 6;\n\n  private _family = \"KaTeX_Main\";\n\n  private _variant = \"normal\";\n\n  private _weight = \"normal\";\n\n  private _vlist = new VerticalList(\"center\", 0, []);\n\n  private _textAlign: \"left\" | \"center\" | \"right\" = \"left\";\n\n  private _minWidth = 0;\n\n  private _marginRight = 0;\n\n  private _marginLeft = 0;\n\n  private _delimSizing = false;\n\n  private _classes: ClassList = [];\n\n  private _mspace = 0;\n\n  private _pstrut: number | undefined = undefined;\n\n  private _color = \"black\";\n\n  constructor(state: Partial<State> = {}) {\n    Object.assign(this, state);\n  }\n\n  get classes() {\n    return this._classes;\n  }\n\n  get pstrut() {\n    return this._pstrut;\n  }\n\n  get mspace() {\n    return this._mspace;\n  }\n\n  get nextX() {\n    return this.vlist.getNextNodePlacement() + this.marginLeft;\n  }\n\n  get marginLeft() {\n    return this._marginLeft;\n  }\n\n  get marginRight() {\n    return this._marginRight;\n  }\n\n  get delimSizing() {\n    return this._delimSizing;\n  }\n\n  get minWidth() {\n    return this._minWidth;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get textAlign() {\n    return this._textAlign;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get vlist() {\n    return this._vlist;\n  }\n\n  get em() {\n    return this._baseSize * (SIZES[this._sizeIndex] ?? 0);\n  }\n\n  get font() {\n    const weight = this._weight ? `${this._weight} ` : \"\";\n    const variant = this._variant ? `${this._variant} ` : \"\";\n    const font = `${variant}${weight}${this.em}px ${this._family}`;\n    return font;\n  }\n\n  static defaultOptions(options: Partial<IOptions>): State {\n    const state = new State();\n    state._baseSize = options.baseSize ?? 44;\n    state._sizeIndex = options.sizeIndex ?? 6;\n    state._vlist = new VerticalList(options.alignment ?? \"center\", 0, []);\n    state._color = options.defaultTextColor ?? \"black\";\n\n    return state;\n  }\n\n  withMarginLeft(marginLeft: number) {\n    const state = new State(this);\n    state._marginLeft += marginLeft;\n    return state;\n  }\n\n  withMarginRight(marginRight: number) {\n    const state = new State(this);\n    state._marginRight += marginRight;\n    return state;\n  }\n\n  withResetMargin() {\n    const state = new State(this);\n    state._marginRight = 0;\n    state._marginLeft = 0;\n    return state;\n  }\n\n  withDelimSizing() {\n    const state = new State(this);\n    state._delimSizing = true;\n    return state;\n  }\n\n  withColor(color: string) {\n    const state = new State(this);\n    state._color = color;\n    return state;\n  }\n\n  withYShift(y: number) {\n    const state = new State(this);\n    state._y += y;\n    return state;\n  }\n\n  withFamily(family: string) {\n    const state = new State(this);\n    state._family = family;\n    return state;\n  }\n\n  withWeight(weight: string) {\n    const state = new State(this);\n    state._weight = weight;\n    return state;\n  }\n\n  withVlist(table: VerticalList) {\n    const state = new State(this);\n    state._vlist = table;\n    return state;\n  }\n\n  withClass(classData: ClassData) {\n    const state = new State(this);\n    const clonedClasses = [];\n    state._classes.forEach((val) => clonedClasses.push(Object.assign({}, val)));\n    clonedClasses.push(classData);\n    state._classes = clonedClasses;\n    return state;\n  }\n\n  withMSpace(mspace: number) {\n    const state = new State(this);\n    state._mspace = mspace;\n    return state;\n  }\n\n  withVariant(variant: string) {\n    const state = new State(this);\n    state._variant = variant;\n    return state;\n  }\n\n  withSize(size: number) {\n    const state = new State(this);\n    state._sizeIndex = size;\n    return state;\n  }\n\n  withTextAlign(align: \"left\" | \"center\" | \"right\") {\n    const state = new State(this);\n    state._textAlign = align;\n    return state;\n  }\n\n  withMinWidth(width: number) {\n    const state = new State(this);\n    state._minWidth = width;\n    return state;\n  }\n\n  withPstrut(pstrut: number) {\n    const state = new State(this);\n    state._pstrut = pstrut;\n    return state;\n  }\n}\n"]}