{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/UIDrop.ts"],"names":["Component","Enum","Intersection2D","PolygonCollider2D","rect","UITransform","_decorator","AS","error","warn","ccclass","property","disallowMultiple","requireComponent","BoundsType","DropBehaviour","UIDrop","tooltip","type","visible","boundsType","CIRCLE","_uiTransform","_dragsInside","Array","_collider","_replacedNode","enableSnap","_enableSnap","_boundsType","circleRadius","_circleRadius","behaviour","_behaviour","usePolygonCollider","_usePolygonCollider","replacedNode","dragsInside","value","__addDrag","drag","ALLOW_MULTIPLE","ALLOW_SINGLE","length","REPLACE","forEach","dragInside","push","resetDrop","__removeDrag","index","indexOf","splice","__isInside","worldPoint","isInRect","getBoundingBoxToWorld","contains","pointInPolygon","worldPoints","__getWorldBounds","onLoad","getComponent","RECT"],"mappings":"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","sourcesContent":["import {\n  Component,\n  Enum,\n  Intersection2D,\n  PolygonCollider2D,\n  rect,\n  UITransform,\n  Vec2,\n  _decorator,\n} from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error, warn } from \"./Logger\";\nimport { UIDrag } from \"./UIDrag\";\n\nconst { ccclass, property, disallowMultiple, requireComponent } = _decorator;\n\nenum BoundsType {\n  RECT,\n  CIRCLE,\n}\n\nenum DropBehaviour {\n  ALLOW_MULTIPLE,\n  ALLOW_SINGLE,\n  REPLACE,\n}\n\n@ccclass(\"UIDrop\")\n@disallowMultiple\n@requireComponent(UITransform)\nexport class UIDrop extends AS(Component) {\n  static readonly BoundsType = BoundsType;\n\n  static readonly DropBehaviour = DropBehaviour;\n\n  @property private _enableSnap = true;\n\n  @property private _boundsType = BoundsType.RECT;\n\n  @property private _circleRadius = 0;\n\n  @property private _behaviour = DropBehaviour.REPLACE;\n\n  @property private _usePolygonCollider = false;\n\n  private _uiTransform: UITransform | null = null;\n\n  private _dragsInside = new Array<UIDrag>();\n\n  private _collider: PolygonCollider2D | null = null;\n\n  private _replacedNode: UIDrag[] = [];\n\n  @property({ tooltip: \"Enable if you want the valid drag data to snap to this node position.\" })\n  get enableSnap() {\n    return this._enableSnap;\n  }\n\n  @property({\n    type: Enum(BoundsType),\n    tooltip: \"The shape of bounds to use.\",\n  })\n  get boundsType() {\n    return this._boundsType;\n  }\n\n  @property({\n    tooltip:\n      \"The radius of the circle to use for bounds. If radius is greater than the UI Rect \" +\n      \"bounds, it may not work.\",\n    visible(this: UIDrop) {\n      return this.boundsType === BoundsType.CIRCLE;\n    },\n  })\n  get circleRadius() {\n    return this._circleRadius;\n  }\n\n  @property({ type: Enum(DropBehaviour) })\n  get behaviour() {\n    return this._behaviour;\n  }\n\n  @property get usePolygonCollider() {\n    return this._usePolygonCollider;\n  }\n  get replacedNode() {\n    return this._replacedNode;\n  }\n\n  get dragsInside() {\n    return this._dragsInside;\n  }\n\n  set enableSnap(value) {\n    this._enableSnap = value;\n  }\n\n  set boundsType(value) {\n    this._boundsType = value;\n  }\n\n  set circleRadius(value) {\n    this._circleRadius = value;\n  }\n\n  set behaviour(value) {\n    this._behaviour = value;\n  }\n\n  set usePolygonCollider(value) {\n    this._usePolygonCollider = value;\n  }\n\n  /**\n   * @internal\n   */\n  __addDrag(drag: UIDrag) {\n    switch (this.behaviour) {\n      case DropBehaviour.ALLOW_MULTIPLE:\n        break;\n      case DropBehaviour.ALLOW_SINGLE:\n        if (this._dragsInside.length > 0) return false;\n        break;\n      case DropBehaviour.REPLACE:\n        this._replacedNode = [];\n        this._dragsInside.forEach((dragInside) => {\n          this._replacedNode.push(dragInside);\n          drag !== dragInside && dragInside.resetDrop();\n        });\n        this._dragsInside = [];\n        break;\n\n      default:\n        error(\"Unkown Drop Behaviour!!\");\n        break;\n    }\n\n    this._dragsInside.push(drag);\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  __removeDrag(drag: UIDrag) {\n    const index = this._dragsInside.indexOf(drag, 0);\n    if (index > -1) {\n      this._dragsInside.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  __isInside(worldPoint: Vec2) {\n    let isInRect = this._uiTransform?.getBoundingBoxToWorld().contains(worldPoint) ?? false;\n    if (this.usePolygonCollider && this._collider)\n      isInRect &&= Intersection2D.pointInPolygon(worldPoint, this._collider.worldPoints);\n    return isInRect;\n  }\n\n  /**\n   * @internal\n   */\n  __getWorldBounds() {\n    return this._uiTransform?.getBoundingBoxToWorld() ?? rect();\n  }\n\n  onLoad() {\n    this._uiTransform = this.getComponent(UITransform);\n    this._collider = this.getComponent(PolygonCollider2D);\n\n    if (this.usePolygonCollider && !this._collider) warn(\"No polygon collider found!\");\n  }\n}\n"]}