{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/virtualCanvasNodes/VirtualCanvasNode.ts"],"names":["Bounds","Margin","VirtualCanvasNode","constructor","x","y","width","height","clone","extend","bounds","set","other","left","right","classes","margin","setPosition","setSize","w","h","getBounds"],"mappings":"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","sourcesContent":["import { ClassList } from \".\";\n\nexport class Bounds {\n  x: number;\n\n  y: number;\n\n  width: number;\n\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x ?? 0;\n    this.y = y ?? 0;\n    this.width = width ?? 0;\n    this.height = height ?? 0;\n  }\n\n  clone() {\n    return new Bounds(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Extends the current bounds to account for the passed in Rect or Point.\n   * @param  {Object} bounds - Object with x and y, with optional width/height\n   */\n  extend(bounds: Partial<Bounds> & Pick<Bounds, \"x\" | \"y\">) {\n    const { x, y, width = 0, height = 0 } = bounds;\n    if (x < this.x) {\n      this.width += this.x - x;\n      this.x = x;\n    }\n    if (y < this.y) {\n      this.height += this.y - y;\n      this.y = y;\n    }\n    if (x + width > this.x + this.width) {\n      this.width = x + width - this.x;\n    }\n    if (y + height > this.y + this.height) {\n      this.height = y + height - this.y;\n    }\n  }\n\n  set(other: Partial<Bounds>) {\n    this.x = other.x ?? this.x;\n    this.y = other.y ?? this.y;\n    this.width = other.width ?? this.width;\n    this.height = other.height ?? this.height;\n  }\n}\n\nclass Margin {\n  left: number;\n\n  right: number;\n\n  constructor() {\n    this.left = 0;\n    this.right = 0;\n  }\n\n  set(other: Partial<Margin>) {\n    this.left = other.left ?? this.left;\n    this.right = other.right ?? this.right;\n  }\n}\n\n/**\n * A Virtual Node represents the interface for a all sub Nodes.\n * They are simple models, which allow the data to be translated to most\n * rendering platforms.\n *\n * @abstract\n */\nexport abstract class VirtualCanvasNode {\n  margin: Margin;\n\n  bounds: Bounds;\n\n  classes: ClassList;\n\n  constructor(classes: ClassList) {\n    this.margin = new Margin();\n    this.bounds = new Bounds();\n    this.classes = classes ?? [];\n  }\n\n  /**\n   * Returns the type of the VirtualCanvasNode\n   *\n   * @abstract\n   * @return {string}\n   */\n  abstract get type(): string;\n\n  /**\n   * Sets the node's x/y position\n   */\n  setPosition(x: number, y: number) {\n    this.bounds.x = x;\n    this.bounds.y = y;\n  }\n\n  /**\n   * Sets the node's size.\n   * @param w Width\n   * @param h Height\n   */\n  setSize(w: number, h: number) {\n    this.bounds.width = w;\n    this.bounds.height = h;\n  }\n\n  /**\n   * Gets the abolsute bounds of this node relative to (0, 0)\n   * @return {Bounds}\n   */\n  getBounds(): Bounds {\n    return this.bounds;\n  }\n}\n"]}