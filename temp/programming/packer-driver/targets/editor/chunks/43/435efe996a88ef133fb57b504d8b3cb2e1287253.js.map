{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Translations.ts"],"names":["Translations","Director","director","EDITOR","SimpleEvent","debug","error","Papa","Polyglot","parse","_polyglotInstance","_languagePhrases","_currentLanguage","_translationsLoadedEvent","_resourcePath","_enabled","_isInitQueued","currentLanguage","translationsLoadedEvent","expose","resourcePath","enabled","value","_queueInit","t","key","options","once","EVENT_BEFORE_UPDATE","_init","response","fetch","text","phrases","_parseLanguagePhrases","_initializePolyglot","err","trigger","results","header","skipEmptyLines","errors","length","e","type","row","code","message","Error","meta","fields","languages","slice","lang","langPhrases","entry","data","phrase","replace","locale","allowMissing","onMissingKey","_options","i18n"],"mappings":"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","sourcesContent":["import { Director, director } from \"cc\";\nimport { EDITOR } from \"cc/env\";\nimport { SimpleEvent } from \"./LiteEvent\";\nimport { debug, error } from \"./Logger\";\nimport Papa from \"./papaparse.js\";\nimport Polyglot from \"./polyglot.js\";\nconst { parse } = Papa;\n\nclass Translations {\n  private _polyglotInstance: Polyglot | null = null;\n\n  private _languagePhrases: Record<string, Record<string, string>> = {};\n\n  private _currentLanguage = \"US\";\n\n  private _translationsLoadedEvent = new SimpleEvent<void>();\n\n  private _resourcePath = \"./i18n/languagePhrases.csv\";\n\n  private _enabled = false;\n\n  private _isInitQueued = false;\n\n  /**\n   * The currently loaded language id.\n   * The value should be the same as in your translations data file.\n   */\n  get currentLanguage() {\n    return this._currentLanguage;\n  }\n\n  get translationsLoadedEvent() {\n    return this._translationsLoadedEvent.expose();\n  }\n\n  get resourcePath() {\n    return this._resourcePath;\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set currentLanguage(value) {\n    if (value === this._currentLanguage) return;\n    this._currentLanguage = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  set resourcePath(value) {\n    if (value === this._resourcePath) return;\n    this._resourcePath = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  set enabled(value) {\n    if (this._enabled === value) return;\n    this._enabled = value;\n    if (this._enabled) this._queueInit();\n  }\n\n  /**\n   * This method takes a text key as input, and return the localized string\n   * Please read https://github.com/airbnb/polyglot.js for details\n   * @param key The key string to get the phrase.\n   * @param options Interpolation options.\n   * @returns The translated phrase in the current language or empty string if failed.\n   * @example\n   * var myText = i18n.t('MY_TEXT_KEY');\n   * // if your data source is defined as\n   * // {\"hello_name\": \"Hello, %{name}\"}\n   * // you can use the following to interpolate the text\n   * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n   */\n  t(key: string, options?: Polyglot.InterpolationOptions) {\n    if (this._polyglotInstance) {\n      return this._polyglotInstance.t(key, options);\n    }\n\n    return \"\";\n  }\n\n  private _queueInit() {\n    if (EDITOR || this._isInitQueued) return;\n    this._isInitQueued = true;\n    director.once(Director.EVENT_BEFORE_UPDATE, this._init, this);\n  }\n\n  private async _init() {\n    try {\n      const response = await fetch(this._resourcePath);\n      const text = await response.text();\n      const phrases = this._parseLanguagePhrases(text);\n      this._languagePhrases = phrases;\n      debug(\"Loaded phrases:\", phrases);\n      this._initializePolyglot();\n    } catch (err) {\n      error(err);\n      return;\n    } finally {\n      this._isInitQueued = false;\n    }\n\n    this._translationsLoadedEvent.trigger();\n  }\n\n  private _parseLanguagePhrases(text: string) {\n    const results = parse<Record<string, string>>(text, {\n      header: true,\n      skipEmptyLines: true,\n    });\n    if (results.errors.length > 0) {\n      let err = \"\";\n      for (const e of results.errors) {\n        err += `CSV ${e.type} error at row ${e.row}: ${e.code}\\n\\t${e.message}`;\n        err += \"\\n\";\n      }\n      throw new Error(err);\n    }\n\n    if (results.meta.fields == null) {\n      throw new Error(\"CSV parsing failed!\");\n    }\n\n    const phrases: Record<string, Record<string, string>> = {};\n    const languages = results.meta.fields!.slice(1);\n    for (const lang of languages) {\n      const langPhrases: Record<string, string> = {};\n      for (const entry of results.data) {\n        const key = entry.key;\n        const phrase = entry[lang];\n        langPhrases[key] = phrase;\n      }\n      phrases[lang] = langPhrases;\n    }\n\n    return phrases;\n  }\n\n  private _initializePolyglot() {\n    const phrases = this._languagePhrases[this._currentLanguage];\n    if (phrases == null) {\n      throw new Error(\"The phrases for the current language is not found.\");\n    }\n\n    if (this._polyglotInstance) {\n      this._polyglotInstance.replace(phrases);\n    } else {\n      this._polyglotInstance = new Polyglot({\n        phrases: phrases,\n        locale: this._currentLanguage,\n        allowMissing: true,\n        onMissingKey: (key, _options, locale) => {\n          error(`Missing data for ${key} in ${locale}!`);\n          return \"\";\n        },\n        // TODO: pluralization rules.\n        // pluralRules: {}\n      });\n    }\n  }\n}\n\nexport const i18n = new Translations();\n"]}