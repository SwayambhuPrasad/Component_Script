{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/virtualCanvasNodes/VerticalList.ts"],"names":["VerticalList","VerticalListRow","VirtualContainerNode","VirtualStretchyNode","constructor","alignment","rowStart","classes","strutBounds","bounds","clone","type","typeId","getNextNodePlacement","x","margin","left","lastRow","last","lastNode","getBounds","width","right","setStretchyWidths","nodes","forEach","rowNode","node","listWidth","align","leftAlign","centerAlign","rightAlign","addRow","row","addNode","addCell","getStrutBounds","extend","center"],"mappings":"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","sourcesContent":["import { ClassList } from \".\";\nimport { VerticalListRow } from \"./VerticalListRow\";\nimport { Bounds, VirtualCanvasNode } from \"./VirtualCanvasNode\";\nimport { VirtualContainerNode } from \"./VirtualContainerNode\";\nimport { VirtualStretchyNode } from \"./VirtualStretchyNode\";\n\ntype Alignment = \"left\" | \"center\" | \"right\";\n\n/**\n * The VerticalList class represents a 1D array of VerticalListRow's\n * which can be horizontally aligned left, right, or center\n *\n * @type {VerticalList}\n */\nexport class VerticalList extends VirtualContainerNode {\n  static readonly typeId = \"VerticalList\";\n\n  alignment: Alignment;\n\n  rowStart: number;\n\n  strutBounds: Bounds;\n\n  constructor(alignment: Alignment, rowStart: number, classes: ClassList) {\n    super(classes);\n    this.alignment = alignment;\n    this.rowStart = rowStart;\n    this.strutBounds = this.bounds.clone();\n  }\n\n  /**\n   * Returns the type of the VirtualCanvasNode\n   *\n   * @return {string}\n   */\n  get type(): string {\n    return VerticalList.typeId;\n  }\n\n  /**\n   * Returns the x coordinate of the next node to be placed into the List.\n   * @return {number}\n   */\n  getNextNodePlacement(): number {\n    let x = this.rowStart + this.margin.left;\n    const lastRow = this.last();\n    // Assuming this is the first node in the List set x a default.\n    if (lastRow == null || !(lastRow instanceof VirtualContainerNode)) return x;\n    const lastNode = lastRow.last();\n    if (lastNode == null) return x;\n\n    const bounds = lastNode.getBounds();\n    x = bounds.x + bounds.width + lastNode.margin.right;\n\n    return x;\n  }\n\n  /**\n   * Sets the width of the stretchy nodes contained within.\n   */\n  setStretchyWidths() {\n    const width = this.getBounds().width;\n    this.nodes.forEach((rowNode) => {\n      if (!(rowNode instanceof VirtualContainerNode)) return;\n      rowNode.nodes.forEach((node) => {\n        if (node instanceof VirtualStretchyNode) {\n          node.listWidth = width;\n        }\n      });\n    });\n  }\n\n  /**\n   * Aligns the List based on the specified alignment\n   */\n  align() {\n    switch (this.alignment) {\n      case \"left\":\n        this.leftAlign();\n        break;\n      case \"center\":\n        this.centerAlign();\n        break;\n      case \"right\":\n        this.rightAlign();\n        break;\n    }\n  }\n\n  /**\n   * Adds a row to the List.\n   */\n  addRow(row: VerticalListRow) {\n    this.addNode(row);\n  }\n\n  /**\n   * Adds a VirtualCanvasNode to current row\n   * @param {VirtualCanvasNode}\n   */\n  addCell(node: VirtualCanvasNode) {\n    const lastRow = this.last() as VerticalListRow;\n    lastRow.addNode(node);\n  }\n\n  getStrutBounds() {\n    this.nodes.forEach((row) => {\n      if (!(row instanceof VerticalListRow)) return;\n      if (row.strutBounds) this.strutBounds.extend(row.strutBounds);\n    });\n    return this.strutBounds;\n  }\n\n  centerAlign() {\n    const bounds = this.getBounds();\n    const center = bounds.x + bounds.width / 2;\n    this.nodes.forEach((row) => {\n      if (!(row instanceof VerticalListRow)) return;\n      row.centerAlign(center);\n    });\n  }\n\n  rightAlign() {\n    const bounds = this.getBounds();\n    const right = bounds.x + bounds.width;\n    this.nodes.forEach((row) => {\n      if (!(row instanceof VerticalListRow)) return;\n      row.rightAlign(right);\n    });\n  }\n\n  leftAlign() {\n    const bounds = this.getBounds();\n    const left = bounds.x;\n    this.nodes.forEach((row) => {\n      if (!(row instanceof VerticalListRow)) return;\n      row.leftAlign(left);\n    });\n  }\n}\n"]}