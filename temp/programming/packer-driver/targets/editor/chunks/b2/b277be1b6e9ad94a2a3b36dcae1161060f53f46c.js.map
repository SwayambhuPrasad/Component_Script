{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Translations.ts"],"names":["Translations","EDITOR","SimpleEvent","error","Papa","Polyglot","parse","_polyglotInstance","_languagePhrases","_currentLanguage","_translationsLoadedEvent","_resourcePath","_enabled","currentLanguage","translationsLoadedEvent","expose","resourcePath","enabled","value","_initializePolyglot","trigger","_init","t","key","options","text","_loadLanguagePhrases","phrases","_parseLanguagePhrases","response","fetch","ok","statusText","results","header","skipEmptyLines","errors","length","err","e","type","row","code","message","meta","fields","languages","slice","lang","langPhrases","entry","data","phrase","replace","locale","allowMissing","onMissingKey","_options","i18n"],"mappings":"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","sourcesContent":["import { EDITOR } from \"cc/env\";\nimport { SimpleEvent } from \"./LiteEvent\";\nimport { error } from \"./Logger\";\nimport Papa from \"./papaparse.js\";\nimport Polyglot from \"./polyglot.js\";\nconst { parse } = Papa;\n\nclass Translations {\n  private _polyglotInstance: Polyglot | null = null;\n\n  private _languagePhrases: Record<string, Record<string, string>> = {};\n\n  private _currentLanguage = \"US\";\n\n  private _translationsLoadedEvent = new SimpleEvent<void>();\n\n  private _resourcePath = \"./i18n/languagePhrases.csv\";\n\n  private _enabled = false;\n\n  /**\n   * The currently loaded language id.\n   * The value should be the same as in your translations data file.\n   */\n  get currentLanguage() {\n    return this._currentLanguage;\n  }\n\n  get translationsLoadedEvent() {\n    return this._translationsLoadedEvent.expose();\n  }\n\n  get resourcePath() {\n    return this._resourcePath;\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set currentLanguage(value) {\n    if (value === this._currentLanguage) return;\n    this._currentLanguage = value;\n    if (this._enabled) {\n      this._initializePolyglot();\n      this._translationsLoadedEvent.trigger();\n    }\n  }\n\n  set resourcePath(value) {\n    if (value === this._resourcePath) return;\n    this._resourcePath = value;\n    if (this._enabled) this._init();\n  }\n\n  set enabled(value) {\n    if (this._enabled === value) return;\n    this._enabled = value;\n    if (this._enabled) this._init();\n  }\n\n  /**\n   * This method takes a text key as input, and return the localized string\n   * Please read https://github.com/airbnb/polyglot.js for details\n   * @param key The key string to get the phrase.\n   * @param options Interpolation options.\n   * @returns The translated phrase in the current language or empty string if failed.\n   * @example\n   * var myText = i18n.t('MY_TEXT_KEY');\n   * // if your data source is defined as\n   * // {\"hello_name\": \"Hello, %{name}\"}\n   * // you can use the following to interpolate the text\n   * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n   */\n  t(key: string, options?: Polyglot.InterpolationOptions) {\n    if (this._polyglotInstance) {\n      return this._polyglotInstance.t(key, options);\n    }\n\n    return \"\";\n  }\n\n  private async _init() {\n    if (EDITOR) return;\n    const text = await this._loadLanguagePhrases();\n    const phrases = this._parseLanguagePhrases(text);\n    this._languagePhrases = phrases;\n    this._initializePolyglot();\n    this._translationsLoadedEvent.trigger();\n    // TODO: version mismatch handling.\n  }\n\n  private async _loadLanguagePhrases() {\n    const response = await fetch(this._resourcePath);\n    if (!response.ok) {\n      error(`Error on fetching ${this._resourcePath}: ${response.statusText}`);\n    }\n\n    return response.text();\n  }\n\n  private _parseLanguagePhrases(text: string) {\n    const results = parse<Record<string, string>>(text, {\n      header: true,\n      skipEmptyLines: true,\n    });\n    if (results.errors.length > 0) {\n      let err = \"\";\n      for (const e of results.errors) {\n        err += `CSV ${e.type} error at row ${e.row}: ${e.code}\\n\\t${e.message}`;\n        err += \"\\n\";\n      }\n      error(err);\n    }\n\n    if (results.meta.fields == null) {\n      error(\"CSV parsing failed!\");\n    }\n\n    const phrases: Record<string, Record<string, string>> = {};\n    const languages = results.meta.fields!.slice(1);\n    for (const lang of languages) {\n      const langPhrases: Record<string, string> = {};\n      for (const entry of results.data) {\n        const key = entry.key;\n        const phrase = entry[lang];\n        langPhrases[key] = phrase;\n      }\n      phrases[lang] = langPhrases;\n    }\n\n    return phrases;\n  }\n\n  private _initializePolyglot() {\n    const phrases = this._languagePhrases[this._currentLanguage];\n    if (phrases == null) {\n      error(`The phrases for '${this._currentLanguage}' is not found.`);\n    }\n\n    if (this._polyglotInstance) {\n      this._polyglotInstance.replace(phrases);\n    } else {\n      this._polyglotInstance = new Polyglot({\n        phrases: phrases,\n        locale: this._currentLanguage,\n        allowMissing: true,\n        onMissingKey: (key, _options, locale) => {\n          error(`Missing data for ${key} in ${locale}!`);\n          return \"\";\n        },\n        // TODO: pluralization rules.\n        // pluralRules: {}\n      });\n    }\n  }\n}\n\nexport const i18n = new Translations();\n"]}