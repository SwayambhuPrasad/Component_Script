{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ColourRect.ts"],"names":["CCBoolean","CCInteger","clamp","color","Color","Graphics","UITransform","_decorator","AS","ccclass","property","requireComponent","disallowMultiple","executeInEditMode","ColourRect","type","tooltip","visible","isRounded","override","useFill","_uiTransform","_opacity","_isRounded","radius","_radius","_useFill","fillColor","lineWidth","_lineWidth","lineJoin","_lineJoin","lineCap","_lineCap","strokeColor","_strokeColor","_fillColor","miterLimit","_miterLimit","value","updateDraw","_color","set","impl","onLoad","getComponent","onEnable","node","on","EventType","SIZE_CHANGED","onDisable","off","update","_uiProps","opacity","clear","temp","clone","alpha","Math","round","a","r","g","b","anchorX","anchorY","width","height","roundRect","rect","fill","stroke"],"mappings":"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","sourcesContent":["import { CCBoolean, CCInteger, clamp, color, Color, Graphics, UITransform, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\n\nconst { ccclass, property, requireComponent, disallowMultiple, executeInEditMode } = _decorator;\n\n@ccclass(\"ColourRect\")\n@disallowMultiple\n@executeInEditMode\n@requireComponent(UITransform)\nexport class ColourRect extends AS(Graphics) {\n  @property protected _isRounded = false;\n\n  @property protected _radius = 4;\n\n  @property protected _useFill = true;\n\n  private _uiTransform: UITransform | null = null;\n\n  private _opacity = 1;\n\n  @property({ type: CCBoolean, tooltip: \"Enable to create rect with rounded corners.\" })\n  get isRounded() {\n    return this._isRounded;\n  }\n\n  @property({\n    type: CCInteger,\n    visible: function (this: ColourRect) {\n      return this.isRounded;\n    },\n    tooltip: \"If is rounded the radius to use for the corners.\",\n  })\n  get radius() {\n    return this._radius;\n  }\n\n  @property({ type: CCBoolean, tooltip: \"Enable to fill rect.\" })\n  get useFill() {\n    return this._useFill;\n  }\n\n  // Override the existing color property.\n  @property({ type: Color, override: true, visible: true })\n  get color() {\n    return this.fillColor;\n  }\n\n  @property({\n    override: true,\n    visible: function (this: ColourRect) {\n      return !this.useFill;\n    },\n  })\n  get lineWidth() {\n    return this._lineWidth;\n  }\n\n  @property({ override: true, visible: false })\n  get lineJoin() {\n    return this._lineJoin;\n  }\n\n  @property({ override: true, visible: false })\n  get lineCap() {\n    return this._lineCap;\n  }\n\n  @property({ override: true, visible: false })\n  get strokeColor(): Readonly<Color> {\n    return this._strokeColor;\n  }\n\n  @property({ override: true, visible: false })\n  get fillColor(): Readonly<Color> {\n    return this._fillColor;\n  }\n\n  @property({ override: true, visible: false })\n  get miterLimit() {\n    return this._miterLimit;\n  }\n\n  set isRounded(value) {\n    if (this._isRounded === value) {\n      return;\n    }\n\n    this._isRounded = value;\n    this.updateDraw();\n  }\n\n  set radius(value) {\n    if (this._radius === value) {\n      return;\n    }\n\n    this._radius = value;\n    this.updateDraw();\n  }\n\n  set useFill(value) {\n    if (this._useFill === value) {\n      return;\n    }\n\n    this._useFill = value;\n    this.updateDraw();\n  }\n\n  set color(value: Color) {\n    if (this._color === value) {\n      return;\n    }\n\n    this._color.set(value);\n    this.updateDraw();\n  }\n\n  set lineWidth(value) {\n    if (this._lineWidth === value) {\n      return;\n    }\n\n    this._lineWidth = value;\n    if (!this.impl) {\n      return;\n    }\n\n    this.impl.lineWidth = value;\n    this.updateDraw();\n  }\n\n  set lineJoin(value) {\n    if (this._lineJoin === value) {\n      return;\n    }\n\n    this._lineJoin = value;\n    if (!this.impl) {\n      return;\n    }\n    this.impl.lineJoin = value;\n    this.updateDraw();\n  }\n\n  set lineCap(value) {\n    if (this._lineCap === value) {\n      return;\n    }\n\n    this._lineCap = value;\n    if (!this.impl) {\n      return;\n    }\n    this.impl.lineCap = value;\n    this.updateDraw();\n  }\n\n  set miterLimit(value) {\n    if (this._miterLimit === value) {\n      return;\n    }\n\n    this._miterLimit = value;\n    this.updateDraw();\n  }\n\n  onLoad() {\n    super.onLoad();\n    this._uiTransform = this.getComponent(UITransform);\n  }\n\n  onEnable() {\n    super.onEnable();\n    this.node.on(UITransform.EventType.SIZE_CHANGED, this.updateDraw, this);\n    this.updateDraw();\n  }\n\n  onDisable() {\n    super.onDisable();\n    this.node.off(UITransform.EventType.SIZE_CHANGED, this.updateDraw, this);\n  }\n\n  update() {\n    if (this._opacity !== this.node._uiProps.opacity) {\n      this._opacity = this.node._uiProps.opacity;\n      this.updateDraw();\n    }\n  }\n\n  updateDraw() {\n    if (!this._uiTransform) return;\n    this.clear();\n    const temp = this._color.clone();\n    const alpha = clamp(Math.round(this.node._uiProps.opacity * this._color.a), 0, 255);\n    this._strokeColor = this._fillColor = color(temp.r, temp.g, temp.b, alpha);\n    const anchorX = this._uiTransform.anchorX;\n    const anchorY = this._uiTransform.anchorY;\n    const width = this._uiTransform.width;\n    const height = this._uiTransform.height;\n    if (this.isRounded)\n      this.roundRect(-anchorX * width, -anchorY * height, width, height, this.radius);\n    else this.rect(-anchorX * width, -anchorY * height, width, height);\n\n    if (this.useFill) this.fill();\n    else this.stroke();\n    this._strokeColor = this._fillColor = temp;\n  }\n}\n"]}