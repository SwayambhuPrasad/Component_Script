{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Logger.ts"],"names":["applyErrorReporter","logger","setLevel","TypeError","originalFactory","methodFactory","name","methodName","logLevel","loggerName","originalMethod","args","sendError","apply","undefined","getLevel","applyPrefixer","config","parent","configs","defaults","options","hasTimestamp","template","indexOf","hasLevel","hasName","content","date","Date","timestamp","timestampFormatter","level","levelFormatter","lname","nameFormatter","toString","format","replace","length","unshift","merge","target","i","key","Object","prototype","hasOwnProperty","call","root","networkReplicator","toUpperCase","toTimeString","trace","bind","debug","log","info","warn","error"],"mappings":"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","sourcesContent":["import root, { Logger, LogLevelNumbers } from \"./loglevel.js\";\nimport { networkReplicator } from \"./NetworkReplicator\";\n\nfunction applyErrorReporter(logger: Logger) {\n  if (!logger || !logger.setLevel) {\n    throw new TypeError(\"Argument is not a logger\");\n  }\n\n  const originalFactory = logger.methodFactory;\n  const name: string = (logger as any).name || \"\";\n\n  logger.methodFactory = function (\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string | symbol,\n  ) {\n    const originalMethod = originalFactory(methodName, logLevel, loggerName);\n    return function (...args: any[]) {\n      if (logLevel === 4) networkReplicator.sendError(...args);\n      originalMethod.apply(undefined, args);\n    };\n  };\n\n  logger.setLevel(logger.getLevel());\n\n  return logger;\n}\n\ninterface LogPrefixOptions {\n  template: string;\n  levelFormatter: (level: string) => string;\n  nameFormatter: (name: string | undefined) => string;\n  timestampFormatter: (date: Date) => string;\n  format?: (level: string, name: string | undefined, timestamp: Date) => string | undefined;\n}\n\nconst defaults: LogPrefixOptions = {\n  template: \"[%t] %l:\",\n  levelFormatter: function (level) {\n    return level.toUpperCase();\n  },\n  nameFormatter: function (name) {\n    return name || \"root\";\n  },\n  timestampFormatter: function (date) {\n    return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n  },\n  format: undefined,\n};\n\nconst configs: Record<string | symbol, LogPrefixOptions> = {};\n\nfunction applyPrefixer(logger: Logger, config?: Partial<LogPrefixOptions>) {\n  if (!logger || !logger.setLevel) {\n    throw new TypeError(\"Argument is not a logger\");\n  }\n\n  const originalFactory = logger.methodFactory;\n  const name: string = (logger as any).name || \"\";\n  const parent = configs[name] || configs[\"\"] || defaults;\n\n  function methodFactory(\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string | symbol,\n  ) {\n    const originalMethod = originalFactory(methodName, logLevel, loggerName);\n    const options = configs[loggerName] || configs[\"\"];\n\n    const hasTimestamp = options.template.indexOf(\"%t\") !== -1;\n    const hasLevel = options.template.indexOf(\"%l\") !== -1;\n    const hasName = options.template.indexOf(\"%n\") !== -1;\n\n    return function (...args: any[]) {\n      let content = \"\";\n\n      // skip the root method for child loggers to prevent duplicate logic\n      if (name || !configs[loggerName]) {\n        const date = new Date();\n        const timestamp = options.timestampFormatter(date);\n        const level = options.levelFormatter(methodName);\n        const lname = options.nameFormatter(loggerName?.toString());\n\n        if (options.format) {\n          content += options.format(level, lname, date);\n        } else {\n          content += options.template;\n          if (hasTimestamp) {\n            content = content.replace(/%t/, timestamp);\n          }\n          if (hasLevel) content = content.replace(/%l/, level);\n          if (hasName) content = content.replace(/%n/, lname);\n        }\n\n        if (args.length && typeof args[0] === \"string\") {\n          // concat prefix with first argument to support string substitutions\n          args[0] = content + \" \" + args[0];\n        } else {\n          args.unshift(content);\n        }\n      }\n\n      originalMethod.apply(undefined, args);\n    };\n  }\n\n  if (!configs[name]) {\n    logger.methodFactory = methodFactory;\n  }\n\n  // for remove inherited format option if template option preset\n  config = config || {};\n  if (config.template) config.format = undefined;\n\n  function merge(target: any, ...args: any[]) {\n    const length = args.length;\n    for (let i = 0; i < length; i++) {\n      for (const key in args[i]) {\n        if (Object.prototype.hasOwnProperty.call(args[i], key)) {\n          target[key] = args[i][key];\n        }\n      }\n    }\n    return target;\n  }\n\n  configs[name] = merge({}, parent, config);\n\n  logger.setLevel(logger.getLevel());\n\n  return logger;\n}\n\napplyPrefixer(root);\napplyErrorReporter(root);\n\nconst trace = root.trace.bind(root);\nconst debug = root.debug.bind(root);\nconst log = root.log.bind(root);\nconst info = root.info.bind(root);\nconst warn = root.warn.bind(root);\nconst error = root.error.bind(root);\n\nexport { trace, debug, log, info, warn, error };\n"]}