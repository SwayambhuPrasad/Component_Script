{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/virtualCanvasNodes/VirtualContainerNode.ts"],"names":["VirtualContainerNode","VirtualCanvasNode","constructor","classes","nodes","addNode","node","push","last","length","setPosition","x","y","bounds","getBounds","delta","forEach","child","newX","i","childBounds","clone","extend"],"mappings":";;;iDASsBA,oB;;;;;;;;;;;;;;;;;;;;;;AARLC,MAAAA,iB,iBAAAA,iB;;;;;;;AAEjB;AACA;AACA;AACA;AACA;AACA;sCACsBD,oB,GAAf,MAAeA,oBAAf;AAAA;AAAA,kDAA8D;AAGnEE,QAAAA,WAAW,CAACC,OAAD,EAAqB;AAC9B,gBAAMA,OAAN;AAD8B,eAFhCC,KAEgC;AAE9B,eAAKA,KAAL,GAAa,EAAb;AACD;AAED;AACF;AACA;AACA;;;AACEC,QAAAA,OAAO,CAACC,IAAD,EAA0B;AAC/B,eAAKF,KAAL,CAAWG,IAAX,CAAgBD,IAAhB;AACD;AAED;AACF;AACA;AACA;;;AACEE,QAAAA,IAAI,GAA6B;AAC/B,iBAAO,KAAKJ,KAAL,CAAW,KAAKA,KAAL,CAAWK,MAAX,GAAoB,CAA/B,CAAP;AACD;AAED;AACF;AACA;;;AACEC,QAAAA,WAAW,CAACC,CAAD,EAAYC,CAAZ,EAAuB;AAChC,gBAAMF,WAAN,CAAkBC,CAAlB,EAAqBC,CAArB;AACA,gBAAMC,MAAM,GAAG,KAAKC,SAAL,EAAf;AACA,gBAAMC,KAAK,GAAGJ,CAAC,GAAGE,MAAM,CAACF,CAAzB;AACA,eAAKP,KAAL,CAAWY,OAAX,CAAoBC,KAAD,IAAW;AAC5B,kBAAMC,IAAI,GAAGD,KAAK,CAACJ,MAAN,CAAaF,CAAb,GAAiBI,KAA9B;AACAE,YAAAA,KAAK,CAACP,WAAN,CAAkBQ,IAAlB,EAAwBD,KAAK,CAACJ,MAAN,CAAaD,CAArC;AACD,WAHD;AAID;AAED;AACF;AACA;AACA;;;AACEE,QAAAA,SAAS,GAAW;AAClB,eAAKV,KAAL,CAAWY,OAAX,CAAmB,CAACC,KAAD,EAAQE,CAAR,KAAc;AAC/B,kBAAMC,WAAW,GAAGH,KAAK,CAACH,SAAN,EAApB;;AACA,gBAAIK,CAAC,KAAK,CAAV,EAAa;AACX,mBAAKN,MAAL,GAAcO,WAAW,CAACC,KAAZ,EAAd;AACD,aAFD,MAEO;AACL,mBAAKR,MAAL,CAAYS,MAAZ,CAAmBF,WAAnB;AACD;AACF,WAPD;AAQA,iBAAO,KAAKP,MAAZ;AACD;;AAnDkE,O","sourcesContent":["import { ClassList } from \".\";\nimport { Bounds, VirtualCanvasNode } from \"./VirtualCanvasNode\";\n\n/**\n * A ContainerNode represents the container of child nodes\n * When this position is updated, so are the children's position.\n *\n * @abstract\n */\nexport abstract class VirtualContainerNode extends VirtualCanvasNode {\n  nodes: Array<VirtualCanvasNode>;\n\n  constructor(classes: ClassList) {\n    super(classes);\n    this.nodes = [];\n  }\n\n  /**\n   * Adds a child node to the Container\n   * @param {VirtualCanvasNode} node\n   */\n  addNode(node: VirtualCanvasNode) {\n    this.nodes.push(node);\n  }\n\n  /**\n   * Gets the last node in the container\n   * @return {VirtualCanvasNode | null}\n   */\n  last(): VirtualCanvasNode | null {\n    return this.nodes[this.nodes.length - 1];\n  }\n\n  /**\n   * Moves the x position of the VirtualCanvasNode and shift the children\n   */\n  setPosition(x: number, y: number) {\n    super.setPosition(x, y);\n    const bounds = this.getBounds();\n    const delta = x - bounds.x;\n    this.nodes.forEach((child) => {\n      const newX = child.bounds.x + delta;\n      child.setPosition(newX, child.bounds.y);\n    });\n  }\n\n  /**\n   * Gets the absolute bounds of this node relative to (0, 0)\n   * @return {Bounds}\n   */\n  getBounds(): Bounds {\n    this.nodes.forEach((child, i) => {\n      const childBounds = child.getBounds();\n      if (i === 0) {\n        this.bounds = childBounds.clone();\n      } else {\n        this.bounds.extend(childBounds);\n      }\n    });\n    return this.bounds;\n  }\n}\n"]}