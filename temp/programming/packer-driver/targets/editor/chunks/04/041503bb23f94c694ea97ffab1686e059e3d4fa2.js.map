{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/gif.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","parse","stream","schema","result","parent","Array","isArray","forEach","partSchema","key","Object","keys","conditional","conditionFunc","loop","continueFunc","arr","lastStreamPos","pos","newParent","push","buildStream","uint8Data","data","readByte","peekByte","offset","readBytes","length","subarray","peekBytes","readString","from","map","value","String","fromCharCode","join","readUnsigned","littleEndian","bytes","readArray","byteSize","totalOrFunc","total","parser","i","subBitsTotal","bits","startIndex","readBits","byte","reduce","res","def","index","subBlocksSchema","blocks","terminator","chunks","streamSize","size","availableSize","Uint8Array","set","gceSchema","gce","codes","extras","future","disposal","userInput","transparentColorGiven","delay","transparentColorIndex","imageSchema","image","code","descriptor","left","top","width","height","lct","exists","interlaced","sort","Math","pow","minCodeSize","textSchema","text","blockSize","preData","applicationSchema","application","id","commentSchema","comment","header","signature","version","lsd","gct","resolution","backgroundColorIndex","pixelAspectRatio","frames","nextCode","GIF","deinterlace","pixels","newPixels","rows","cpRow","toRow","fromRow","fromPixels","slice","splice","apply","concat","offsets","steps","pass","lzw","pixelCount","MAX_STACK_SIZE","nullCode","npix","available","clear","code_mask","code_size","end_of_information","in_code","old_code","datum","data_size","first","bi","pi","dstPixels","prefix","suffix","pixelStack","count","parseGIF","arrayBuffer","byteData","generatePatch","totalPixels","patchData","Uint8ClampedArray","colorIndex","color","colorTable","transparentIndex","decompressFrame","frame","buildImagePatch","console","warn","resultImage","dims","disposalType","patch","decompressFrames","parsedGif","buildImagePatches","filter","f","_cjsExports","_parseGIF","_decompressFrames","_decompressFrame"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nlet _parseGIF;\nlet _decompressFrames;\nlet _decompressFrame;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n //#region Binary Schema Parser for GIF\n\n const parse = (stream, schema, result = {}, parent = result) => {\n   if (Array.isArray(schema)) {\n     schema.forEach((partSchema) => parse(stream, partSchema, result, parent));\n   } else if (typeof schema === \"function\") {\n     schema(stream, result, parent, parse);\n   } else {\n     const key = Object.keys(schema)[0];\n     if (Array.isArray(schema[key])) {\n       parent[key] = {};\n       parse(stream, schema[key], result, parent[key]);\n     } else {\n       parent[key] = schema[key](stream, result, parent, parse);\n     }\n   }\n   return result;\n };\n\n const conditional = (schema, conditionFunc) => (stream, result, parent, parse) => {\n   if (conditionFunc(stream, result, parent)) {\n     parse(stream, schema, result, parent);\n   }\n };\n\n const loop = (schema, continueFunc) => (stream, result, parent, parse) => {\n   const arr = [];\n   let lastStreamPos = stream.pos;\n   while (continueFunc(stream, result, parent)) {\n     const newParent = {};\n     parse(stream, schema, result, newParent);\n     // cases when whole file is parsed but no termination is there and stream position is not getting updated as well\n     // it falls into infinite recursion, null check to avoid the same\n     if (stream.pos === lastStreamPos) {\n       break;\n     }\n     lastStreamPos = stream.pos;\n     arr.push(newParent);\n   }\n   return arr;\n };\n\n // Default stream and parsers for Uint8TypedArray data type\n\n const buildStream = (uint8Data) => ({\n   data: uint8Data,\n   pos: 0,\n });\n\n const readByte = () => (stream) => {\n   return stream.data[stream.pos++];\n };\n\n const peekByte =\n   (offset = 0) =>\n   (stream) => {\n     return stream.data[stream.pos + offset];\n   };\n\n const readBytes = (length) => (stream) => {\n   return stream.data.subarray(stream.pos, (stream.pos += length));\n };\n\n const peekBytes = (length) => (stream) => {\n   return stream.data.subarray(stream.pos, stream.pos + length);\n };\n\n const readString = (length) => (stream) => {\n   return Array.from(readBytes(length)(stream))\n     .map((value) => String.fromCharCode(value))\n     .join(\"\");\n };\n\n const readUnsigned = (littleEndian) => (stream) => {\n   const bytes = readBytes(2)(stream);\n   return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n };\n\n const readArray = (byteSize, totalOrFunc) => (stream, result, parent) => {\n   const total =\n     typeof totalOrFunc === \"function\" ? totalOrFunc(stream, result, parent) : totalOrFunc;\n\n   const parser = readBytes(byteSize);\n   const arr = new Array(total);\n   for (var i = 0; i < total; i++) {\n     arr[i] = parser(stream);\n   }\n   return arr;\n };\n\n const subBitsTotal = (bits, startIndex, length) => {\n   var result = 0;\n   for (var i = 0; i < length; i++) {\n     result += bits[startIndex + i] && 2 ** (length - i - 1);\n   }\n   return result;\n };\n\n const readBits = (schema) => (stream) => {\n   const byte = readByte()(stream);\n   // convert the byte to bit array\n   const bits = new Array(8);\n   for (var i = 0; i < 8; i++) {\n     bits[7 - i] = !!(byte & (1 << i));\n   }\n   // convert the bit array to values based on the schema\n   return Object.keys(schema).reduce((res, key) => {\n     const def = schema[key];\n     if (def.length) {\n       res[key] = subBitsTotal(bits, def.index, def.length);\n     } else {\n       res[key] = bits[def.index];\n     }\n     return res;\n   }, {});\n };\n\n // a set of 0x00 terminated subblocks\n var subBlocksSchema = {\n   blocks: (stream) => {\n     const terminator = 0x00;\n     const chunks = [];\n     const streamSize = stream.data.length;\n     var total = 0;\n     for (var size = readByte()(stream); size !== terminator; size = readByte()(stream)) {\n       // size becomes undefined for some case when file is corrupted and  terminator is not proper\n       // null check to avoid recursion\n       if (!size) break;\n       // catch corrupted files with no terminator\n       if (stream.pos + size >= streamSize) {\n         const availableSize = streamSize - stream.pos;\n         chunks.push(readBytes(availableSize)(stream));\n         total += availableSize;\n         break;\n       }\n       chunks.push(readBytes(size)(stream));\n       total += size;\n     }\n     const result = new Uint8Array(total);\n     var offset = 0;\n     for (var i = 0; i < chunks.length; i++) {\n       result.set(chunks[i], offset);\n       offset += chunks[i].length;\n     }\n     return result;\n   },\n };\n\n // global control extension\n const gceSchema = conditional(\n   {\n     gce: [\n       { codes: readBytes(2) },\n       { byteSize: readByte() },\n       {\n         extras: readBits({\n           future: { index: 0, length: 3 },\n           disposal: { index: 3, length: 3 },\n           userInput: { index: 6 },\n           transparentColorGiven: { index: 7 },\n         }),\n       },\n       { delay: readUnsigned(true) },\n       { transparentColorIndex: readByte() },\n       { terminator: readByte() },\n     ],\n   },\n   (stream) => {\n     var codes = peekBytes(2)(stream);\n     return codes[0] === 0x21 && codes[1] === 0xf9;\n   },\n );\n\n // image pipeline block\n const imageSchema = conditional(\n   {\n     image: [\n       { code: readByte() },\n       {\n         descriptor: [\n           { left: readUnsigned(true) },\n           { top: readUnsigned(true) },\n           { width: readUnsigned(true) },\n           { height: readUnsigned(true) },\n           {\n             lct: readBits({\n               exists: { index: 0 },\n               interlaced: { index: 1 },\n               sort: { index: 2 },\n               future: { index: 3, length: 2 },\n               size: { index: 5, length: 3 },\n             }),\n           },\n         ],\n       },\n       conditional(\n         {\n           lct: readArray(3, (stream, result, parent) => {\n             return Math.pow(2, parent.descriptor.lct.size + 1);\n           }),\n         },\n         (stream, result, parent) => {\n           return parent.descriptor.lct.exists;\n         },\n       ),\n       { data: [{ minCodeSize: readByte() }, subBlocksSchema] },\n     ],\n   },\n   (stream) => {\n     return peekByte()(stream) === 0x2c;\n   },\n );\n\n // plain text block\n const textSchema = conditional(\n   {\n     text: [\n       { codes: readBytes(2) },\n       { blockSize: readByte() },\n       {\n         preData: (stream, result, parent) => readBytes(parent.text.blockSize)(stream),\n       },\n       subBlocksSchema,\n     ],\n   },\n   (stream) => {\n     var codes = peekBytes(2)(stream);\n     return codes[0] === 0x21 && codes[1] === 0x01;\n   },\n );\n\n // application block\n const applicationSchema = conditional(\n   {\n     application: [\n       { codes: readBytes(2) },\n       { blockSize: readByte() },\n       { id: (stream, result, parent) => readString(parent.blockSize)(stream) },\n       subBlocksSchema,\n     ],\n   },\n   (stream) => {\n     var codes = peekBytes(2)(stream);\n     return codes[0] === 0x21 && codes[1] === 0xff;\n   },\n );\n\n // comment block\n const commentSchema = conditional(\n   {\n     comment: [{ codes: readBytes(2) }, subBlocksSchema],\n   },\n   (stream) => {\n     var codes = peekBytes(2)(stream);\n     return codes[0] === 0x21 && codes[1] === 0xfe;\n   },\n );\n\n const schema = [\n   { header: [{ signature: readString(3) }, { version: readString(3) }] },\n   {\n     lsd: [\n       { width: readUnsigned(true) },\n       { height: readUnsigned(true) },\n       {\n         gct: readBits({\n           exists: { index: 0 },\n           resolution: { index: 1, length: 3 },\n           sort: { index: 4 },\n           size: { index: 5, length: 3 },\n         }),\n       },\n       { backgroundColorIndex: readByte() },\n       { pixelAspectRatio: readByte() },\n     ],\n   },\n   conditional(\n     {\n       gct: readArray(3, (stream, result) => Math.pow(2, result.lsd.gct.size + 1)),\n     },\n     (stream, result) => result.lsd.gct.exists,\n   ),\n   // content frames\n   {\n     frames: loop(\n       [gceSchema, applicationSchema, commentSchema, imageSchema, textSchema],\n       (stream) => {\n         var nextCode = peekByte()(stream);\n         // rather than check for a terminator, we should check for the existence\n         // of an ext or image block to avoid infinite loops\n         //var terminator = 0x3B;\n         //return nextCode !== terminator;\n         return nextCode === 0x21 || nextCode === 0x2c;\n       },\n     ),\n   },\n ];\n\n const GIF = schema;\n\n //#endregion\n\n /**\n  * Deinterlace function from https://github.com/shachaf/jsgif\n  */\n\n const deinterlace = (pixels, width) => {\n   const newPixels = new Array(pixels.length);\n   const rows = pixels.length / width;\n   const cpRow = function (toRow, fromRow) {\n     const fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n     newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n   };\n\n   // See appendix E.\n   const offsets = [0, 4, 2, 1];\n   const steps = [8, 8, 4, 2];\n\n   var fromRow = 0;\n   for (var pass = 0; pass < 4; pass++) {\n     for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n       cpRow(toRow, fromRow);\n       fromRow++;\n     }\n   }\n\n   return newPixels;\n };\n\n //#region LZW decompression\n\n /**\n  * javascript port of java LZW decompression\n  * Original java author url: https://gist.github.com/devunwired/4479231\n  */\n\n const lzw = (minCodeSize, data, pixelCount) => {\n   const MAX_STACK_SIZE = 4096;\n   const nullCode = -1;\n   const npix = pixelCount;\n   var available,\n     clear,\n     code_mask,\n     code_size,\n     end_of_information,\n     in_code,\n     old_code,\n     bits,\n     code,\n     i,\n     datum,\n     data_size,\n     first,\n     top,\n     bi,\n     pi;\n\n   const dstPixels = new Array(pixelCount);\n   const prefix = new Array(MAX_STACK_SIZE);\n   const suffix = new Array(MAX_STACK_SIZE);\n   const pixelStack = new Array(MAX_STACK_SIZE + 1);\n\n   // Initialize GIF data stream decoder.\n   data_size = minCodeSize;\n   clear = 1 << data_size;\n   end_of_information = clear + 1;\n   available = clear + 2;\n   old_code = nullCode;\n   code_size = data_size + 1;\n   code_mask = (1 << code_size) - 1;\n   for (code = 0; code < clear; code++) {\n     prefix[code] = 0;\n     suffix[code] = code;\n   }\n\n   // Decode GIF pixel stream.\n   var datum, bits, count, first, top, pi, bi;\n   datum = bits = count = first = top = pi = bi = 0;\n   for (i = 0; i < npix; ) {\n     if (top === 0) {\n       if (bits < code_size) {\n         // get the next byte\n         datum += data[bi] << bits;\n\n         bits += 8;\n         bi++;\n         continue;\n       }\n       // Get the next code.\n       code = datum & code_mask;\n       datum >>= code_size;\n       bits -= code_size;\n       // Interpret the code\n       if (code > available || code == end_of_information) {\n         break;\n       }\n       if (code == clear) {\n         // Reset decoder.\n         code_size = data_size + 1;\n         code_mask = (1 << code_size) - 1;\n         available = clear + 2;\n         old_code = nullCode;\n         continue;\n       }\n       if (old_code == nullCode) {\n         pixelStack[top++] = suffix[code];\n         old_code = code;\n         first = code;\n         continue;\n       }\n       in_code = code;\n       if (code == available) {\n         pixelStack[top++] = first;\n         code = old_code;\n       }\n       while (code > clear) {\n         pixelStack[top++] = suffix[code];\n         code = prefix[code];\n       }\n\n       first = suffix[code] & 0xff;\n       pixelStack[top++] = first;\n\n       // add a new string to the table, but only if space is available\n       // if not, just continue with current table until a clear code is found\n       // (deferred clear code implementation as per GIF spec)\n       if (available < MAX_STACK_SIZE) {\n         prefix[available] = old_code;\n         suffix[available] = first;\n         available++;\n         if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n           code_size++;\n           code_mask += available;\n         }\n       }\n       old_code = in_code;\n     }\n     // Pop a pixel off the pixel stack.\n     top--;\n     dstPixels[pi++] = pixelStack[top];\n     i++;\n   }\n\n   for (i = pi; i < npix; i++) {\n     dstPixels[i] = 0; // clear missing pixels\n   }\n\n   return dstPixels;\n };\n\n //#endregion\n\n const parseGIF = (arrayBuffer) => {\n   const byteData = new Uint8Array(arrayBuffer);\n   return parse(buildStream(byteData), GIF);\n };\n\n const generatePatch = (image) => {\n   const totalPixels = image.pixels.length;\n   const patchData = new Uint8ClampedArray(totalPixels * 4);\n   for (var i = 0; i < totalPixels; i++) {\n     const pos = i * 4;\n     const colorIndex = image.pixels[i];\n     const color = image.colorTable[colorIndex] || [0, 0, 0];\n     patchData[pos] = color[0];\n     patchData[pos + 1] = color[1];\n     patchData[pos + 2] = color[2];\n     patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n   }\n\n   return patchData;\n };\n\n const decompressFrame = (frame, gct, buildImagePatch) => {\n   if (!frame.image) {\n     console.warn(\"gif frame does not have associated image.\");\n     return;\n   }\n\n   const { image } = frame;\n\n   // get the number of pixels\n   const totalPixels = image.descriptor.width * image.descriptor.height;\n   // do lzw decompression\n   var pixels = lzw(image.data.minCodeSize, image.data.blocks, totalPixels);\n\n   // deal with interlacing if necessary\n   if (image.descriptor.lct.interlaced) {\n     pixels = deinterlace(pixels, image.descriptor.width);\n   }\n\n   const resultImage = {\n     pixels: pixels,\n     dims: {\n       top: frame.image.descriptor.top,\n       left: frame.image.descriptor.left,\n       width: frame.image.descriptor.width,\n       height: frame.image.descriptor.height,\n     },\n   };\n\n   // color table\n   if (image.descriptor.lct && image.descriptor.lct.exists) {\n     resultImage.colorTable = image.lct;\n   } else {\n     resultImage.colorTable = gct;\n   }\n\n   // add per frame relevant gce information\n   if (frame.gce) {\n     resultImage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n     resultImage.disposalType = frame.gce.extras.disposal;\n     // transparency\n     if (frame.gce.extras.transparentColorGiven) {\n       resultImage.transparentIndex = frame.gce.transparentColorIndex;\n     }\n   }\n\n   // create canvas usable imagedata if desired\n   if (buildImagePatch) {\n     resultImage.patch = generatePatch(resultImage);\n   }\n\n   return resultImage;\n };\n\n const decompressFrames = (parsedGif, buildImagePatches) => {\n   return parsedGif.frames\n     .filter((f) => f.image)\n     .map((f) => decompressFrame(f, parsedGif.gct, buildImagePatches));\n };\n\n module.exports = {\n   parseGIF,\n   decompressFrames,\n   decompressFrame,\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_parseGIF = module.exports.parseGIF;\n_decompressFrames = module.exports.decompressFrames;\n_decompressFrame = module.exports.decompressFrame;\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}