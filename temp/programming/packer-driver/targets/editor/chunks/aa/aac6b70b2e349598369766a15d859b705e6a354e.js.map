{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/MCQ/script/MCQ.ts"],"names":["Button","Component","instantiate","Label","Layout","Prefab","_decorator","AS","ReplicatedButton","UIAnimationLibrary","ccclass","property","requireComponent","AnswerType","MCQ","type","String","_selection","Array","answer","awake","insertChild","insertButtonsComp","node","children","choiceButtons","map","child","btn","addComponent","forEach","i","name","on","EventType","CLICK","checkSelection","push","active","lableAssigner","optionLabel","length","addchild","optionPrefab","parent","optionsContainer","sel","checkFeedback","console","log","mcqLable","getComponentsInChildren","btnLable","string","statusIndex","Promise","all","status","flash"],"mappings":"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","sourcesContent":["import { Button, Component, instantiate, Label, Layout, Prefab, _decorator } from \"cc\";\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { UIAnimationLibrary } from \"db://as_framework/scripts/UIAnimLibrary\";\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum AnswerType {\n  SINGLE_CORRECT,\n  MULTIPLE_CORRECT,\n}\n\n@ccclass(\"MCQ\")\nexport class MCQ extends AS(Component) {\n  @property({ type: String }) private optionLabel: string[] = [];\n\n  @property(Prefab) private optionPrefab: Prefab = null;\n\n  @property(Layout) private optionsContainer: Layout | null = null;\n\n  //@property({type: Enum(AnswerType)}) private answerType = AnswerType.SINGLE_CORRECT;\n\n  // @property({visible: function (this: MCQ) {return this.answerType === AnswerType.SINGLE_CORRECT}}) private x;\n  private _selection = Array<boolean>();\n\n  private answer = [false, true, true, false];\n\n  awake() {\n    this.insertChild();\n    const insertButtonsComp = this.node.children;\n\n    const choiceButtons = insertButtonsComp.map((child) => {\n      const btn = child.addComponent(Button);\n      child.addComponent(ReplicatedButton);\n\n      return btn;\n    });\n\n    choiceButtons.forEach((btn, i) => {\n      if (btn.node.name === \"check\") {\n        btn.node.on(Button.EventType.CLICK, () => {\n          this.checkSelection();\n        });\n\n        return;\n      }\n\n      this._selection.push(false);\n\n      btn.node.on(Button.EventType.CLICK, async () => {\n        if (this._selection[i] === false) {\n          btn.node.children[0].active = true;\n          this._selection[i] = true;\n        } else {\n          btn.node.children[0].active = false;\n          this._selection[i] = false;\n        }\n      });\n    });\n    this.lableAssigner();\n  }\n\n  insertChild() {\n    // this.optionsContainer.node.destroyAllChildren();\n    for (let i = 0; i < this.optionLabel.length; i++) {\n      let addchild = instantiate(this.optionPrefab);\n      addchild.parent = this.optionsContainer.node;\n    }\n\n    // director.once(Director.EVENT_BEFORE_UPDATE, () => this.optionsContainer.updateLayout());\n  }\n\n  checkSelection() {\n    this._selection.forEach((sel, i) => {\n      if (sel != this.answer[i]) {\n        this.checkFeedback(2);\n        return;\n      }\n    });\n    this.checkFeedback(1);\n    console.log(\"running\");\n  }\n\n  lableAssigner() {\n    const mcqLable = this.node.getComponentsInChildren(Label);\n    mcqLable.forEach((btnLable, i) => {\n      if (this.optionLabel.length <= i) {\n        btnLable.node.parent.active = false;\n      } else btnLable.string = this.optionLabel[i];\n    });\n  }\n\n  async checkFeedback(statusIndex) {\n    console.log(\"running\", this._selection);\n    const btn = this.node.children;\n\n    await Promise.all(\n      this._selection.map(async (status, i) => {\n        if (status) {\n          console.log(\"running\", statusIndex);\n          btn[i].children[statusIndex].active = true;\n          await UIAnimationLibrary.flash(btn[i].children[statusIndex], 2);\n          btn[i].children[statusIndex].active = false;\n        }\n      }),\n    );\n  }\n}\n"]}