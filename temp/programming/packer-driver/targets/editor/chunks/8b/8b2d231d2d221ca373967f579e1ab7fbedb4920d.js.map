{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/VirtualNodeBuilder.ts"],"names":["NodeData","VirtualNodeBuilder","isHtmlDomNode","obj","isSymbolNode","__domTree","SymbolNode","isSvgNode","SvgNode","hasChildNodes","isClassName","name","isStyleName","error","warn","classStateMapping","katex","State","styleStateMapping","HPaddingNode","TextNode","VerticalListRow","IDENTIFIER_CLASS","constructor","rootNode","attributes","latex","options","_latex","_options","_state","_enclosedClassIndexes","defaultOptions","build","row","vlist","addRow","virtualDomTree","__renderToHTMLTree","children","err","ParseError","message","_createRenderingState","align","_getNodeAttributes","nodeData","root","strutBounds","getStrutBounds","baselineHeight","height","depth","em","node","parentState","_getGlyphDataFromNode","forEach","child","_resetState","parentVlist","setStretchyWidths","addCell","classes","classData","pstrut","withYShift","withResetMargin","_extractClassDataFromNode","_extractStyleDataFromNode","_createMSpace","_createSvgNode","_createTextNode","_createItalicNode","nextClassIsEnclosedClass","index","withClass","camelName","_toCamelCase","str","replace","g","toUpperCase","mspace","setPosition","nextX","y","bounds","set","width","key","style","Object","prototype","hasOwnProperty","call","value","virtualSvg","state","test","toString","fill","color","svgNode","minWidth","margin","left","marginLeft","right","marginRight","text","textNode","font","italic","italicNode"],"mappings":"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","sourcesContent":["import { error, warn } from \"../Logger\";\nimport { classStateMapping } from \"./classStateMapping\";\nimport katex from \"./katex/katex.js\";\nimport { IOptions, State } from \"./RenderingState\";\nimport { styleStateMapping } from \"./styleStateMapping\";\nimport {\n  HPaddingNode,\n  SvgNode,\n  TextNode,\n  VerticalList,\n  VerticalListRow,\n} from \"./virtualCanvasNodes\";\nimport { Bounds } from \"./virtualCanvasNodes/VirtualCanvasNode\";\n\nconst IDENTIFIER_CLASS = \"enclosing\";\n\nfunction isHtmlDomNode(obj: any): obj is katex.domTree.HtmlDomNode {\n  return \"classes\" in obj;\n}\nfunction isSymbolNode(obj: any): obj is katex.domTree.SymbolNode {\n  return obj instanceof katex.__domTree.SymbolNode;\n}\nfunction isSvgNode(obj: any): obj is katex.domTree.SvgNode {\n  return obj instanceof katex.__domTree.SvgNode;\n}\nfunction hasChildNodes(\n  obj: katex.domTree.VirtualNode,\n): obj is katex.domTree.VirtualNode & { children: katex.domTree.VirtualNode[] } {\n  return \"children\" in obj;\n}\nfunction isClassName(name: string): name is keyof typeof classStateMapping {\n  return name in classStateMapping;\n}\nfunction isStyleName(name: string): name is keyof typeof styleStateMapping {\n  return name in styleStateMapping;\n}\n\n/**\n * NodeData represents the data returned from the build method\n */\nclass NodeData {\n  rootNode: VerticalList;\n\n  attributes: { baselineHeight: number; strutBounds: Bounds };\n\n  constructor(rootNode: VerticalList, attributes: { baselineHeight: number; strutBounds: Bounds }) {\n    this.rootNode = rootNode;\n    this.attributes = attributes;\n  }\n}\n\n/**\n * The NodeBuilder represents the entry point for all renderers.\n * The only public method available is the \"build method\".\n */\nexport class VirtualNodeBuilder {\n  private _latex: string;\n\n  private _options: Partial<IOptions>;\n\n  private _state: State;\n\n  private _enclosedClassIndexes: Record<string, number>;\n\n  /**\n   * Constructor\n   *\n   * @param  {String} latex - Sets the initial latex expression\n   * @param  {KatexOptions} options - Any options to apply to the expression\n   */\n  constructor(latex: string, options?: Partial<IOptions>) {\n    this._latex = latex;\n    this._options = options ?? {};\n    this._state = new State(State.defaultOptions(this._options));\n    this._enclosedClassIndexes = {};\n  }\n\n  /**\n   * Builds all the Virtual Nodes and retrieves the appropriate attributes\n   * for the given latex/options. This is the entry point for any renderer\n   * implementation.\n   */\n  build() {\n    this._state = new State(State.defaultOptions(this._options));\n    const row = new VerticalListRow([]);\n    this._state.vlist.addRow(row);\n    this._enclosedClassIndexes = {};\n    let virtualDomTree;\n    try {\n      virtualDomTree = katex.__renderToHTMLTree(this._latex, this._options).children[0];\n    } catch (err) {\n      if (err instanceof katex.ParseError) {\n        error(err.message);\n      } else error(err);\n      return;\n    }\n    this._createRenderingState(virtualDomTree);\n    const rootNode = this._state.vlist;\n    rootNode.align();\n    const attributes = this._getNodeAttributes(virtualDomTree, rootNode);\n    const nodeData = new NodeData(rootNode, attributes);\n    return nodeData;\n  }\n\n  private _getNodeAttributes(virtualDomTree: katex.domTree.HtmlDomNode, root: VerticalList) {\n    const strutBounds = root.getStrutBounds();\n    const attributes = {\n      baselineHeight: strutBounds.height - virtualDomTree.depth * this._state.em,\n      strutBounds,\n    };\n    return attributes;\n  }\n\n  private _createRenderingState(node: katex.domTree.VirtualNode) {\n    const parentState = this._state;\n    this._getGlyphDataFromNode(node);\n    if (hasChildNodes(node)) {\n      node.children.forEach((child) => this._createRenderingState(child));\n    }\n    this._resetState(parentState);\n  }\n\n  private _resetState(parentState: State) {\n    const vlist = this._state.vlist;\n    const parentVlist = parentState.vlist;\n    if (vlist !== parentVlist) {\n      vlist.setStretchyWidths();\n      vlist.align();\n      parentVlist.addCell(vlist);\n    }\n    if (this._state.classes !== parentState.classes) {\n      this._state.classes.forEach((classData) => {\n        this._enclosedClassIndexes[classData.name]++;\n      });\n    }\n    if (this._state.pstrut) {\n      parentState = parentState.withYShift(this._state.pstrut).withResetMargin();\n    }\n    this._state = parentState;\n  }\n\n  private _getGlyphDataFromNode(node: katex.domTree.VirtualNode) {\n    this._extractClassDataFromNode(node);\n    this._extractStyleDataFromNode(node);\n    this._createMSpace();\n    this._createSvgNode(node);\n    this._createTextNode(node);\n    this._createItalicNode(node);\n  }\n\n  private _extractClassDataFromNode(node: katex.domTree.VirtualNode) {\n    let nextClassIsEnclosedClass = false;\n    if (!isHtmlDomNode(node)) return;\n    node.classes.forEach((name) => {\n      if (name === IDENTIFIER_CLASS) {\n        nextClassIsEnclosedClass = true;\n      } else if (nextClassIsEnclosedClass) {\n        nextClassIsEnclosedClass = false;\n        const index = (this._enclosedClassIndexes[name] = this._enclosedClassIndexes[name] ?? 0);\n        this._state = this._state.withClass({ name, index });\n      } else {\n        const camelName = this._toCamelCase(name);\n        if (isClassName(camelName)) {\n          this._state = classStateMapping[camelName](this._state, node);\n        }\n      }\n    });\n  }\n\n  private _toCamelCase(str: string) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  }\n\n  private _createMSpace() {\n    if (this._state.mspace) {\n      const mspace = new HPaddingNode(this._state.classes);\n      mspace.setPosition(this._state.nextX, this._state.y);\n      mspace.bounds.set({ width: this._state.mspace * this._state.em });\n      this._state.vlist.addCell(mspace);\n      this._state = this._state.withResetMargin();\n    }\n  }\n\n  private _extractStyleDataFromNode(node: katex.domTree.VirtualNode) {\n    if (!isHtmlDomNode(node)) return;\n    for (const key in node.style) {\n      if (Object.prototype.hasOwnProperty.call(node.style, key)) {\n        const value = node.style[key as keyof katex.domTree.CssStyle];\n        if (isStyleName(key) && value != null) {\n          this._state = styleStateMapping[key](this._state, value);\n        }\n      }\n    }\n  }\n\n  private _createSvgNode(node: katex.domTree.VirtualNode) {\n    if (!isSvgNode(node)) return;\n\n    const virtualSvg = node;\n    const state = this._state;\n    const height = +virtualSvg.attributes.height.replace(\"em\", \"\") * this._state.em;\n    if (virtualSvg.attributes.style) {\n      // for `\\oiint`, the width gets specified in a style=\"xx.xxem\"\n      // attribute however this causes it to become rendered vert\n      // small as em isn't scaled properly; we can either remove the\n      // style attribute and let the externally-set height determine\n      // the bounds, or we can scale the em similar to what is done to\n      // the height earlier in this function. We do the former, while\n      // adding a console warning in case another (unexpected)\n      // condition is encountered - in which case the developer should\n      // handle this new case accordingly.\n      if (!/^width:[+-]?(?:[0-9]*[.])?[0-9]+em$/.test(virtualSvg.attributes.style)) {\n        warn(\"Unsupported SVG node explicit style attribute\", virtualSvg.attributes.style);\n      } else {\n        // width will be determined by height\n        delete virtualSvg.attributes.style;\n      }\n    }\n    virtualSvg.attributes.height = height.toString();\n    virtualSvg.attributes.fill = this._state.color;\n    const svgNode = new SvgNode(virtualSvg, state.minWidth, state.classes);\n    svgNode.setPosition(state.nextX, state.y);\n    svgNode.bounds.set({ height });\n    svgNode.margin.set({\n      left: state.marginLeft,\n      right: state.marginRight,\n    });\n    this._state.vlist.addCell(svgNode);\n    this._state = this._state.withResetMargin();\n  }\n\n  private _createTextNode(node: katex.domTree.VirtualNode) {\n    // The '' is NOT an empty string. It's some invisible character (U+200B)\n    // aka ZERO-WIDTH Space\n    if (isSymbolNode(node) && node.text !== \"​\") {\n      const state = this._state;\n      const textNode = new TextNode(node.text, state.font, state.color, state.classes);\n      // const width = parseFloat(node.style.width?.replace(\"em\", \"\") ?? \"0\") * state.em;\n      // const height = parseFloat(node.style.height?.replace(\"em\", \"\") ?? \"0\") * state.em;\n      textNode.setPosition(state.nextX, state.y);\n      textNode.margin.set({\n        left: state.marginLeft,\n        right: state.marginRight,\n      });\n      // textNode.setSize(width, height);\n      this._state.vlist.addCell(textNode);\n      this._state = this._state.withResetMargin();\n    }\n  }\n\n  private _createItalicNode(node: katex.domTree.VirtualNode) {\n    if (isSymbolNode(node)) {\n      const italic = this._state.em * node.italic;\n      const italicNode = new HPaddingNode(this._state.classes);\n      italicNode.setPosition(this._state.nextX, 0);\n      italicNode.bounds.set({ width: italic });\n      this._state.vlist.addCell(italicNode);\n      this._state = this._state.withResetMargin();\n    }\n  }\n}\n"]}