{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/NetworkReplicator.ts"],"names":["NetworkReplicator","sendMessageToPlatform","payload","parent","postMessage","Director","director","game","EDITOR","BiDirectionalMap","SimpleEvent","error","info","warn","RELOAD_PAYLOAD","_screenShotRequested","_analyticsInjected","_registeredEvents","_analyticsData","_enabled","screenShotRequested","expose","analyticsInjected","isAnalyticsWorking","enabled","value","_init","window","addEventListener","onMessageFromPlatform","bind","removeEventListener","sendEvent","event","type","PayloadType","ACTIVITY_EVENT","message","sendState","syncData","GET_ACTIVITY_STATE","requestState","propagateReload","RELOAD_APPLET","sendScreenShot","imageURI","SEND_SCREEN_CAPTURE","requestAnalyticsData","ANALYTICS","sendAnalyticsData","current_q","correctAnswers","isLastQuestion","totalQuestions","length","qIndex","questions","answeredCorrectly","marks","reduce","question","allAnsweredCorrectly","q","lmsQuizCompleted","sendError","args","ACTIVITY_ERROR","JSON","stringify","registerEvent","index","size","toString","set","getEventId","getKey","getEvent","id","getValue","e","source","data","origin","activityState","Object","prototype","hasOwnProperty","call","stateData","handler","updateStateData","entries","getStateData","restart","clear","GET_SCREEN_CAPTURE","trigger","onActivityEvent","name","LOCK_APPLET","pause","isPaused","resume","getScene","once","EVENT_AFTER_SCENE_LAUNCH","networkReplicator"],"mappings":"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","sourcesContent":["import { Director, director, game } from \"cc\";\nimport { EDITOR } from \"cc/env\";\nimport { BiDirectionalMap } from \"./BiDirectionalMap\";\nimport { SimpleEvent } from \"./LiteEvent\";\nimport { error, info, warn } from \"./Logger\";\n\nconst enum PayloadType {\n  GET_ACTIVITY_STATE = \"GetActivityState\",\n  RELOAD_APPLET = \"ReloadApplet\",\n  GET_SCREEN_CAPTURE = \"GetScreenCapture\",\n  SEND_SCREEN_CAPTURE = \"ScreenCapture\",\n  ACTIVITY_EVENT = \"ActivityState\",\n  LOCK_APPLET = \"LockApplet\",\n  ANALYTICS = \"Analytics\",\n  ACTIVITY_ERROR = \"ActivityError\",\n}\n\nconst RELOAD_PAYLOAD = \"HOME\";\n\ninterface NetworkPayload {\n  type: PayloadType;\n  message: unknown;\n}\n\nexport interface ActivityEvent {\n  id: string;\n  name: string;\n  data?: unknown;\n}\n\nexport interface AnalyticsData {\n  totalQuestions: number;\n  current_q: number;\n  questions: { answeredCorrectly: boolean }[];\n  marks: number;\n  lmsQuizCompleted: boolean;\n}\n\nexport interface IReplicatedEvent {\n  onActivityEvent?(name: string, data?: unknown): void;\n  getStateData?(): unknown;\n  updateStateData?(data: unknown): void;\n}\n\n// Send message from applet to platform.\nfunction sendMessageToPlatform(payload: NetworkPayload) {\n  info(\"Message to platform:\", payload);\n  parent.postMessage(payload, \"*\");\n}\n\nclass NetworkReplicator {\n  private readonly _screenShotRequested = new SimpleEvent<void>();\n\n  private readonly _analyticsInjected = new SimpleEvent<AnalyticsData>();\n\n  private _registeredEvents = new BiDirectionalMap<string, IReplicatedEvent>();\n\n  private _analyticsData: AnalyticsData | null = null;\n\n  private _enabled = false;\n\n  /**\n   * Event triggered when screen shot is requested by the platform.\n   */\n  get screenShotRequested() {\n    return this._screenShotRequested.expose();\n  }\n\n  get analyticsInjected() {\n    return this._analyticsInjected.expose();\n  }\n\n  get isAnalyticsWorking() {\n    return this._analyticsData != null;\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    if (value === this._enabled) return;\n    this._enabled = value;\n    if (this._enabled) {\n      this._init();\n      // Recieve message from platform to applet.\n      // Subscribe to the event `window.onmessage`.\n      window.addEventListener(\"message\", this.onMessageFromPlatform.bind(this));\n    } else {\n      window.removeEventListener(\"message\", this.onMessageFromPlatform.bind(this));\n    }\n  }\n\n  /**\n   * Send an event from the activity to the platform (and hence other\n   * participants).\n   * @param event The `ActivityEvent` that needs to be transmitted.\n   */\n  sendEvent(event: ActivityEvent) {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.ACTIVITY_EVENT,\n      message: event,\n    });\n  }\n\n  /**\n   * Send the state of the activity as an JSON object to the platform, which\n   * allows other participants to synchronize their state.\n   * @param syncData The `SyncData` object that contains the state.\n   */\n  sendState(syncData: unknown) {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.GET_ACTIVITY_STATE,\n      message: syncData,\n    });\n  }\n\n  requestState() {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.GET_ACTIVITY_STATE,\n      message: null,\n    });\n  }\n\n  /**\n   * Send a message to platform to request other participants to reload.\n   * NOTE: This should be used after reload is performed on this applet.\n   */\n  propagateReload() {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.RELOAD_APPLET,\n      message: RELOAD_PAYLOAD,\n    });\n  }\n\n  /**\n   * Send the the canvas element link, which contains the screen shot image,\n   * to the platform. The platform can then download the image or display\n   * it.\n   * @param imageURI The URI to the canvas element that contains the screen\n   * shot.\n   */\n  sendScreenShot(imageURI: string) {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.SEND_SCREEN_CAPTURE,\n      message: imageURI,\n    });\n  }\n\n  requestAnalyticsData() {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.ANALYTICS,\n      message: null,\n    });\n  }\n\n  sendAnalyticsData(current_q: number, correctAnswers: boolean[], isLastQuestion: boolean) {\n    if (!this._enabled) return;\n    if (this._analyticsData == null) {\n      warn(\"Analytics is disabled!\");\n      return;\n    }\n\n    const totalQuestions = correctAnswers.length;\n    const qIndex = current_q - 1;\n    if (qIndex > -1) {\n      this._analyticsData.current_q = current_q;\n      this._analyticsData.questions[qIndex].answeredCorrectly = correctAnswers[qIndex];\n      this._analyticsData.totalQuestions = totalQuestions;\n    }\n    this._analyticsData.marks = this._analyticsData.questions.reduce(\n      (marks, question) => (question.answeredCorrectly ? marks + 1 : marks),\n      0,\n    );\n\n    let allAnsweredCorrectly = totalQuestions === this._analyticsData.marks;\n    for (let q = 0; q < totalQuestions; q++) {\n      if (this._analyticsData.questions[q].answeredCorrectly !== true) {\n        allAnsweredCorrectly = false;\n      }\n    }\n    this._analyticsData.lmsQuizCompleted = allAnsweredCorrectly && isLastQuestion;\n\n    sendMessageToPlatform({\n      type: PayloadType.ANALYTICS,\n      message: this._analyticsData,\n    });\n    info(\"JSON Data sent to platform is \", this._analyticsData);\n  }\n\n  sendError(...args: any[]) {\n    if (!this._enabled) return;\n    sendMessageToPlatform({\n      type: PayloadType.ACTIVITY_ERROR,\n      message: JSON.stringify(args),\n    });\n  }\n\n  /**\n   * Register an `ReplicatedEvent` component attached to a node.\n   * This mainly gives the event an id that is used to identify the node\n   * during communication.\n   * @summary Taking advantage of the fact that life cycle callbacks in the\n   * scene is guaranteed to be the as the order of nodes in the scene tree\n   * in a depth first fashion. Hence given the same scene tree is used in\n   * all sessions we can assume the index remains the same. This index is\n   * used to identify the node an event replication.\n   * @param event The `ReplicatedEvent` component attached to a node that\n   * has events that needs to be replicated to the platform.\n   */\n  registerEvent(event: IReplicatedEvent) {\n    const index = this._registeredEvents.size.toString();\n    this._registeredEvents.set(index, event);\n    return index;\n  }\n\n  getEventId(event: IReplicatedEvent) {\n    return this._registeredEvents.getKey(event);\n  }\n\n  getEvent(id: string) {\n    return this._registeredEvents.getValue(id);\n  }\n\n  onMessageFromPlatform(e: MessageEvent) {\n    // Ignore message if origin is self.\n    if (e.source === window) {\n      return;\n    }\n\n    const payload = e.data as NetworkPayload;\n    info(\"Message from platform:\", e.origin, payload);\n\n    if (!payload.type) {\n      error(`Invalid message recieved from platform${payload}`);\n    }\n\n    switch (payload.type) {\n      case PayloadType.GET_ACTIVITY_STATE: {\n        if (payload.message) {\n          const activityState = payload.message as Record<string, unknown>;\n          for (const id in activityState) {\n            if (Object.prototype.hasOwnProperty.call(activityState, id)) {\n              const stateData = activityState[id];\n              const handler = this.getEvent(id);\n              if (handler && handler.updateStateData) {\n                handler.updateStateData(stateData);\n              }\n            }\n          }\n        } else {\n          const activityState: Record<string, unknown> = {};\n          for (const [id, handler] of this._registeredEvents.entries()) {\n            if (handler && handler.getStateData) {\n              const stateData = handler.getStateData();\n              if (stateData != null) activityState[id] = stateData;\n            }\n          }\n\n          this.sendState(activityState);\n        }\n        break;\n      }\n      case PayloadType.RELOAD_APPLET: {\n        game.restart();\n        this._registeredEvents.clear();\n        this._screenShotRequested.clear();\n        this._analyticsInjected.clear();\n        if (!payload.message) {\n          this.propagateReload();\n        }\n        break;\n      }\n      case PayloadType.GET_SCREEN_CAPTURE: {\n        if (!payload.message) {\n          this._screenShotRequested.trigger();\n        }\n        break;\n      }\n      case PayloadType.ACTIVITY_EVENT: {\n        const event = payload.message as ActivityEvent;\n        const handler = this.getEvent(event.id);\n        if (handler && handler.onActivityEvent) {\n          handler.onActivityEvent(event.name, event.data);\n        }\n        break;\n      }\n      case PayloadType.LOCK_APPLET: {\n        if (payload.message) {\n          game.pause();\n        } else if (game.isPaused()) {\n          game.resume();\n        }\n        break;\n      }\n      case PayloadType.ANALYTICS: {\n        this._analyticsData = payload.message as AnalyticsData;\n        info(\"The injected JSON is:\", this._analyticsData);\n        this._analyticsInjected.trigger(this._analyticsData);\n        break;\n      }\n\n      default:\n        error(`Unknown payload type: ${payload.type}`);\n    }\n  }\n\n  private _init() {\n    if (EDITOR) return;\n\n    if (director.getScene()) {\n      this.requestAnalyticsData();\n      this.requestState();\n    } else {\n      director.once(\n        Director.EVENT_AFTER_SCENE_LAUNCH,\n        () => {\n          this.requestAnalyticsData();\n          this.requestState();\n        },\n        this,\n      );\n    }\n  }\n}\n\nexport const networkReplicator = new NetworkReplicator();\n"]}