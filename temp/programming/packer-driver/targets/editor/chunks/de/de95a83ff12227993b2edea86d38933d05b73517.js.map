{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/SnapRearrange/assets/Rearrange.ts"],"names":["_decorator","Component","Node","UITransform","instantiate","Layout","AS","UIDrag","UIDragSwap","ccclass","property","Rearrange","_dragContainerUItranform","awake","dragContainer","getComponent","dragOptions","forEach","dragOption","i","node","on","EventType","DRAG_DID_END","_dragOptionEnd","DRAG_DID_BEGAN","_dragOptionStart","console","log","position","x","width","y","height","newOption","getPosition","removeComponent","parent","name","updateLayout","addComponent","_addEventListeners","onEnable","active","childPos","children","length","child","otherDrag","otherDragUITransform","d","k","draggedOption","temp","p","_containerDragEnd","drag","destroy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAmBC,MAAAA,I,OAAAA,I;AAAqBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;;AAC9EC,MAAAA,E,iBAAAA,E;;AAEAC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,U,iBAAAA,U;;;;;;;OAIH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;2BAGjBW,S,WADZF,OAAO,CAAC,WAAD,C,UAGHC,QAAQ,CAACR,IAAD,C,UACRQ,QAAQ;AAAA;AAAA,2B,2BAJb,MACaC,SADb,SAC+B;AAAA;AAAA,oBAAGV,SAAH,CAD/B,CAC6C;AAAA;AAAA;;AAAA;;AAAA;;AAAA,eAMjCW,wBANiC;AAAA;;AAQzCC,QAAAA,KAAK,GAAE;AACH,eAAKD,wBAAL,GAAgC,KAAKE,aAAL,CAAmBC,YAAnB,CAAgCZ,WAAhC,CAAhC;AACA,eAAKa,WAAL,CAAiBC,OAAjB,CAAyB,CAACC,UAAD,EAAaC,CAAb,KAAiB;AACtCD,YAAAA,UAAU,CAACE,IAAX,CAAgBC,EAAhB,CAAmB;AAAA;AAAA,kCAAOC,SAAP,CAAiBC,YAApC,EAAkD,MAAI;AAClD,mBAAKC,cAAL,CAAoBN,UAApB,EAA+BC,CAA/B;AACH,aAFD;AAGAD,YAAAA,UAAU,CAACE,IAAX,CAAgBC,EAAhB,CAAmB;AAAA;AAAA,kCAAOC,SAAP,CAAiBG,cAApC,EAAoD,MAAI,CACrD;AACF,aAFD;AAGH,WAPD;AASH;;AACOC,QAAAA,gBAAgB,CAACR,UAAD,EAAYC,CAAZ,EAAc;AAElCQ,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAcT,CAA1B;AAIH;;AAEOK,QAAAA,cAAc,CAACN,UAAD,EAAYC,CAAZ,EAAc;AAEhC,cAAID,UAAU,CAACE,IAAX,CAAgBS,QAAhB,CAAyBC,CAAzB,IAA8B,KAAKhB,aAAL,CAAmBe,QAAnB,CAA4BC,CAA5B,GAAiC,KAAKlB,wBAAL,CAA8BmB,KAA9B,GAAsC,CAArG,IAA2Gb,UAAU,CAACE,IAAX,CAAgBS,QAAhB,CAAyBC,CAAzB,IAA8B,KAAKhB,aAAL,CAAmBe,QAAnB,CAA4BC,CAA5B,GAAiC,KAAKlB,wBAAL,CAA8BmB,KAA9B,GAAsC,CAAhN,IAAsNb,UAAU,CAACE,IAAX,CAAgBS,QAAhB,CAAyBG,CAAzB,IAA8B,KAAKlB,aAAL,CAAmBe,QAAnB,CAA4BG,CAA5B,GAAiC,KAAKpB,wBAAL,CAA8BqB,MAA9B,GAAuC,CAA5T,IAAkUf,UAAU,CAACE,IAAX,CAAgBS,QAAhB,CAAyBG,CAAzB,IAA8B,KAAKlB,aAAL,CAAmBe,QAAnB,CAA4BG,CAA5B,GAAiC,KAAKpB,wBAAL,CAA8BqB,MAA9B,GAAuC,CAA5a,EACA;AACQ,gBAAIC,SAAS,GAAG9B,WAAW,CAACc,UAAU,CAACE,IAAZ,CAA3B;AACA,kBAAMS,QAAQ,GAAGK,SAAS,CAACC,WAAV,EAAjB;AACAD,YAAAA,SAAS,CAACE,eAAV;AAAA;AAAA;AACAF,YAAAA,SAAS,CAACG,MAAV,GAAmB,KAAKvB,aAAxB;AACAoB,YAAAA,SAAS,CAACI,IAAV,GAAiBpB,UAAU,CAACoB,IAA5B;AACA,iBAAKxB,aAAL,CAAmBC,YAAnB,CAAgCV,MAAhC,EAAwCkC,YAAxC;AACAL,YAAAA,SAAS,CAACM,YAAV;AAAA;AAAA;;AAEA,iBAAKC,kBAAL,CAAwBP,SAAxB;;AACA,iBAAKpB,aAAL,CAAmBC,YAAnB;AAAA;AAAA,0CAA4C2B,QAA5C;AACAxB,YAAAA,UAAU,CAACE,IAAX,CAAgBuB,MAAhB,GAAyB,KAAzB,CAXR,CAYM;;AAGE,iBAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAK9B,aAAL,CAAmB+B,QAAnB,CAA4BC,MAA9D,EAAsEF,QAAQ,EAA9E,EAAkF;AAE9E,oBAAMG,KAAK,GAAG,KAAKjC,aAAL,CAAmB+B,QAAnB,CAA4BD,QAA5B,CAAd;AACA,oBAAMI,SAAS,GAAGD,KAAK,CAAChC,YAAN;AAAA;AAAA,mCAAlB;;AACA,kBAAGiC,SAAS,IAAIA,SAAS,KAAKd,SAAS,CAACnB,YAAV;AAAA;AAAA,mCAA9B,EACA;AAAK,sBAAMkC,oBAAoB,GAAGD,SAAS,CAACjC,YAAV,CAAuBZ,WAAvB,CAA7B;;AAGR,oBAAI0B,QAAQ,CAACC,CAAT,IAAckB,SAAS,CAAC5B,IAAV,CAAeS,QAAf,CAAwBC,CAAxB,GAA6BmB,oBAAoB,CAAClB,KAArB,GAA6B,CAAxE,IAA8EF,QAAQ,CAACC,CAAT,IAAckB,SAAS,CAAC5B,IAAV,CAAeS,QAAf,CAAwBC,CAAxB,GAA6BmB,oBAAoB,CAAClB,KAArB,GAA6B,CAAtJ,IAA4JF,QAAQ,CAACG,CAAT,IAAcgB,SAAS,CAAC5B,IAAV,CAAeS,QAAf,CAAwBG,CAAxB,GAA6BiB,oBAAoB,CAAChB,MAArB,GAA8B,CAArO,IAA2OJ,QAAQ,CAACG,CAAT,IAAcgB,SAAS,CAAC5B,IAAV,CAAeS,QAAf,CAAwBG,CAAxB,GAA6BiB,oBAAoB,CAAChB,MAArB,GAA8B,CAAxT,EACD;AACIN,kBAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADJ,CAEE;;AACE,uBAAKd,aAAL,CAAmB+B,QAAnB,CAA4B5B,OAA5B,CAAoC,CAACiC,CAAD,EAAGC,CAAH,KAAO;AACvCxB,oBAAAA,OAAO,CAACC,GAAR,CAAY,SAAOuB,CAAP,GAAS,IAAT,GAAcD,CAAC,CAACZ,IAA5B;AACH,mBAFD;AAIA,sBAAIc,aAAa,GAAG,KAAKtC,aAAL,CAAmB+B,QAAnB,CAA4B,KAAK/B,aAAL,CAAmB+B,QAAnB,CAA4BC,MAA5B,GAAmC,CAA/D,CAApB;AACA,sBAAIO,IAAI,GAAG,EAAX;;AAEA,uBAAI,IAAIC,CAAC,GAAI,KAAKxC,aAAL,CAAmB+B,QAAnB,CAA4BC,MAA5B,GAAmC,CAAhD,EAAmDQ,CAAC,GAACV,QAArD,EAA+DU,CAAC,EAAhE,EACI,KAAKxC,aAAL,CAAmB+B,QAAnB,CAA4BS,CAA5B,IAAiC,KAAKxC,aAAL,CAAmB+B,QAAnB,CAA4BS,CAAC,GAAC,CAA9B,CAAjC;;AAEJ,uBAAKxC,aAAL,CAAmB+B,QAAnB,CAA4BD,QAA5B,IAAwCQ,aAAxC;AAIA,uBAAKtC,aAAL,CAAmB+B,QAAnB,CAA4B5B,OAA5B,CAAoC,CAACiC,CAAD,EAAGC,CAAH,KAAO;AACvCxB,oBAAAA,OAAO,CAACC,GAAR,CAAY,YAAUuB,CAAV,GAAY,IAAZ,GAAiBD,CAAC,CAACZ,IAA/B;AACA;AACxB;AACA;AACA;AAEqB,mBAPD;AASD;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKsB;AACD;AACF;AACF,aApET,CAqEQ;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAMP;AAEJ;;AACOiB,QAAAA,iBAAiB,CAACC,IAAD,EAAM;AAC3B,cAAI,EAAEA,IAAI,CAAC3B,QAAL,CAAcC,CAAd,IAAmB,KAAKhB,aAAL,CAAmBe,QAAnB,CAA4BC,CAA5B,GAAiC,KAAKlB,wBAAL,CAA8BmB,KAA9B,GAAsC,CAA1F,IAAgGyB,IAAI,CAAC3B,QAAL,CAAcC,CAAd,IAAmB,KAAKhB,aAAL,CAAmBe,QAAnB,CAA4BC,CAA5B,GAAiC,KAAKlB,wBAAL,CAA8BmB,KAA9B,GAAsC,CAA1L,IAAgMyB,IAAI,CAAC3B,QAAL,CAAcG,CAAd,IAAmB,KAAKlB,aAAL,CAAmBe,QAAnB,CAA4BG,CAA5B,GAAiC,KAAKpB,wBAAL,CAA8BqB,MAA9B,GAAuC,CAA3R,IAAiSuB,IAAI,CAAC3B,QAAL,CAAcG,CAAd,IAAmB,KAAKlB,aAAL,CAAmBe,QAAnB,CAA4BG,CAA5B,GAAiC,KAAKpB,wBAAL,CAA8BqB,MAA9B,GAAuC,CAA9X,CAAJ,EACA;AACI,iBAAI,IAAId,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAE,KAAKH,WAAL,CAAiB8B,MAAjC,EAAyC3B,CAAC,EAA1C,EACA;AACI,kBAAG,KAAKH,WAAL,CAAiBG,CAAjB,EAAoBmB,IAApB,IAA4BkB,IAAI,CAAClB,IAApC,EACA;AACI,qBAAKtB,WAAL,CAAiBG,CAAjB,EAAoBC,IAApB,CAAyBuB,MAAzB,GAAkC,IAAlC;AACAa,gBAAAA,IAAI,CAACC,OAAL;AACA,qBAAK3C,aAAL,CAAmB+B,QAAnB,CAA4B5B,OAA5B,CAAoC,CAACC,UAAD,EAAaC,CAAb,KAAiB;AACjDD,kBAAAA,UAAU,CAACkB,eAAX;AAAA;AAAA;AACA,uBAAKtB,aAAL,CAAmBC,YAAnB,CAAgCV,MAAhC,EAAwCkC,YAAxC;AACArB,kBAAAA,UAAU,CAACsB,YAAX;AAAA;AAAA;AACH,iBAJD;AAKA;AACH;AACJ;AACJ;AAEJ;;AACOC,QAAAA,kBAAkB,CAACe,IAAD,EAAO;AAE7BA,UAAAA,IAAI,CAACnC,EAAL,CAAQ;AAAA;AAAA,gCAAOC,SAAP,CAAiBC,YAAzB,EAAuC,MAAI;AACvC,iBAAKgC,iBAAL,CAAuBC,IAAvB;AACH,WAFD;AAGH;;AA/IwC,O;;;;;iBAEI,I;;;;;;;iBACI,E","sourcesContent":["import { _decorator, Component, Button, Node, Sprite, Color, UITransform, instantiate, Layout, Vec3} from 'cc';\nimport { AS } from \"db://as_framework/scripts/ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { UIDrag } from 'db://as_framework/scripts/UIDrag';\nimport { UIDragSwap } from 'db://as_framework/scripts/UIDragSwap';\nimport { UIDrop } from 'db://as_framework/scripts/UIDrop';\nimport { intersectionPercent } from \"db://as_framework/scripts/Utils\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Rearrange')\nexport class Rearrange extends AS(Component) {\n\n    @property(Node)dragContainer : Node | null = null;\n    @property(UIDrag)dragOptions : UIDrag[] | null = [];\n\n\n    private _dragContainerUItranform : UITransform;\n\n    awake(){\n        this._dragContainerUItranform = this.dragContainer.getComponent(UITransform);\n        this.dragOptions.forEach((dragOption, i)=>{\n            dragOption.node.on(UIDrag.EventType.DRAG_DID_END, ()=>{\n                this._dragOptionEnd(dragOption,i);\n            })\n            dragOption.node.on(UIDrag.EventType.DRAG_DID_BEGAN, ()=>{\n               // this._dragOptionStart(dragOption,i);\n            })\n        })\n       \n    }\n    private _dragOptionStart(dragOption,i){\n\n        console.log(\"drag starts\"+i)\n\n\n\n    }\n\n    private _dragOptionEnd(dragOption,i){   \n             \n        if (dragOption.node.position.x <= this.dragContainer.position.x + (this._dragContainerUItranform.width / 2) && dragOption.node.position.x >= this.dragContainer.position.x - (this._dragContainerUItranform.width / 2) && dragOption.node.position.y <= this.dragContainer.position.y + (this._dragContainerUItranform.height / 2) && dragOption.node.position.y >= this.dragContainer.position.y - (this._dragContainerUItranform.height / 2)) \n        {\n                let newOption = instantiate(dragOption.node);\n                const position = newOption.getPosition();\n                newOption.removeComponent(UIDrag);\n                newOption.parent = this.dragContainer;\n                newOption.name = dragOption.name;\n                this.dragContainer.getComponent(Layout).updateLayout()\n                newOption.addComponent(UIDrag);\n            \n                this._addEventListeners(newOption)\n                this.dragContainer.getComponent(UIDragSwap).onEnable()\n                dragOption.node.active = false;\n              //  let swap =false;\n          \n\n                for (let childPos = 0; childPos < this.dragContainer.children.length; childPos++) {\n                \n                    const child = this.dragContainer.children[childPos];\n                    const otherDrag = child.getComponent(UIDrag);\n                    if(otherDrag && otherDrag !== newOption.getComponent(UIDrag))\n                    {    const otherDragUITransform = otherDrag.getComponent(UITransform)!;\n\n                \n                 if (position.x <= otherDrag.node.position.x + (otherDragUITransform.width / 2) && position.x >= otherDrag.node.position.x - (otherDragUITransform.width / 2) && position.y <= otherDrag.node.position.y + (otherDragUITransform.height / 2) && position.y >= otherDrag.node.position.y - (otherDragUITransform.height / 2))    \n                {\n                    console.log(\"inside\")\n                  //  swap = true;\n                    this.dragContainer.children.forEach((d,k)=>{\n                        console.log(\"drag\"+k+\"--\"+d.name)\n                    })\n\n                    let draggedOption = this.dragContainer.children[this.dragContainer.children.length-1]\n                    let temp = [];\n\n                    for(let p =  this.dragContainer.children.length-1; p>childPos; p--) \n                        this.dragContainer.children[p] = this.dragContainer.children[p-1]\n\n                    this.dragContainer.children[childPos] = draggedOption;\n\n\n                   \n                    this.dragContainer.children.forEach((d,k)=>{\n                        console.log(\"aftdrag\"+k+\"--\"+d.name)\n                        /* let  te  = instantiate(d)\n                        //te.removeComponent(UIDrag)\n                        te.name = d.name;\n                        temp.push(te)*/\n\n                    })\n\n                   /*  this.dragContainer.removeAllChildren()\n\n                    temp.forEach((drag,k)=>{\n\n                        drag.removeComponent(UIDrag)\n                        drag.parent = this.dragContainer;\n                        this.dragContainer.getComponent(Layout).updateLayout()\n                        drag.addComponent(UIDrag);\n                        this._addEventListeners(drag)\n                        console.log(\"drag elem\"+k+\"--\"+this.dragContainer.children[k].position)\n\n                        this.dragContainer.getComponent(UIDragSwap).onEnable()\n                    })\n */\n\n                      break;\n                    }\n                  }\n                }\n                // if(!swap)\n                // {newOption.removeComponent(UIDrag);\n                // newOption.parent = this.dragContainer;\n                // newOption.name = dragOption.name;\n                // this.dragContainer.getComponent(Layout).updateLayout()\n                // newOption.addComponent(UIDrag);\n    \n                // this._addEventListeners(newOption)\n                // this.dragContainer.getComponent(UIDragSwap).onEnable()\n                // dragOption.node.active = false;}\n\n\n\n\n\n        }\n\n    }\n    private _containerDragEnd(drag){                \n        if (!(drag.position.x <= this.dragContainer.position.x + (this._dragContainerUItranform.width / 2) && drag.position.x >= this.dragContainer.position.x - (this._dragContainerUItranform.width / 2) && drag.position.y <= this.dragContainer.position.y + (this._dragContainerUItranform.height / 2) && drag.position.y >= this.dragContainer.position.y - (this._dragContainerUItranform.height / 2)) )\n        {\n            for(let i=0; i< this.dragOptions.length; i++)\n            {\n                if(this.dragOptions[i].name == drag.name)\n                {\n                    this.dragOptions[i].node.active = true;\n                    drag.destroy();\n                    this.dragContainer.children.forEach((dragOption, i)=>{\n                        dragOption.removeComponent(UIDrag);\n                        this.dragContainer.getComponent(Layout).updateLayout()\n                        dragOption.addComponent(UIDrag);\n                    })\n                    break;\n                }\n            }\n        }\n\n    }\n    private _addEventListeners(drag) {\n        \n        drag.on(UIDrag.EventType.DRAG_DID_END, ()=>{\n            this._containerDragEnd(drag);\n        })\n    }\n}\n\n"]}