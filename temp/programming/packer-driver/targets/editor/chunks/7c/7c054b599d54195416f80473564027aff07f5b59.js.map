{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/UITheme.ts"],"names":["color","_decorator","ccclass","property","Alignment","Display","FlexDirection","Justify","Overflow","OverflowClipBox","Position","ScaleMode","TextOverflow","TextOverflowPosition","TextAnchor","Visibility","WhiteSpace","Wrap","UITheme","STRETCH","SCALE_AND_CROP","FLEX","COLUMN","NO_WRAP","START","VISIBLE","PADDING_BOX","RELATIVE","CLIP","MIDDLE_CENTER","END","NORMAL"],"mappings":"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","sourcesContent":["import { color, Color, Font, SpriteFrame, _decorator } from \"cc\";\nconst { ccclass, property } = _decorator;\n\nenum Alignment {\n  /**\n   * Let the layout engine decide.\n   */\n  AUTO,\n  /**\n   * Start margin of the item is placed at the start of the axis.\n   */\n  START,\n  /**\n   * Items are centered on the axis.\n   */\n  CENTER,\n  /**\n   * End margin of the item is placed at the end of the axis.\n   */\n  END,\n  /**\n   * Default. stretch to fill the axis while respecting min/max values.\n   */\n  STRETCH,\n  BASELINE,\n  SPACE_BETWEEN,\n  SPACE_AROUND,\n}\n\nenum Display {\n  FLEX,\n  NONE,\n}\n\nenum FlexDirection {\n  /**\n   * Top to Bottom.\n   */\n  COLUMN,\n  /**\n   * Bottom to Top.\n   */\n  COLUMN_REVERSE,\n  /**\n   * Left to Right.\n   */\n  ROW,\n  /**\n   * Right to Left.\n   */\n  ROW_REVERSE,\n}\n\n/**\n * Defines the alignment along the main axis, how is extra space distributed.\n */\nenum Justify {\n  /**\n   * Items are packed toward the start line. Default Value.\n   */\n  START,\n  /**\n   * Items are centered along the line.\n   */\n  CENTER,\n  /**\n   * Items are packed toward the end line.\n   */\n  END,\n  /**\n   * Items are evenly distributed in the line; first item is on the start line, last item on the end line.\n   */\n  SPACE_BETWEEN,\n  /**\n   * Items are evenly distributed in the line with equal space around them.\n   */\n  SPACE_AROUND,\n}\n\n/**\n * Defines what should happend if content overflows an element bounds.\n */\nenum Overflow {\n  /**\n   * The overflow is not clipped. It renders outside the element's box. Default Value.\n   */\n  VISIBLE,\n  /**\n   * The overflow is clipped, and the rest of the content will be invisible.\n   */\n  HIDDEN,\n}\n\n/**\n * Boxes against which the VisualElement content is clipped.\n */\nenum OverflowClipBox {\n  /**\n   * Clip the content against the box outside the padding areas but inside the borders.\n   */\n  PADDING_BOX,\n  /**\n   * Clip the content against the box inside the padding areas.\n   */\n  CONTENT_BOX,\n}\n\n/**\n * Defines how the position values are interpreted by the layout engine.\n */\nenum Position {\n  /**\n   * The element is positioned in relation to its default box as calculated by layout.\n   */\n  RELATIVE,\n  /**\n   * The element is positioned in relation to its parent box and does not contribute to the layout anymore.\n   */\n  ABSOLUTE,\n}\n\n/**\n * Scaling mode to draw textures with.\n */\nenum ScaleMode {\n  /**\n   * Stretches the texture to fill the complete rectangle.\n   */\n  STRETCH_TO_FILL,\n  /**\n   * Scales the texture, maintaining aspect ratio, so it completely covers the position rectangle.\n   * If the texture is being draw to a rectangle with a different aspect ratio than the original, the image is cropped.\n   */\n  SCALE_AND_CROP,\n  /**\n   * Scales the texture, maintaining aspect ratio, so it completely fits withing the position rectangle.\n   */\n  SCALE_TO_FIT,\n}\n\n/**\n * Specifies how the text Element treats hidden overflow content.\n */\nenum TextOverflow {\n  /**\n   * The Element clips overflow content and hides it. This is the default value.\n   */\n  CLIP,\n  /**\n   * The Element clips overflow content and hides it, but displays an ellipsis (\"...\") to indicate that clipped content exists.\n   */\n  Ellipsis,\n}\n\n/**\n * Specifies which part of the text the Element replaces with an ellipsis when textOverflow is set to TextOverflow.Ellipsis.\n */\nenum TextOverflowPosition {\n  /**\n   * The ellipsis replaces content at the end of the text. This is the default value.\n   */\n  END,\n  /**\n   * The ellipsis replaces content at the beginning of the text.\n   */\n  START,\n  /**\n   * The ellipsis replaces content in the middle of the text.\n   */\n  MIDDLE,\n}\n\n/**\n * Where the anchor of the text is placed.\n */\nenum TextAnchor {\n  /**\n   * Text is anchored in upper left corner.\n   */\n  UPPER_LEFT,\n  /**\n   * Text is anchored in upper side, centered horizontally.\n   */\n  UPPER_CENTER,\n  /**\n   * Text is anchored in upper right corner.\n   */\n  UPPER_RIGHT,\n  /**\n   * Text is anchored in left side, centered vertically.\n   */\n  MIDDLE_LEFT,\n  /**\n   * Text is centered both horizontally and vertically.\n   */\n  MIDDLE_CENTER,\n  /**\n   * Text is anchored in right side, centered vertically.\n   */\n  MIDDLE_RIGHT,\n  /**\n   * Text is anchored in lower left corner.\n   */\n  LOWER_LEFT,\n  /**\n   * Text is anchored in lower side, centered horizontally.\n   */\n  LOWER_CENTER,\n  /**\n   * Text is anchored in lower right corner.\n   */\n  LOWER_RIGHT,\n}\n\n/**\n * Specifies whether or not a VisualElement is visible.\n */\nenum Visibility {\n  /**\n   * The VisualElement is visible. Default Value.\n   */\n  VISIBLE,\n  /**\n   * The VisualElement is hidden. Hidden VisualElements will take up space in their parent layout\n   * if their positionType is set to PositionType.Relative. Use the display property to both hide\n   * and remove a VisualElement from the parent VisualElement layout.\n   */\n  HIDDEN,\n}\n\n/**\n * Word wrapping over multiple lines if not enough space is available to draw the text of an element.\n */\nenum WhiteSpace {\n  /**\n   * Text will wrap when necessary.\n   */\n  NORMAL,\n  /**\n   * Text will never wrap to the next line.\n   */\n  NO_WRAP,\n}\n\nenum Wrap {\n  /**\n   * All items will be on one line. Default Value.\n   */\n  NO_WRAP,\n  /**\n   * Items will wrap onto multiple lines, from top to bottom.\n   */\n  WRAP,\n  WRAP_REVERSE,\n}\n\nexport interface IUITheme {\n  /**\n   * Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.\n   */\n  alignContent: Alignment;\n  /**\n   * Alignment of children on the cross axis of this container.\n   */\n  alignItems: Alignment;\n  /**\n   * Similar to align-items, but only for this specific element.\n   */\n  alignSelf: Alignment;\n  /**\n   * Background color to paint in the element's box.\n   */\n  backgroundColor: Color;\n  /**\n   * Background image to paint in the element's box.\n   */\n  backgroundImage: SpriteFrame | null;\n  /**\n   * Tinting color for the element's backgroundImage.\n   */\n  backgroundImageTintColor: Color;\n  /**\n   * Background image scaling in the element's box.\n   */\n  backgroundImageScaleMode: ScaleMode;\n  /**\n   * Size of the 9-slice's bottom edge when painting an element's background image.\n   */\n  backgroundImageSliceBottom: number;\n  /**\n   * Size of the 9-slice's left edge when painting an element's background image.\n   */\n  backgroundImageSliceLeft: number;\n  /**\n   * Size of the 9-slice's right edge when painting an element's background image.\n   */\n  backgroundImageSliceRight: number;\n  /**\n   * Size of the 9-slice's top edge when painting an element's background image.\n   */\n  backgroundImageSliceTop: number;\n  /**\n   * Color of the element's bottom border.\n   */\n  borderBottomColor: Color;\n  /**\n   * The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.\n   */\n  borderBottomLeftRadius: number;\n  /**\n   * The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.\n   */\n  borderBottomRightRadius: number;\n  /**\n   * Space reserved for the bottom edge of the border during the layout phase.\n   */\n  borderBottomWidth: number;\n  /**\n   * Color of the element's left border.\n   */\n  borderLeftColor: Color;\n  /**\n   * Space reserved for the left edge of the border during the layout phase.\n   */\n  borderLeftWidth: number;\n  /**\n   * Color of the element's right border.\n   */\n  borderRightColor: Color;\n  /**\n   * Space reserved for the right edge of the border during the layout phase.\n   */\n  borderRightWidth: number;\n  /**\n   * Color of the element's top border.\n   */\n  borderTopColor: Color;\n  /**\n   * The radius of the top-left corner when a rounded rectangle is drawn in the element's box.\n   */\n  borderTopLeftRadius: number;\n  /**\n   * The radius of the top-right corner when a rounded rectangle is drawn in the element's box.\n   */\n  borderTopRightRadius: number;\n  /**\n   * Space reserved for the top edge of the border during the layout phase.\n   */\n  borderTopWidth: number;\n  /**\n   * Bottom distance from the element's box during layout.\n   */\n  bottom: number;\n  /**\n   * Color to use when drawing the text of an element.\n   */\n  color: Color;\n  /**\n   * Mouse cursor to display when the mouse pointer is over an element.\n   */\n  cursor: string;\n  /**\n   * Defines how an element is displayed in the layout.\n   */\n  display: Display;\n  /**\n   * Initial main size of a flex item, on the main flex axis. The final layout mught be smaller or\n   * larger, according to the flex shrinking and growing determined by the flex property.\n   */\n  flexBasis: number;\n  /**\n   * Direction of the main axis to layout children in a container.\n   */\n  flexDirection: FlexDirection;\n  /**\n   * Specifies how much the item will grow relative to the rest of the flexible items inside the same container.\n   */\n  flexGrow: number;\n  /**\n   * Specifies how the item will shrink relative to the rest of the flexible items inside the same container.\n   */\n  flexShrink: number;\n  /**\n   * Placement of children over multiple lines if not enough space is available in this container.\n   */\n  flexWrap: Wrap;\n  /**\n   * Font to draw the element's text.\n   */\n  font: Font | null;\n  /**\n   * Font size to draw the element's text.\n   */\n  fontSize: number;\n  /**\n   * Fixed height of an element for the layout.\n   */\n  height: number;\n  /**\n   * Justification of children on the main axis of this container.\n   */\n  justifyContent: Justify;\n  /**\n   * Left distance from the element's box during layout.\n   */\n  left: number;\n  /**\n   * Space reserved for the bottom edge of the margin during the layout phase.\n   */\n  marginBottom: number;\n  /**\n   * Space reserved for the left edge of the margin during the layout phase.\n   */\n  marginLeft: number;\n  /**\n   * Space reserved for the right edge of the margin during the layout phase.\n   */\n  marginRight: number;\n  /**\n   * Space reserved for the top edge of the margin during the layout phase.\n   */\n  marginTop: number;\n  /**\n   * Maximum height for an element, when it is flexible or measures its own size.\n   */\n  maxHeight: number;\n  /**\n   * Maximum width for an element, when it is flexible or measures its own size.\n   */\n  maxWidth: number;\n  /**\n   * Minimum height for an element, when it is flexible or measures its own size.\n   */\n  minHeight: number;\n  /**\n   * Minimum width for an element, when it is flexible or measures its own size.\n   */\n  minWidth: number;\n  /**\n   * Specifies the transparency of an element.\n   */\n  opacity: number;\n  /**\n   * How a container behaves if its content overflows its own box.\n   */\n  overflow: Overflow;\n  /**\n   * Specifies which box the element content is clipped against.\n   */\n  overflowClipBox: OverflowClipBox;\n  /**\n   * Space reserved for the bottom edge of the padding during the layout phase.\n   */\n  paddingBottom: number;\n  /**\n   * Space reserved for the left edge of the padding during the layout phase.\n   */\n  paddingLeft: number;\n  /**\n   * Space reserved for the right edge of the padding during the layout phase.\n   */\n  paddingRight: number;\n  /**\n   * Space reserved for the top edge of the padding during the layout phase.\n   */\n  paddingTop: number;\n  /**\n   * Element's positioning in its parent container.\n   */\n  position: Position;\n  /**\n   * Right distance from the element's box during layout.\n   */\n  right: number;\n  /**\n   * The element's text overflow mode.\n   */\n  textOverflow: TextOverflow;\n  /**\n   * Top distance from the element's box during layout.\n   */\n  top: number;\n  /**\n   * Horizontal and vertical text alignment in the element's box.\n   */\n  textAlign: TextAnchor;\n  /**\n   * The element's text overflow position.\n   */\n  textOverflowPosition: TextOverflowPosition;\n  /**\n   * Specifies whether or not an element is visible.\n   */\n  visibility: Visibility;\n  /**\n   * Word wrapping over multiple lines if not enough space is available to draw the text of an element.\n   */\n  whiteSpace: WhiteSpace;\n  /**\n   * Fixed width of an element for the layout.\n   */\n  width: number;\n}\n\n@ccclass(\"UITheme\")\nexport class UITheme implements IUITheme {\n  @property alignContent = Alignment.STRETCH;\n\n  @property alignItems = Alignment.STRETCH;\n\n  @property alignSelf = Alignment.STRETCH;\n\n  @property backgroundColor = color();\n\n  @property backgroundImage: SpriteFrame | null = null;\n\n  @property backgroundImageTintColor = color();\n\n  @property backgroundImageScaleMode = ScaleMode.SCALE_AND_CROP;\n\n  @property backgroundImageSliceBottom: number = 0;\n\n  @property backgroundImageSliceLeft: number = 0;\n\n  @property backgroundImageSliceRight: number = 0;\n\n  @property backgroundImageSliceTop: number = 0;\n\n  @property borderBottomColor = color();\n\n  @property borderBottomLeftRadius: number = 0;\n\n  @property borderBottomRightRadius: number = 0;\n\n  @property borderBottomWidth: number = 0;\n\n  @property borderLeftColor = color();\n\n  @property borderLeftWidth: number = 0;\n\n  @property borderRightColor = color();\n\n  @property borderRightWidth: number = 0;\n\n  @property borderTopColor = color();\n\n  @property borderTopLeftRadius: number = 0;\n\n  @property borderTopRightRadius: number = 0;\n\n  @property borderTopWidth: number = 0;\n\n  @property bottom: number = 0;\n\n  @property color = color();\n\n  @property cursor = \"pointer\";\n\n  @property display = Display.FLEX;\n\n  @property flexBasis: number = 0;\n\n  @property flexDirection = FlexDirection.COLUMN;\n\n  @property flexGrow: number = 0;\n\n  @property flexShrink: number = 0;\n\n  @property flexWrap = Wrap.NO_WRAP;\n\n  @property font: Font | null = null;\n\n  @property fontSize: number = 20;\n\n  @property height: number = 100;\n\n  @property justifyContent = Justify.START;\n\n  @property left: number = 0;\n\n  @property marginBottom: number = 0;\n\n  @property marginLeft: number = 0;\n\n  @property marginRight: number = 0;\n\n  @property marginTop: number = 0;\n\n  @property maxHeight: number = 0;\n\n  @property maxWidth: number = 0;\n\n  @property minHeight: number = 0;\n\n  @property minWidth: number = 0;\n\n  @property opacity: number = 0;\n\n  @property overflow = Overflow.VISIBLE;\n\n  @property overflowClipBox = OverflowClipBox.PADDING_BOX;\n\n  @property paddingBottom: number = 0;\n\n  @property paddingLeft: number = 0;\n\n  @property paddingRight: number = 0;\n\n  @property paddingTop: number = 0;\n\n  @property position = Position.RELATIVE;\n\n  @property right: number = 0;\n\n  @property textOverflow = TextOverflow.CLIP;\n\n  @property top: number = 0;\n\n  @property textAlign = TextAnchor.MIDDLE_CENTER;\n\n  @property textOverflowPosition = TextOverflowPosition.END;\n\n  @property visibility = Visibility.VISIBLE;\n\n  @property whiteSpace = WhiteSpace.NORMAL;\n\n  @property width: number = 0;\n}\n"]}