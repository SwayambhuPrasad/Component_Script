{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/SnapToSlot/SnapToSlot.ts"],"names":["_decorator","Component","Button","Node","Sprite","Color","AS","ReplicatedButton","UIDrag","UIDrop","ccclass","property","SnapToSlot","_correctCount","awake","check","addComponent","dragOptions","forEach","dragOption","i","push","node","on","EventType","DRAG_DID_END","active","scheduleOnce","_afterDrop","CLICK","_check","validUIDrop","getComponent","color","dropSlots","dropSlot","dragsInside","length","name","answer","reduce","a","b","_afterCheck","nm","toString","j","reset"],"mappings":"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","sourcesContent":["import { _decorator, Component, Button, Node, Sprite, Color} from 'cc';\nimport { AS } from \"db://as_framework/scripts/ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { UIDrag, UIDrop } from 'db://as_framework/scripts/';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SnapToSlot')\nexport class SnapToSlot extends AS(Component) {\n    \n    @property(UIDrop)dropSlots : UIDrop[] | null = [];\n    @property(UIDrag)dragOptions : UIDrag[] | null = [];\n    @property(Node)check: Node | null = null;\n    @property answer = '';\n\n    private _correctCount = [];\n\n    awake(){\n        this.check.addComponent(ReplicatedButton);\n        this.dragOptions.forEach((dragOption, i)=>{\n            this._correctCount.push(-1);\n            dragOption.node.on(UIDrag.EventType.DRAG_DID_END, ()=>{\n                if(!this.check.active)  this.check.active = true;\n                this.scheduleOnce(this._afterDrop,0.05);\n            })\n        })\n\n        this.check.on(Button.EventType.CLICK, () => {\n            this._check();\n        },this)\n\n    }\n\n    private _afterDrop(){\n        this.dragOptions.forEach((dragOption, i)=>{\n                if(dragOption.validUIDrop == null)\n                {\n                    dragOption.getComponent(Sprite).color= new Color(255,255,255,255);\n                }\n        })\n    }\n\n    private _check(){\n        this.dropSlots.forEach((dropSlot,i)=>{\n            if(dropSlot.dragsInside.length == 0) return\n            else if(dropSlot.dragsInside[0].name == this.dragOptions[(this.answer[i])].name){\n                this._correctCount[i] = 1;\n                this.dragOptions[(this.answer[i])].getComponent(Sprite).color= new Color(24,186,24,255);\n                if (this._correctCount.reduce((a, b) => a + b, 0) == this.dragOptions.length) {\n                    this.check.active = false;\n                }\n            }\n            else{\n                this._correctCount[i] = -1;\n                dropSlot.dragsInside[0].getComponent(Sprite).color= new Color(255,50,50,255);\n            }\n        })\n        this.scheduleOnce(this._afterCheck, 1);\n\n    }\n\n    private _afterCheck(){\n        for(let i =0; i < this._correctCount.length; i++){\n            if(this._correctCount[i] == -1 && this.dropSlots[i].dragsInside.length > 0){   \n                let nm = this.dropSlots[i].dragsInside[0].name.toString();\n                this.dragOptions.forEach((dragOption, j)=>{\n                    if(nm == dragOption.name.toString()){\n                        dragOption.getComponent(Sprite).color= new Color(255,255,255,255);\n                        dragOption.reset();\n                        this.check.active = true;\n                    }\n                })\n            }\n        }\n    }\n}\n\n"]}