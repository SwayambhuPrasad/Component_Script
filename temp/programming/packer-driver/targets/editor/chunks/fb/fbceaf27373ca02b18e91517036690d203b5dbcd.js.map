{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedToggle.ts"],"names":["Component","EventHandler","Toggle","_decorator","AS","error","networkReplicator","ccclass","requireComponent","disallowMultiple","ReplicatedToggle","constructor","_replicationIndex","_toggle","registerEvent","awake","getComponent","node","on","EventType","CLICK","_onClick","onActivityEvent","name","data","TOGGLE","emit","emitEvents","clickEvents","getStateData","isChecked","updateStateData","setIsCheckedWithoutNotify","checkEvents","toggle","isReplicated","sendEvent","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,U,OAAAA,U;;AACjCC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;;AACkBC,MAAAA,iB,iBAAAA,iB;;;;;;;OAErB;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,gBAAX;AAA6BC,QAAAA;AAA7B,O,GAAkDN,U;;kCAK3CO,gB,WAHZH,OAAO,CAAC,kBAAD,C,UACPC,gBAAgB,CAACN,MAAD,C,+BAChBO,gB,UAFD,MAGaC,gBAHb,SAGsC;AAAA;AAAA,oBAAGV,SAAH,CAHtC,CAGgF;AAK9EW,QAAAA,WAAW,GAAG;AACZ;AADY,eAJNC,iBAIM;AAAA,eAFNC,OAEM,GAFmB,IAEnB;AAEZ,eAAKD,iBAAL,GAAyB;AAAA;AAAA,sDAAkBE,aAAlB,CAAgC,IAAhC,CAAzB;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKF,OAAL,GAAe,KAAKG,YAAL,CAAkBd,MAAlB,CAAf;;AACA,cAAI,KAAKW,OAAL,IAAgB,IAApB,EAA0B;AACxB;AAAA;AAAA,gCAAM,yEAAN;AACA;AACD;;AACD,eAAKI,IAAL,CAAUC,EAAV,CAAahB,MAAM,CAACiB,SAAP,CAAiBC,KAA9B,EAAqC,KAAKC,QAA1C,EAAoD,IAApD;AACD;;AAEDC,QAAAA,eAAe,CAACC,IAAD,EAAeC,IAAf,EAAqC;AAClD,cAAI,KAAKX,OAAL,IAAgB,IAAhB,IAAwBU,IAAI,KAAKrB,MAAM,CAACiB,SAAP,CAAiBM,MAAtD,EAA8D;;AAC9D,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB;AAAA;AAAA,gCAAM,mDAAN;AACA;AACD;;AACD,eAAKP,IAAL,CAAUS,IAAV,CAAexB,MAAM,CAACiB,SAAP,CAAiBC,KAAhC,EAAuC,KAAKP,OAA5C,EAAqD,IAArD;AACAZ,UAAAA,YAAY,CAAC0B,UAAb,CAAwB,KAAKd,OAAL,CAAae,WAArC,EAAkD,KAAKf,OAAvD;AACD;;AAEDgB,QAAAA,YAAY,GAAG;AAAA;;AACb,kCAAO,KAAKhB,OAAZ,qBAAO,cAAciB,SAArB;AACD;;AAEDC,QAAAA,eAAe,CAACP,IAAD,EAAgB;AAC7B,cAAI,KAAKX,OAAL,IAAgB,IAApB,EAA0B;;AAC1B,eAAKA,OAAL,CAAamB,yBAAb,CAAuCR,IAAvC;;AACA,eAAKP,IAAL,CAAUS,IAAV,CAAexB,MAAM,CAACiB,SAAP,CAAiBM,MAAhC,EAAwC,KAAKZ,OAA7C,EAAsD,IAAtD;AACAZ,UAAAA,YAAY,CAAC0B,UAAb,CAAwB,KAAKd,OAAL,CAAaoB,WAArC,EAAkD,KAAKpB,OAAvD;AACD;;AAEOQ,QAAAA,QAAQ,CAACa,MAAD,EAAiBC,YAAjB,EAAyC;AACvD,cAAIA,YAAJ,EAAkB;AAClB;AAAA;AAAA,sDAAkBC,SAAlB,CAA4B;AAC1BC,YAAAA,EAAE,EAAE,KAAKzB,iBADiB;AAE1BW,YAAAA,IAAI,EAAErB,MAAM,CAACiB,SAAP,CAAiBM,MAFG;AAG1BD,YAAAA,IAAI,EAAEU,MAAM,CAACJ;AAHa,WAA5B;AAKD;;AA/C6E,O","sourcesContent":["import { Component, EventHandler, Toggle, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\n\nconst { ccclass, requireComponent, disallowMultiple } = _decorator;\n\n@ccclass(\"ReplicatedToggle\")\n@requireComponent(Toggle)\n@disallowMultiple\nexport class ReplicatedToggle extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _toggle: Toggle | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._toggle = this.getComponent(Toggle);\n    if (this._toggle == null) {\n      error(\"The replicated toggle must be attached to a node with toggle component.\");\n      return;\n    }\n    this.node.on(Toggle.EventType.CLICK, this._onClick, this);\n  }\n\n  onActivityEvent(name: string, data?: boolean): void {\n    if (this._toggle == null || name !== Toggle.EventType.TOGGLE) return;\n    if (data == null) {\n      error(\"The data recieved on toggle event cannot be null.\");\n      return;\n    }\n    this.node.emit(Toggle.EventType.CLICK, this._toggle, true);\n    EventHandler.emitEvents(this._toggle.clickEvents, this._toggle);\n  }\n\n  getStateData() {\n    return this._toggle?.isChecked;\n  }\n\n  updateStateData(data: boolean) {\n    if (this._toggle == null) return;\n    this._toggle.setIsCheckedWithoutNotify(data);\n    this.node.emit(Toggle.EventType.TOGGLE, this._toggle, true);\n    EventHandler.emitEvents(this._toggle.checkEvents, this._toggle);\n  }\n\n  private _onClick(toggle: Toggle, isReplicated?: boolean) {\n    if (isReplicated) return;\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: Toggle.EventType.TOGGLE,\n      data: toggle.isChecked,\n    });\n  }\n}\n"]}