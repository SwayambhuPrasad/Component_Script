{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/latex/styleStateMapping.ts"],"names":["StyleStateMapping","HPaddingNode","color","state","value","withColor","top","yShift","replace","em","withYShift","paddingLeft","spacingLeft","padLeftNode","classes","setPosition","nextX","y","bounds","set","width","vlist","addCell","withResetMargin","marginLeft","withMarginLeft","marginRight","withMarginRight","minWidth","withMinWidth","styleStateMapping"],"mappings":";;;4CAWMA,iB;;;;;;;;;;;;;;;;AAVGC,MAAAA,Y,iBAAAA,Y;;;;;;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMD,MAAAA,iB,GAAN,MAAMA,iBAAN,CAAwB;AACtBE,QAAAA,KAAK,CAACC,KAAD,EAAeC,KAAf,EAA8B;AACjC,iBAAOD,KAAK,CAACE,SAAN,CAAgBD,KAAhB,CAAP;AACD;;AAEDE,QAAAA,GAAG,CAACH,KAAD,EAAeC,KAAf,EAA8B;AAC/B,gBAAMG,MAAM,GAAG,CAACH,KAAK,CAACI,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,GAA2BL,KAAK,CAACM,EAAhD;AACA,iBAAON,KAAK,CAACO,UAAN,CAAiBH,MAAjB,CAAP;AACD;;AAEDI,QAAAA,WAAW,CAACR,KAAD,EAAeC,KAAf,EAA8B;AACvC,gBAAMQ,WAAW,GAAG,CAACR,KAAK,CAACI,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,GAA2BL,KAAK,CAACM,EAArD;AACA,gBAAMI,WAAW,GAAG;AAAA;AAAA,4CAAiBV,KAAK,CAACW,OAAvB,CAApB;AACAD,UAAAA,WAAW,CAACE,WAAZ,CAAwBZ,KAAK,CAACa,KAA9B,EAAqCb,KAAK,CAACc,CAA3C;AACAJ,UAAAA,WAAW,CAACK,MAAZ,CAAmBC,GAAnB,CAAuB;AAAEC,YAAAA,KAAK,EAAER;AAAT,WAAvB;AACAT,UAAAA,KAAK,CAACkB,KAAN,CAAYC,OAAZ,CAAoBT,WAApB;AACA,iBAAOV,KAAK,CAACoB,eAAN,EAAP;AACD;;AAEDC,QAAAA,UAAU,CAACrB,KAAD,EAAeC,KAAf,EAA8B;AACtC,gBAAMoB,UAAU,GAAG,CAACpB,KAAK,CAACI,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,GAA2BL,KAAK,CAACM,EAApD;AACA,iBAAON,KAAK,CAACsB,cAAN,CAAqBD,UAArB,CAAP;AACD;;AAEDE,QAAAA,WAAW,CAACvB,KAAD,EAAeC,KAAf,EAA8B;AACvC,gBAAMsB,WAAW,GAAG,CAACtB,KAAK,CAACI,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,GAA2BL,KAAK,CAACM,EAArD;AACA,iBAAON,KAAK,CAACwB,eAAN,CAAsBD,WAAtB,CAAP;AACD;;AAEDE,QAAAA,QAAQ,CAACzB,KAAD,EAAeC,KAAf,EAA8B;AACpC,gBAAMwB,QAAQ,GAAG,CAACxB,KAAK,CAACI,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,GAA2BL,KAAK,CAACM,EAAlD;AACA,iBAAON,KAAK,CAAC0B,YAAN,CAAmBD,QAAnB,CAAP;AACD;;AAhCqB,O;;mCAmCXE,iB,GAAoB,IAAI9B,iBAAJ,E","sourcesContent":["import { State } from \"./RenderingState\";\nimport { HPaddingNode } from \"./virtualCanvasNodes\";\n\n/**\n * Each function in this singleton represents a mapping between a styleName and\n * how it affects the RenderingState.\n *\n * For example, color would change the color of nodes.\n *\n * While top would shift nodes down (i.e. y) by a certain factor.\n */\nclass StyleStateMapping {\n  color(state: State, value: string) {\n    return state.withColor(value);\n  }\n\n  top(state: State, value: string) {\n    const yShift = +value.replace(\"em\", \"\") * state.em;\n    return state.withYShift(yShift);\n  }\n\n  paddingLeft(state: State, value: string) {\n    const spacingLeft = +value.replace(\"em\", \"\") * state.em;\n    const padLeftNode = new HPaddingNode(state.classes);\n    padLeftNode.setPosition(state.nextX, state.y);\n    padLeftNode.bounds.set({ width: spacingLeft });\n    state.vlist.addCell(padLeftNode);\n    return state.withResetMargin();\n  }\n\n  marginLeft(state: State, value: string) {\n    const marginLeft = +value.replace(\"em\", \"\") * state.em;\n    return state.withMarginLeft(marginLeft);\n  }\n\n  marginRight(state: State, value: string) {\n    const marginRight = +value.replace(\"em\", \"\") * state.em;\n    return state.withMarginRight(marginRight);\n  }\n\n  minWidth(state: State, value: string) {\n    const minWidth = +value.replace(\"em\", \"\") * state.em;\n    return state.withMinWidth(minWidth);\n  }\n}\n\nexport const styleStateMapping = new StyleStateMapping();\n"]}