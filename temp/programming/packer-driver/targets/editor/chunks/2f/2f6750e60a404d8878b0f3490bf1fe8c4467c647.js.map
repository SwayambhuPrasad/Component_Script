{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/MCQ/script/MCQ.ts"],"names":["_decorator","Component","Button","Label","AS","ReplicatedButton","ccclass","property","requireComponent","AnswerType","MCQ","type","String","_selection","awake","insertButtonsComp","node","children","forEach","child","i","addComponent","choiceButtons","getComponentsInChildren","btn","name","push","console","log","on","EventType","CLICK","checkSelection","active","lableAssigner","answer","mcqLable","btnLable","optionLabel","length","parent","string"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node,instantiate, Button, UITransform, UI, Enum ,Label} from 'cc';\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { UIPopup } from \"db://as_framework/scripts/UIPopup\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { toUSVString } from 'util';\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum AnswerType {\n    SINGLE_CORRECT,\n    MULTIPLE_CORRECT\n}\n\n@ccclass('MCQ')\nexport class MCQ extends AS(Component) {\n\n    //@property({type: Enum(AnswerType)}) private answerType = AnswerType.SINGLE_CORRECT;\n\n   // @property({visible: function (this: MCQ) {return this.answerType === AnswerType.SINGLE_CORRECT}}) private x;\n    private _selection =[ ] ;\n    @property private answer = [-1,1,1,-1];\n    @property({type: String})\n    private optionLabel: string[] = [];\n    awake() {\n        const insertButtonsComp = this.node.children;\n        insertButtonsComp.forEach((child, i) => {\n                child.addComponent(Button);\n                child.addComponent(ReplicatedButton);\n        })\n        const choiceButtons = this.node.getComponentsInChildren(Button);\n        choiceButtons.forEach((btn,i) => {\n            if(btn.node.name!=\"check\")this._selection.push(-1);\n            console.log(\"running\");\n            btn.node.on(Button.EventType.CLICK,async()=>{\n                if(btn.node.name==\"check\") {\n                    this.checkSelection();\n                    return;\n                }\n                if(this._selection[i]==-1) {\n                    btn.node.children[0].active =true; \n                    this._selection[i]=1;\n                }\n                else{\n                    btn.node.children[0].active=false;\n                    this._selection[i]=-1;}\n            })\n        });    \n        this.lableAssigner();\n    }\n    checkSelection()\n    {\n        if(this._selection==this.answer){}\n    }\n    lableAssigner()\n    {\n     const mcqLable=  this.node.getComponentsInChildren(Label);  \n     mcqLable.forEach((btnLable,i) => {\n      if(this.optionLabel.length<i)\n      btnLable[i].node.parent.active=false;\n      else\n      btnLable.string=this.optionLabel[i];\n     });\n    }\n}\n\n"]}