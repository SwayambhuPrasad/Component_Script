{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/SnapToSlot/SnapToSlot.ts"],"names":["_decorator","Component","Button","Node","Sprite","Color","AS","UIDrag","UIDrop","ccclass","property","SnapToSlot","correctCount","awake","DragOptions","forEach","dragOption","i","push","node","on","EventType","DRAG_DID_END","check","active","scheduleOnce","afterDrop","CLICK","DropSlots","dropSlot","dragsInside","length","name","answer","getComponent","color","reduce","a","b","afterCheck","console","log","worldPosition","resetScreenPoint","validUIDrop","nm","toString","j","reset"],"mappings":"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","sourcesContent":["import { _decorator, Component, Button, Node, Sprite, SpriteFrame, instantiate, Prefab, Color} from 'cc';\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { UIDrag, UIDrop } from '../../extensions/as_framework/framework/assets/scripts';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SnapToSlot')\nexport class SnapToSlot extends AS(Component) {\n    \n\n    @property(UIDrop)DropSlots  : UIDrop[] | null = [];\n    @property(UIDrag)DragOptions  : UIDrag[] | null = [];\n    @property(Node)check: Node | null = null;\n    @property answer = '';\n\n    private correctCount = [];\n\n    awake(){\n\n        this.DragOptions.forEach((dragOption, i)=>{\n            this.correctCount.push(-1);\n            dragOption.node.on(UIDrag.EventType.DRAG_DID_END, ()=>{\n                if(!this.check.active)  this.check.active = true;\n                this.scheduleOnce(this.afterDrop,0.05);\n            })\n        })\n\n        this.check.on(Button.EventType.CLICK, () => {\n\n            this.DropSlots.forEach((dropSlot,i)=>{\n                if(dropSlot.dragsInside.length == 0) return\n                else if(dropSlot.dragsInside[0].name == this.DragOptions[(this.answer[i])].name){\n                    this.correctCount[i] = 1;\n                    this.DragOptions[(this.answer[i])].getComponent(Sprite).color= new Color(24,186,24,255);\n                    if (this.correctCount.reduce((a, b) => a + b, 0) == this.DragOptions.length) {\n                        this.check.active = false;\n                    }\n                }\n                else{\n                    this.correctCount[i] = -1;\n                    dropSlot.dragsInside[0].getComponent(Sprite).color= new Color(255,50,50,255);\n                }\n            })\n\n\n            this.scheduleOnce(this.afterCheck, 1);\n        })\n\n    }\n\n\n    afterDrop(){\n\n        this.DragOptions.forEach((dragOption, i)=>{\n            console.log(\"pos of \"+i+\" ---\"+dragOption.node.worldPosition+\"   reset   \"+dragOption.resetScreenPoint)\n                if(dragOption.validUIDrop == null)\n                {\n                    dragOption.getComponent(Sprite).color= new Color(255,255,255,255);\n                }\n        })\n\n    }\n    afterCheck(){\n        for(let i =0; i < this.correctCount.length; i++){\n            if(this.correctCount[i] == -1 && this.DropSlots[i].dragsInside.length > 0){   \n                let nm = this.DropSlots[i].dragsInside[0].name.toString();\n                this.DragOptions.forEach((dragOption, j)=>{\n                    if(nm == dragOption.name.toString()){\n                        dragOption.getComponent(Sprite).color= new Color(255,255,255,255);\n                        dragOption.reset();\n                        this.check.active = true;\n                    }\n                })\n            }\n        }\n    }\n\n\n\n\n\n\n\n\n}\n\n"]}