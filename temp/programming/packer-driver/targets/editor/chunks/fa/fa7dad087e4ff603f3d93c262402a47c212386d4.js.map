{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/LiteEvent.ts"],"names":["SimpleEvent","_handlers","Set","on","handler","thisArg","bind","add","off","delete","trigger","data","Promise","all","Array","from","map","h","expose","clear"],"mappings":";;;iBAcaA,W;;;;;;;;;;;;;6BAAAA,W,GAAN,MAAMA,WAAN,CAAgD;AAAA;AAAA,eAC7CC,SAD6C,GACjC,IAAIC,GAAJ,EADiC;AAAA;;AAGrDC,QAAAA,EAAE,CAACC,OAAD,EAA8BC,OAA9B,EAAuD;AACvD,cAAIA,OAAJ,EAAaD,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAaD,OAAb,CAAV;;AACb,eAAKJ,SAAL,CAAeM,GAAf,CAAmBH,OAAnB;AACD;;AAEDI,QAAAA,GAAG,CAACJ,OAAD,EAA8BC,OAA9B,EAAuD;AACxD,cAAIA,OAAJ,EAAaD,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAaD,OAAb,CAAV;;AACb,eAAKJ,SAAL,CAAeQ,MAAf,CAAsBL,OAAtB;AACD;;AAEDM,QAAAA,OAAO,CAACC,IAAD,EAAW;AAChB,iBAAOC,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW,KAAKd,SAAhB,EAA2Be,GAA3B,CAAgCC,CAAD,IAAOA,CAAC,CAACN,IAAD,CAAvC,CAAZ,CAAP;AACD;;AAEDO,QAAAA,MAAM,GAAoB;AACxB,iBAAO,IAAP;AACD;;AAEDC,QAAAA,KAAK,GAAG;AACN,eAAKlB,SAAL,CAAekB,KAAf;AACD;;AAvBoD,O","sourcesContent":["export interface ISimpleEvent<T> {\n  /**\n   * Register a callback to this event.\n   * @param handler The callback that will be invoked when the event is\n   * dispatched.\n   */\n  on(handler: { (data?: T): void }, thisArg?: unknown): void;\n  /**\n   * Removes the callback previously registered.\n   * @param handler The callback to remove.\n   */\n  off(handler: { (data?: T): void }, thisArg?: unknown): void;\n}\n\nexport class SimpleEvent<T> implements ISimpleEvent<T> {\n  private _handlers = new Set<{ (data?: T): void } | { (data?: T): Promise<void> }>();\n\n  on(handler: (data?: T) => void, thisArg?: unknown): void {\n    if (thisArg) handler = handler.bind(thisArg);\n    this._handlers.add(handler);\n  }\n\n  off(handler: (data?: T) => void, thisArg?: unknown): void {\n    if (thisArg) handler = handler.bind(thisArg);\n    this._handlers.delete(handler);\n  }\n\n  trigger(data?: T) {\n    return Promise.all(Array.from(this._handlers).map((h) => h(data)));\n  }\n\n  expose(): ISimpleEvent<T> {\n    return this;\n  }\n\n  clear() {\n    this._handlers.clear();\n  }\n}\n"]}