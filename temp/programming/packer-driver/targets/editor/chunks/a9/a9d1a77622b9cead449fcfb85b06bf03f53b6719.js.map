{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/assets/SnapToSlot/SnapToSlot.ts"],"names":["_decorator","Component","Button","Node","Sprite","Color","find","AS","ReplicatedButton","ReplicatedUIDrag","UIDrag","UIDrop","ValidationEvent","ChangeBackground","CheckPrompt","ccclass","property","SnapToSlot","type","Number","String","correctCount","backGround","correctDrags","wrongDrags","chechstatus","awake","on","_setNavStatus","bind","DragOptions","forEach","dragOption","i","push","addComponent","node","EventType","DRAG_DID_END","getComponent","ButtonClick","play","check","active","scheduleOnce","afterDrop","CLICK","drag","condition","counter","j","answer","length","validUIDrop","DropSlots","changeColorAsFeedback","color","children","_callForPromts","onEnable","_navButtonVisibility","screen","ScreenTag","console","log","getComponentInChildren","showCorrect","ev","dispatchEvent","showTryAgain","afterCheck","worldPosition","resetScreenPoint","W","reset","_resetfeedback","R","child"],"mappings":"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","sourcesContent":["import { _decorator, Component, Button, Node, Sprite, SpriteFrame, instantiate, Prefab, Color, find} from 'cc';\nimport { AS } from \"db://as_framework/scripts//ASComponent\";\nimport { ReplicatedButton } from \"db://as_framework/scripts/ReplicatedButton\";\nimport { ReplicatedUIDrag, UIDrag, UIDrop } from \"db://as_framework/scripts\";\nimport { ValidationEvent } from '../ValidationEvent';\nimport { ChangeBackground } from '../ChangeBackground';\nimport { CheckPrompt } from '../../CheckPrompt';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SnapToSlot')\nexport class SnapToSlot extends AS(Component) {\n\n    @property({type:Number}) ScreenTag: Number = -1;\n    @property(UIDrop)DropSlots  : UIDrop[] | null = [];\n    @property(UIDrag)DragOptions  : UIDrag[] | null = [];\n    @property(Node)check: Node | null = null;\n    @property(String) answer: String[] | null = [];\n\n    private correctCount = [];\n    private backGround: Node = null;\n    private correctDrags=[];\n    private wrongDrags=[];\n    private chechstatus;\n    @property private changeColorAsFeedback= true;\n\n    awake(){\n        this.backGround= find(\"Canvas_new/BackGround\");\n        this.backGround.on(\"Screen\",this._setNavStatus.bind(this));\n\n\n        this.DragOptions.forEach((dragOption, i)=>{\n            this.correctCount.push(-1);\n            dragOption.addComponent(ReplicatedUIDrag)\n            dragOption.node.on(UIDrag.EventType.DRAG_DID_END, ()=>{\n              this.backGround.getComponent(ChangeBackground).ButtonClick.play();\n                if(!this.check.active)  this.check.active = true;\n                this.scheduleOnce(this.afterDrop,0.05);\n            })\n        })\n        this.check.addComponent(ReplicatedButton)\n        this.check.on(Button.EventType.CLICK, () => {\n          this.backGround.getComponent(ChangeBackground).ButtonClick.play();\n            this.chechstatus=true;\n            this.wrongDrags=[];\n            this.correctDrags=[];\n            this.DragOptions.forEach((drag,i)=>{\n\n                var condition= false;\n                let counter = 0;\n                for(let j=0;j<this.answer[i].length;j++){\n                      if(drag.validUIDrop===this.DropSlots[this.answer[i][j]])\n                      counter++;\n                   }\n                   if(counter>0) condition=true\n                   else  condition=false;\n\n                if( condition) {\n                  if(this.changeColorAsFeedback)  drag.getComponent(Sprite).color = new Color(24,186,24,255);\n                  else{\n                    drag.node.children[0].active=true;\n                  }\n                    this.correctCount[i] = 1;\n                    this.correctDrags.push(drag)\n                }\n                else{\n                    this.chechstatus=false;\n                    this.correctCount[i] = -1;\n                   if(this.changeColorAsFeedback)  drag.getComponent(Sprite).color= new Color(255,50,50,255);\n                   else{\n                    drag.node.children[1].active=true;\n                  }\n                  this.wrongDrags.push(drag)\n                }\n            })\n            this.check.active=false;\n            this._callForPromts();\n\n        })\n\n    }\n    onEnable(){\n        this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false,false,false)\n      }\n    //   onDisable(){\n    //     this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false,true,false)\n    //   }\n      _setNavStatus(screen){\n        if(this.ScreenTag==screen){\n          console.log(\"set\",screen)\n          this.backGround.getComponent(ChangeBackground)._navButtonVisibility(false,true,false)\n        }\n      }\n\n    async _callForPromts()\n    {\n\n        if(this.chechstatus){\n            await this.backGround.getComponentInChildren(CheckPrompt).showCorrect();\n            const ev = new ValidationEvent(true, true)\n            this.node.dispatchEvent(ev)\n            this.check.active=true;}\n        else{\n            await this.backGround.getComponentInChildren(CheckPrompt).showTryAgain();\n            const ev = new ValidationEvent(true, false)\n            this.node.dispatchEvent(ev)\n            this.check.active=true;\n        }\n        this.scheduleOnce(this.afterCheck, 1);\n    }\n\n    afterDrop(){\n\n        this.DragOptions.forEach((dragOption, i)=>{\n            console.log(\"pos of \"+i+\" ---\"+dragOption.node.worldPosition+\"   reset   \"+dragOption.resetScreenPoint)\n                if(dragOption.validUIDrop == null)\n                {\n                    dragOption.getComponent(Sprite).color= new Color(255,255,255,255);\n                }\n        })\n\n    }\n    afterCheck(){\n        this.wrongDrags.forEach((W) => {\n            W.reset();\n            if(this.changeColorAsFeedback) W.getComponent(Sprite).color= new Color(255,255,255,255);\n            else { this._resetfeedback(); }\n        });\n        this.correctDrags.forEach((R)=>{\n            if(this.changeColorAsFeedback) R.getComponent(Sprite).color= new Color(255,255,255,255);\n            else{this._resetfeedback();}\n        });\n    }\n\n    _resetfeedback()\n    {\n        for(let i=0;i<this.DragOptions.length;i++)\n        this.DragOptions[i].node.children.forEach((child)=>{\n            child.active=false;\n        })\n    }\n\n\n\n\n\n\n\n\n}\n\n"]}