{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/ReplicatedButton.ts"],"names":["Button","Component","EventHandler","EventTouch","_decorator","AS","error","networkReplicator","ccclass","disallowMultiple","requireComponent","IS_REPLICATED","ReplicatedButton","constructor","_replicationIndex","_button","registerEvent","awake","getComponent","clickEvent","target","node","component","handler","customEventData","clickEvents","push","onActivityEvent","name","data","EventType","CLICK","eventData","touches","bubbles","eventType","allTouches","currentTarget","emitEvents","filter","event","emit","_onClick","sendEvent","id","getTouches","type","getAllTouches"],"mappings":"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","sourcesContent":["import { Button, Component, EventHandler, EventTouch, SystemEvent, Touch, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { IReplicatedEvent, networkReplicator } from \"./NetworkReplicator\";\n\nconst { ccclass, disallowMultiple, requireComponent } = _decorator;\n\ninterface EventTouchLike {\n  touches: Touch[];\n  bubbles: boolean;\n  eventType: SystemEvent.EventType;\n  allTouches?: Touch[];\n}\n\nconst IS_REPLICATED = \"IS_REPLICATED\";\n\n/**\n * Class to automate replication of click events for the button attached to\n * the same node using the `NetworkReplicator`.\n */\n@ccclass(\"ReplicatedButton\")\n@requireComponent(Button)\n@disallowMultiple\nexport class ReplicatedButton extends AS(Component) implements IReplicatedEvent {\n  private _replicationIndex: string;\n\n  private _button: Button | null = null;\n\n  constructor() {\n    super();\n    this._replicationIndex = networkReplicator.registerEvent(this);\n  }\n\n  awake() {\n    this._button = this.getComponent(Button);\n    if (this._button == null) {\n      error(\"The replicated button must be attached to a node with button component.\");\n      return;\n    }\n    const clickEvent = new EventHandler();\n    clickEvent.target = this.node;\n    clickEvent.component = \"ReplicatedButton\";\n    clickEvent.handler = \"_onClick\";\n    clickEvent.customEventData = IS_REPLICATED;\n    this._button.clickEvents.push(clickEvent);\n  }\n\n  onActivityEvent(name: string, data: EventTouchLike): void {\n    if (this._button == null) return;\n    if (name === Button.EventType.CLICK) {\n      const eventData = new EventTouch(data.touches, data.bubbles, data.eventType, data.allTouches);\n      eventData.target = eventData.currentTarget = this.node;\n      EventHandler.emitEvents(\n        this._button.clickEvents.filter((event) => event.customEventData !== IS_REPLICATED),\n        eventData,\n      );\n      this.node.emit(Button.EventType.CLICK, this._button, true);\n    }\n  }\n\n  private _onClick(event: EventTouch, customEventData?: string) {\n    networkReplicator.sendEvent({\n      id: this._replicationIndex,\n      name: Button.EventType.CLICK,\n      data: <EventTouchLike>{\n        touches: event.getTouches(),\n        bubbles: event.bubbles,\n        eventType: event.type,\n        allTouches: event.getAllTouches(),\n      },\n    });\n  }\n}\n"]}