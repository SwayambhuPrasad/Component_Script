{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/UIDrop.ts"],"names":["Component","Enum","rect","UITransform","_decorator","AS","error","ccclass","property","disallowMultiple","requireComponent","BoundsType","DropBehaviour","UIDrop","tooltip","type","visible","boundsType","CIRCLE","_uiTransform","_dragsInside","Array","enableSnap","_enableSnap","_boundsType","circleRadius","_circleRadius","behaviour","_behaviour","dragsInside","value","__addDrag","drag","ALLOW_MULTIPLE","ALLOW_SINGLE","length","REPLACE","forEach","dragInside","resetDrop","push","__removeDrag","index","indexOf","splice","__isInside","worldPoint","getBoundingBoxToWorld","contains","__getWorldBounds","onLoad","getComponent","RECT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAmBC,MAAAA,U,OAAAA,U;;AAC1CC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,K,iBAAAA,K;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,gBAArB;AAAuCC,QAAAA;AAAvC,O,GAA4DN,U;;iBAE7DO,U;AAAAA,QAAAA,U,CAAAA,U;AAAAA,QAAAA,U,CAAAA,U;SAAAA,U,KAAAA,U;;iBAKAC,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;SAAAA,a,KAAAA,a;;wBASQC,M,WAHZN,OAAO,CAAC,QAAD,C,UAEPG,gBAAgB,CAACP,WAAD,C,UAkBdK,QAAQ,CAAC;AAAEM,QAAAA,OAAO,EAAE;AAAX,OAAD,C,UAKRN,QAAQ,CAAC;AACRO,QAAAA,IAAI,EAAEd,IAAI,CAACU,UAAD,CADF;AAERG,QAAAA,OAAO,EAAE;AAFD,OAAD,C,UAQRN,QAAQ,CAAC;AACRM,QAAAA,OAAO,EACL,uFACA,0BAHM;;AAIRE,QAAAA,OAAO,GAAe;AACpB,iBAAO,KAAKC,UAAL,KAAoBN,UAAU,CAACO,MAAtC;AACD;;AANO,OAAD,C,UAYRV,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEd,IAAI,CAACW,aAAD;AAAZ,OAAD,C,gBA5CVH,gB,+CADD,MAGaI,MAHb,SAG4B;AAAA;AAAA,oBAAGb,SAAH,CAH5B,CAG0C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAahCmB,YAbgC,GAaG,IAbH;AAAA,eAehCC,YAfgC,GAejB,IAAIC,KAAJ,EAfiB;AAAA;;AAkB1B,YAAVC,UAAU,GAAG;AACf,iBAAO,KAAKC,WAAZ;AACD;;AAMa,YAAVN,UAAU,GAAG;AACf,iBAAO,KAAKO,WAAZ;AACD;;AAUe,YAAZC,YAAY,GAAG;AACjB,iBAAO,KAAKC,aAAZ;AACD;;AAGY,YAATC,SAAS,GAAG;AACd,iBAAO,KAAKC,UAAZ;AACD;;AAEc,YAAXC,WAAW,GAAG;AAChB,iBAAO,KAAKT,YAAZ;AACD;;AAEa,YAAVE,UAAU,CAACQ,KAAD,EAAQ;AACpB,eAAKP,WAAL,GAAmBO,KAAnB;AACD;;AAEa,YAAVb,UAAU,CAACa,KAAD,EAAQ;AACpB,eAAKN,WAAL,GAAmBM,KAAnB;AACD;;AAEe,YAAZL,YAAY,CAACK,KAAD,EAAQ;AACtB,eAAKJ,aAAL,GAAqBI,KAArB;AACD;;AAEY,YAATH,SAAS,CAACG,KAAD,EAAQ;AACnB,eAAKF,UAAL,GAAkBE,KAAlB;AACD;AAED;AACF;AACA;;;AACEC,QAAAA,SAAS,CAACC,IAAD,EAAe;AACtB,kBAAQ,KAAKL,SAAb;AACE,iBAAKf,aAAa,CAACqB,cAAnB;AACE;;AACF,iBAAKrB,aAAa,CAACsB,YAAnB;AACE,kBAAI,KAAKd,YAAL,CAAkBe,MAAlB,GAA2B,CAA/B,EAAkC,OAAO,KAAP;AAClC;;AACF,iBAAKvB,aAAa,CAACwB,OAAnB;AACE,mBAAKhB,YAAL,CAAkBiB,OAAlB,CAA2BC,UAAD,IAAgBN,IAAI,KAAKM,UAAT,IAAuBA,UAAU,CAACC,SAAX,EAAjE;;AACA,mBAAKnB,YAAL,GAAoB,EAApB;AACA;;AAEF;AACE;AAAA;AAAA,kCAAM,yBAAN;AACA;AAbJ;;AAgBA,eAAKA,YAAL,CAAkBoB,IAAlB,CAAuBR,IAAvB;;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;;;AACES,QAAAA,YAAY,CAACT,IAAD,EAAe;AACzB,gBAAMU,KAAK,GAAG,KAAKtB,YAAL,CAAkBuB,OAAlB,CAA0BX,IAA1B,EAAgC,CAAhC,CAAd;;AACA,cAAIU,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,iBAAKtB,YAAL,CAAkBwB,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC;AACD;AACF;AAED;AACF;AACA;;;AACEG,QAAAA,UAAU,CAACC,UAAD,EAAmB;AAAA;;AAC3B,gEAAO,KAAK3B,YAAZ,qBAAO,mBAAmB4B,qBAAnB,GAA2CC,QAA3C,CAAoDF,UAApD,CAAP,oCAA0E,KAA1E;AACD;AAED;AACF;AACA;;;AACEG,QAAAA,gBAAgB,GAAG;AAAA;;AACjB,kEAAO,KAAK9B,YAAZ,qBAAO,oBAAmB4B,qBAAnB,EAAP,qCAAqD7C,IAAI,EAAzD;AACD;;AAEDgD,QAAAA,MAAM,GAAG;AACP,eAAK/B,YAAL,GAAoB,KAAKgC,YAAL,CAAkBhD,WAAlB,CAApB;AACD;;AArHuC,O,UACxBQ,U,GAAaA,U,UAEbC,a,GAAgBA,a,wFAE/BJ,Q;;;;;iBAA+B,I;;sFAE/BA,Q;;;;;iBAA+BG,UAAU,CAACyC,I;;wFAE1C5C,Q;;;;;iBAAiC,C;;qFAEjCA,Q;;;;;iBAA8BI,aAAa,CAACwB,O","sourcesContent":["import { Component, Enum, rect, UITransform, Vec2, _decorator } from \"cc\";\nimport { AS } from \"./ASComponent\";\nimport { error } from \"./Logger\";\nimport { UIDrag } from \"./UIDrag\";\n\nconst { ccclass, property, disallowMultiple, requireComponent } = _decorator;\n\nenum BoundsType {\n  RECT,\n  CIRCLE,\n}\n\nenum DropBehaviour {\n  ALLOW_MULTIPLE,\n  ALLOW_SINGLE,\n  REPLACE,\n}\n\n@ccclass(\"UIDrop\")\n@disallowMultiple\n@requireComponent(UITransform)\nexport class UIDrop extends AS(Component) {\n  static readonly BoundsType = BoundsType;\n\n  static readonly DropBehaviour = DropBehaviour;\n\n  @property private _enableSnap = true;\n\n  @property private _boundsType = BoundsType.RECT;\n\n  @property private _circleRadius = 0;\n\n  @property private _behaviour = DropBehaviour.REPLACE;\n\n  private _uiTransform: UITransform | null = null;\n\n  private _dragsInside = new Array<UIDrag>();\n\n  @property({ tooltip: \"Enable if you want the valid drag data to snap to this node position.\" })\n  get enableSnap() {\n    return this._enableSnap;\n  }\n\n  @property({\n    type: Enum(BoundsType),\n    tooltip: \"The shape of bounds to use.\",\n  })\n  get boundsType() {\n    return this._boundsType;\n  }\n\n  @property({\n    tooltip:\n      \"The radius of the circle to use for bounds. If radius is greater than the UI Rect \" +\n      \"bounds, it may not work.\",\n    visible(this: UIDrop) {\n      return this.boundsType === BoundsType.CIRCLE;\n    },\n  })\n  get circleRadius() {\n    return this._circleRadius;\n  }\n\n  @property({ type: Enum(DropBehaviour) })\n  get behaviour() {\n    return this._behaviour;\n  }\n\n  get dragsInside() {\n    return this._dragsInside;\n  }\n\n  set enableSnap(value) {\n    this._enableSnap = value;\n  }\n\n  set boundsType(value) {\n    this._boundsType = value;\n  }\n\n  set circleRadius(value) {\n    this._circleRadius = value;\n  }\n\n  set behaviour(value) {\n    this._behaviour = value;\n  }\n\n  /**\n   * @internal\n   */\n  __addDrag(drag: UIDrag) {\n    switch (this.behaviour) {\n      case DropBehaviour.ALLOW_MULTIPLE:\n        break;\n      case DropBehaviour.ALLOW_SINGLE:\n        if (this._dragsInside.length > 0) return false;\n        break;\n      case DropBehaviour.REPLACE:\n        this._dragsInside.forEach((dragInside) => drag !== dragInside && dragInside.resetDrop());\n        this._dragsInside = [];\n        break;\n\n      default:\n        error(\"Unkown Drop Behaviour!!\");\n        break;\n    }\n\n    this._dragsInside.push(drag);\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  __removeDrag(drag: UIDrag) {\n    const index = this._dragsInside.indexOf(drag, 0);\n    if (index > -1) {\n      this._dragsInside.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  __isInside(worldPoint: Vec2) {\n    return this._uiTransform?.getBoundingBoxToWorld().contains(worldPoint) ?? false;\n  }\n\n  /**\n   * @internal\n   */\n  __getWorldBounds() {\n    return this._uiTransform?.getBoundingBoxToWorld() ?? rect();\n  }\n\n  onLoad() {\n    this._uiTransform = this.getComponent(UITransform);\n  }\n}\n"]}