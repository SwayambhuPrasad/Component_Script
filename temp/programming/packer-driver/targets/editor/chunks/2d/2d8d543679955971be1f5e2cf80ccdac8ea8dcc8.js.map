{"version":3,"sources":["file:///Users/swayambhupanda/Documents/GitHub/applet-framework-demo/extensions/as_framework/framework/assets/scripts/Utils.ts"],"names":["yieldFrame","Promise","resolve","director","once","Director","EVENT_BEGIN_FRAME","intersectionPercent","rectA","rectB","intersects","intersection","Rect","rect","width","height","escapeDoubleQuotes","str","replace","encloseDoubleQuotes","camelToSnake","letter","toLowerCase","findParentCanvas","node","canvas","getComponent","Canvas","parent","Node","isNode","indentString","string","count","options","indent","includeEmptyLines","TypeError","RangeError","regex","repeat","readPixels","x","y","gfxTexture","getGFXTexture","gfxDevice","_getGFXDevice","bufferViews","regions","region0","gfx","BufferTextureCopy","texOffset","texExtent","push","buffer","Uint8Array","copyTextureToBuffers"],"mappings":";;;;;AAEO,WAASA,UAAT,GAAsB;AAC3B,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,QAAQ,CAACC,iBAAvB,EAA0CJ,OAA1C;AACD,KAFM,CAAP;AAGD;;AAEM,WAASK,mBAAT,CAA6BC,KAA7B,EAA0CC,KAA1C,EAAuD;AAC5D,QAAI,CAACD,KAAK,CAACE,UAAN,CAAiBD,KAAjB,CAAL,EAA8B,OAAO,CAAP;AAC9B,UAAME,YAAY,GAAGC,IAAI,CAACD,YAAL,CAAkBE,IAAI,EAAtB,EAA0BL,KAA1B,EAAiCC,KAAjC,CAArB;;AACA,QAAIE,YAAY,CAACG,KAAb,KAAuB,CAAvB,IAA4BH,YAAY,CAACI,MAAb,KAAwB,CAAxD,EAA2D;AACzD,aAAO,CAAP;AACD;;AAED,WAAQJ,YAAY,CAACG,KAAb,GAAqBH,YAAY,CAACI,MAAnC,IAA8CP,KAAK,CAACM,KAAN,GAAcN,KAAK,CAACO,MAAlE,CAAP;AACD,G,CAED;;;AACO,WAASC,kBAAT,CAA4BC,GAA5B,EAAyC;AAC9C,WAAOA,GAAG,CAACC,OAAJ,CAAY,iBAAZ,EAA+B,OAA/B,CAAP;AACD;;AAEM,WAASC,mBAAT,CAA6BF,GAA7B,EAA0C;AAC/C,WAAQ,IAAGD,kBAAkB,CAACC,GAAD,CAAM,GAAnC;AACD;;AAEM,WAASG,YAAT,CAAsBH,GAAtB,EAAmC;AACxC,WAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAuBG,MAAD,IAAa,IAAGA,MAAM,CAACC,WAAP,EAAqB,EAA3D,CAAP;AACD;;AAEM,WAASC,gBAAT,CAA0BC,IAA1B,EAAqD;AAC1D,UAAMC,MAAM,GAAGD,IAAI,CAACE,YAAL,CAAkBC,MAAlB,CAAf;AACA,QAAIF,MAAJ,EAAY,OAAOA,MAAP;AACZ,UAAMG,MAAM,GAAGJ,IAAI,CAACI,MAApB;;AACA,QAAIA,MAAM,IAAIC,IAAI,CAACC,MAAL,CAAYF,MAAZ,CAAd,EAAmC;AACjC,aAAOL,gBAAgB,CAACK,MAAD,CAAvB;AACD;;AAED,WAAO,IAAP;AACD;;AAEM,WAASG,YAAT,CACLC,MADK,EAELC,KAAK,GAAG,CAFH,EAGLC,OAAgE,GAAG,EAH9D,EAIL;AACA,UAAM;AAAEC,MAAAA,MAAM,GAAG,GAAX;AAAgBC,MAAAA,iBAAiB,GAAG;AAApC,QAA8CF,OAApD;;AAEA,QAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIK,SAAJ,CAAe,gDAA+C,OAAOL,MAAO,IAA5E,CAAN;AACD;;AAED,QAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAII,SAAJ,CAAe,gDAA+C,OAAOJ,KAAM,IAA3E,CAAN;AACD;;AAED,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAIK,UAAJ,CAAgB,8CAA6CL,KAAM,IAAnE,CAAN;AACD;;AAED,QAAI,OAAOE,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIE,SAAJ,CAAe,yDAAwD,OAAOF,MAAO,IAArF,CAAN;AACD;;AAED,QAAIF,KAAK,KAAK,CAAd,EAAiB;AACf,aAAOD,MAAP;AACD;;AAED,UAAMO,KAAK,GAAGH,iBAAiB,GAAG,KAAH,GAAW,aAA1C;AAEA,WAAOJ,MAAM,CAACd,OAAP,CAAeqB,KAAf,EAAsBJ,MAAM,CAACK,MAAP,CAAcP,KAAd,CAAtB,CAAP;AACD,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,WAASQ,UAAT,CAELC,CAAC,GAAG,CAFC,EAGLC,CAAC,GAAG,CAHC,EAIL7B,KAJK,EAKLC,MALK,EAMc;AACnBD,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAI,KAAKA,MAAxB;AACA,UAAM6B,UAAU,GAAG,KAAKC,aAAL,EAAnB;;AACA,QAAI,CAACD,UAAL,EAAiB;AACf,aAAO,IAAP;AACD;;AACD,UAAME,SAAS,GAAG,KAAKC,aAAL,EAAlB;;AAEA,UAAMC,WAA8B,GAAG,EAAvC;AACA,UAAMC,OAAO,GAAG,EAAhB;AAEA,UAAMC,OAAO,GAAG,IAAIC,GAAG,CAACC,iBAAR,EAAhB;AACAF,IAAAA,OAAO,CAACG,SAAR,CAAkBX,CAAlB,GAAsBA,CAAtB;AACAQ,IAAAA,OAAO,CAACG,SAAR,CAAkBV,CAAlB,GAAsBA,CAAtB;AACAO,IAAAA,OAAO,CAACI,SAAR,CAAkBxC,KAAlB,GAA0BA,KAA1B;AACAoC,IAAAA,OAAO,CAACI,SAAR,CAAkBvC,MAAlB,GAA2BA,MAA3B;AACAkC,IAAAA,OAAO,CAACM,IAAR,CAAaL,OAAb;AAEA,UAAMM,MAAM,GAAG,IAAIC,UAAJ,CAAe3C,KAAK,GAAGC,MAAR,GAAiB,CAAhC,CAAf;AACAiC,IAAAA,WAAW,CAACO,IAAZ,CAAiBC,MAAjB;AAEAV,IAAAA,SAAS,QAAT,YAAAA,SAAS,CAAEY,oBAAX,CAAgCd,UAAhC,EAA4CI,WAA5C,EAAyDC,OAAzD;AAEA,WAAOO,MAAP;AACD;;;gBA1HexD,U;yBAMAO,mB;wBAWAS,kB;yBAIAG,mB;kBAIAC,Y;sBAIAG,gB;kBAWAQ,Y;gBAmDAU;;;;;;AA7FPd,MAAAA,M,OAAAA,M;AAAQtB,MAAAA,Q,OAAAA,Q;AAAUF,MAAAA,Q,OAAAA,Q;AAAUgD,MAAAA,G,OAAAA,G;AAAKtB,MAAAA,I,OAAAA,I;AAAMhB,MAAAA,I,OAAAA,I;AAAMD,MAAAA,I,OAAAA,I","sourcesContent":["import { Canvas, Director, director, gfx, Node, rect, Rect, RenderTexture } from \"cc\";\n\nexport function yieldFrame() {\n  return new Promise((resolve) => {\n    director.once(Director.EVENT_BEGIN_FRAME, resolve);\n  });\n}\n\nexport function intersectionPercent(rectA: Rect, rectB: Rect) {\n  if (!rectA.intersects(rectB)) return 0;\n  const intersection = Rect.intersection(rect(), rectA, rectB);\n  if (intersection.width === 0 || intersection.height === 0) {\n    return 0;\n  }\n\n  return (intersection.width * intersection.height) / (rectA.width * rectA.height);\n}\n\n// NOTE: only escapes a \" if it's not already escaped\nexport function escapeDoubleQuotes(str: string) {\n  return str.replace(/\\\\([\\s\\S])|(\")/g, '\"$1$2');\n}\n\nexport function encloseDoubleQuotes(str: string) {\n  return `\"${escapeDoubleQuotes(str)}\"`;\n}\n\nexport function camelToSnake(str: string) {\n  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\nexport function findParentCanvas(node: Node): Canvas | null {\n  const canvas = node.getComponent(Canvas);\n  if (canvas) return canvas;\n  const parent = node.parent;\n  if (parent && Node.isNode(parent)) {\n    return findParentCanvas(parent);\n  }\n\n  return null;\n}\n\nexport function indentString(\n  string: string,\n  count = 1,\n  options: Partial<{ indent: string; includeEmptyLines: boolean }> = {},\n) {\n  const { indent = \" \", includeEmptyLines = false } = options;\n\n  if (typeof string !== \"string\") {\n    throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``);\n  }\n\n  if (typeof count !== \"number\") {\n    throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n  }\n\n  if (count < 0) {\n    throw new RangeError(`Expected \\`count\\` to be at least 0, got \\`${count}\\``);\n  }\n\n  if (typeof indent !== \"string\") {\n    throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof indent}\\``);\n  }\n\n  if (count === 0) {\n    return string;\n  }\n\n  const regex = includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n  return string.replace(regex, indent.repeat(count));\n}\n\n// export function extensionMethod(ctor: any): MethodDecorator {\n//   let originalFunction: Function;\n//   return function (_, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n//     if (!descriptor.value) return;\n//     originalFunction = descriptor.value;\n//     ctor.prototype[propertyKey] = function (...args: any) {\n//       return originalFunction(this, ...args);\n//     };\n//   };\n// }\n\n// Hack for 3.x to allow !!!\n/**\n * Read pixel buffer from render texture\n * @param x The location on x axis\n * @param y The location on y axis\n * @param width The pixel width\n * @param height The pixel height\n */\nexport function readPixels(\n  this: RenderTexture,\n  x = 0,\n  y = 0,\n  width?: number,\n  height?: number,\n): Uint8Array | null {\n  width = width || this.width;\n  height = height || this.height;\n  const gfxTexture = this.getGFXTexture();\n  if (!gfxTexture) {\n    return null;\n  }\n  const gfxDevice = this._getGFXDevice();\n\n  const bufferViews: ArrayBufferView[] = [];\n  const regions = [];\n\n  const region0 = new gfx.BufferTextureCopy();\n  region0.texOffset.x = x;\n  region0.texOffset.y = y;\n  region0.texExtent.width = width;\n  region0.texExtent.height = height;\n  regions.push(region0);\n\n  const buffer = new Uint8Array(width * height * 4);\n  bufferViews.push(buffer);\n\n  gfxDevice?.copyTextureToBuffers(gfxTexture, bufferViews, regions);\n\n  return buffer;\n}\n"]}